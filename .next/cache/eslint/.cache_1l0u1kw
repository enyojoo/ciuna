[{"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\signin\\page.tsx":"1","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\signup\\page.tsx":"2","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\verify-email\\page.tsx":"3","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\admin\\page.tsx":"4","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\dashboard\\route.ts":"5","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\realtime\\route.ts":"6","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\track\\route.ts":"7","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\listings\\route.ts":"8","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\messages\\route.ts":"9","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notification-preferences\\route.ts":"10","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notifications\\route.ts":"11","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notifications\\[id]\\read\\route.ts":"12","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\orders\\route.ts":"13","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\dashboard\\page.tsx":"14","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\inbox\\page.tsx":"15","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\layout.tsx":"16","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\listings\\page.tsx":"17","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\orders\\page.tsx":"18","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\page.tsx":"19","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\payments\\page.tsx":"20","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\privacy\\page.tsx":"21","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\provider-dashboard\\page.tsx":"22","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\providers.tsx":"23","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\search\\page.tsx":"24","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\security\\page.tsx":"25","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\sell\\new\\page.tsx":"26","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\services\\page.tsx":"27","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\services\\[id]\\page.tsx":"28","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\settings\\page.tsx":"29","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\subscriptions\\page.tsx":"30","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendor-dashboard\\page.tsx":"31","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendors\\page.tsx":"32","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendors\\[id]\\page.tsx":"33","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\advanced-search.tsx":"34","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\analytics-dashboard.tsx":"35","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\business-dashboard.tsx":"36","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\category-grid.tsx":"37","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\currency-selector.tsx":"38","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\currency-settings.tsx":"39","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-listings.tsx":"40","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-services.tsx":"41","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-vendors.tsx":"42","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\hero.tsx":"43","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\kyc-verification.tsx":"44","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\language-selector.tsx":"45","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\localized-text.tsx":"46","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\navigation.tsx":"47","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\notification-center.tsx":"48","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\notification-settings.tsx":"49","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\payment-method-selector.tsx":"50","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\payment-processor.tsx":"51","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\search-results.tsx":"52","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\stats.tsx":"53","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\testimonials.tsx":"54","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\two-factor-setup.tsx":"55","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\lib\\auth-context.tsx":"56","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\lib\\utils.ts":"57"},{"size":7754,"mtime":1757702553607,"results":"58","hashOfConfig":"59"},{"size":11309,"mtime":1757702579240,"results":"60","hashOfConfig":"59"},{"size":7322,"mtime":1757761677125,"results":"61","hashOfConfig":"59"},{"size":22261,"mtime":1757761677126,"results":"62","hashOfConfig":"59"},{"size":1002,"mtime":1757730740367,"results":"63","hashOfConfig":"59"},{"size":943,"mtime":1757761677125,"results":"64","hashOfConfig":"59"},{"size":1274,"mtime":1757708901129,"results":"65","hashOfConfig":"59"},{"size":1183,"mtime":1757761677125,"results":"66","hashOfConfig":"59"},{"size":2691,"mtime":1757761677125,"results":"67","hashOfConfig":"59"},{"size":2488,"mtime":1757730740367,"results":"68","hashOfConfig":"59"},{"size":1245,"mtime":1757730740367,"results":"69","hashOfConfig":"59"},{"size":1136,"mtime":1757730740367,"results":"70","hashOfConfig":"59"},{"size":3023,"mtime":1757761677125,"results":"71","hashOfConfig":"59"},{"size":34899,"mtime":1757706755877,"results":"72","hashOfConfig":"59"},{"size":11362,"mtime":1757734689215,"results":"73","hashOfConfig":"59"},{"size":2080,"mtime":1757702447997,"results":"74","hashOfConfig":"59"},{"size":10034,"mtime":1757734689215,"results":"75","hashOfConfig":"59"},{"size":9353,"mtime":1757734689215,"results":"76","hashOfConfig":"59"},{"size":400,"mtime":1757761685182,"results":"77","hashOfConfig":"59"},{"size":16431,"mtime":1757728639986,"results":"78","hashOfConfig":"59"},{"size":19988,"mtime":1757711147629,"results":"79","hashOfConfig":"59"},{"size":24618,"mtime":1757734689215,"results":"80","hashOfConfig":"59"},{"size":1282,"mtime":1757761677126,"results":"81","hashOfConfig":"59"},{"size":10248,"mtime":1757727774451,"results":"82","hashOfConfig":"59"},{"size":20126,"mtime":1757711147619,"results":"83","hashOfConfig":"59"},{"size":13581,"mtime":1757754853006,"results":"84","hashOfConfig":"59"},{"size":11893,"mtime":1757755645038,"results":"85","hashOfConfig":"59"},{"size":13570,"mtime":1757755558060,"results":"86","hashOfConfig":"59"},{"size":10304,"mtime":1757709525782,"results":"87","hashOfConfig":"59"},{"size":14706,"mtime":1757728648786,"results":"88","hashOfConfig":"59"},{"size":13131,"mtime":1757759101570,"results":"89","hashOfConfig":"59"},{"size":9729,"mtime":1757759102184,"results":"90","hashOfConfig":"59"},{"size":14528,"mtime":1757759101905,"results":"91","hashOfConfig":"59"},{"size":16099,"mtime":1757714016189,"results":"92","hashOfConfig":"59"},{"size":13671,"mtime":1757708901125,"results":"93","hashOfConfig":"59"},{"size":20311,"mtime":1757759102518,"results":"94","hashOfConfig":"59"},{"size":2034,"mtime":1757682110948,"results":"95","hashOfConfig":"59"},{"size":7074,"mtime":1757709525772,"results":"96","hashOfConfig":"59"},{"size":5327,"mtime":1757759102707,"results":"97","hashOfConfig":"59"},{"size":4054,"mtime":1757759102882,"results":"98","hashOfConfig":"59"},{"size":4072,"mtime":1757759103009,"results":"99","hashOfConfig":"59"},{"size":4554,"mtime":1757759103122,"results":"100","hashOfConfig":"59"},{"size":4496,"mtime":1757693767989,"results":"101","hashOfConfig":"59"},{"size":16531,"mtime":1757710719042,"results":"102","hashOfConfig":"59"},{"size":5829,"mtime":1757709525710,"results":"103","hashOfConfig":"59"},{"size":6246,"mtime":1757709525773,"results":"104","hashOfConfig":"59"},{"size":11416,"mtime":1757714016471,"results":"105","hashOfConfig":"59"},{"size":9996,"mtime":1757759103306,"results":"106","hashOfConfig":"59"},{"size":9276,"mtime":1757708900512,"results":"107","hashOfConfig":"59"},{"size":10791,"mtime":1757760232573,"results":"108","hashOfConfig":"59"},{"size":14221,"mtime":1757712201017,"results":"109","hashOfConfig":"59"},{"size":11329,"mtime":1757714016432,"results":"110","hashOfConfig":"59"},{"size":2080,"mtime":1757682110948,"results":"111","hashOfConfig":"59"},{"size":3947,"mtime":1757682110948,"results":"112","hashOfConfig":"59"},{"size":13599,"mtime":1757710719042,"results":"113","hashOfConfig":"59"},{"size":4160,"mtime":1757761676904,"results":"114","hashOfConfig":"59"},{"size":5017,"mtime":1757728606441,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},"1xljufp",{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\signin\\page.tsx",["321"],[],"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Button, Input, Card, CardContent, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { useAuth } from '../../../lib/auth-context';\r\nimport { Eye, EyeOff, Mail, Lock } from 'lucide-react';\r\n\r\nexport default function SignInPage() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const { signIn } = useAuth();\r\n  const router = useRouter();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      await signIn(email, password);\r\n      router.push('/');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to sign in');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full space-y-8\">\r\n        <div className=\"text-center\">\r\n          <div className=\"mx-auto h-12 w-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\r\n            <span className=\"text-white font-bold text-xl\">C</span>\r\n          </div>\r\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\r\n            Sign in to your account\r\n          </h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            Or{' '}\r\n            <Link href=\"/auth/signup\" className=\"font-medium text-blue-600 hover:text-blue-500\">\r\n              create a new account\r\n            </Link>\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Welcome back</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n              {error && (\r\n                <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm\">\r\n                  {error}\r\n                </div>\r\n              )}\r\n\r\n              <div>\r\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Email address\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    placeholder=\"Enter your email\"\r\n                    className=\"pl-10\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Password\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"password\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    placeholder=\"Enter your password\"\r\n                    className=\"pl-10 pr-10\"\r\n                    required\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                  >\r\n                    {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    id=\"remember-me\"\r\n                    name=\"remember-me\"\r\n                    type=\"checkbox\"\r\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                  />\r\n                  <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\r\n                    Remember me\r\n                  </label>\r\n                </div>\r\n\r\n                <div className=\"text-sm\">\r\n                  <Link href=\"/auth/forgot-password\" className=\"font-medium text-blue-600 hover:text-blue-500\">\r\n                    Forgot your password?\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={loading}\r\n              >\r\n                {loading ? 'Signing in...' : 'Sign in'}\r\n              </Button>\r\n            </form>\r\n\r\n            <div className=\"mt-6\">\r\n              <div className=\"relative\">\r\n                <div className=\"absolute inset-0 flex items-center\">\r\n                  <div className=\"w-full border-t border-gray-300\" />\r\n                </div>\r\n                <div className=\"relative flex justify-center text-sm\">\r\n                  <span className=\"px-2 bg-white text-gray-500\">Or continue with</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-6 grid grid-cols-2 gap-3\">\r\n                <Button variant=\"outline\" className=\"w-full\">\r\n                  <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\r\n                    <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\r\n                    <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\r\n                    <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\r\n                    <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\r\n                  </svg>\r\n                  Google\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"w-full\">\r\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\r\n                  </svg>\r\n                  GitHub\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\signup\\page.tsx",["322"],[],"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Button, Input, Card, CardContent, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { useAuth } from '../../../lib/auth-context';\r\nimport { Eye, EyeOff, Mail, Lock, User, MapPin } from 'lucide-react';\r\n\r\nexport default function SignUpPage() {\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    countryOfOrigin: '',\r\n    city: '',\r\n    phone: '',\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const { signUp } = useAuth();\r\n  const router = useRouter();\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    if (formData.password !== formData.confirmPassword) {\r\n      setError('Passwords do not match');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (formData.password.length < 6) {\r\n      setError('Password must be at least 6 characters');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await signUp(formData.email, formData.password, {\r\n        first_name: formData.firstName,\r\n        last_name: formData.lastName,\r\n        country_of_origin: formData.countryOfOrigin,\r\n        city: formData.city,\r\n        phone: formData.phone,\r\n      });\r\n      router.push('/auth/verify-email');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to create account');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const countries = [\r\n    'USA', 'UK', 'Germany', 'France', 'Italy', 'Spain', 'Canada', 'Australia',\r\n    'Netherlands', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Poland', 'Czech Republic',\r\n    'Hungary', 'Romania', 'Bulgaria', 'Greece', 'Portugal', 'Other'\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full space-y-8\">\r\n        <div className=\"text-center\">\r\n          <div className=\"mx-auto h-12 w-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\r\n            <span className=\"text-white font-bold text-xl\">C</span>\r\n          </div>\r\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\r\n            Create your account\r\n          </h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            Or{' '}\r\n            <Link href=\"/auth/signin\" className=\"font-medium text-blue-600 hover:text-blue-500\">\r\n              sign in to your existing account\r\n            </Link>\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Join the expat community</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n              {error && (\r\n                <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm\">\r\n                  {error}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    First Name\r\n                  </label>\r\n                  <div className=\"relative\">\r\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                    <Input\r\n                      id=\"firstName\"\r\n                      name=\"firstName\"\r\n                      type=\"text\"\r\n                      value={formData.firstName}\r\n                      onChange={handleChange}\r\n                      placeholder=\"First name\"\r\n                      className=\"pl-10\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Last Name\r\n                  </label>\r\n                  <Input\r\n                    id=\"lastName\"\r\n                    name=\"lastName\"\r\n                    type=\"text\"\r\n                    value={formData.lastName}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Last name\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Email address\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Enter your email\"\r\n                    className=\"pl-10\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"countryOfOrigin\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Country of Origin\r\n                </label>\r\n                <select\r\n                  id=\"countryOfOrigin\"\r\n                  name=\"countryOfOrigin\"\r\n                  value={formData.countryOfOrigin}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select your country</option>\r\n                  {countries.map(country => (\r\n                    <option key={country} value={country}>{country}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  City in Russia\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"city\"\r\n                    name=\"city\"\r\n                    type=\"text\"\r\n                    value={formData.city}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Moscow, St. Petersburg, etc.\"\r\n                    className=\"pl-10\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Phone Number (Optional)\r\n                </label>\r\n                <Input\r\n                  id=\"phone\"\r\n                  name=\"phone\"\r\n                  type=\"tel\"\r\n                  value={formData.phone}\r\n                  onChange={handleChange}\r\n                  placeholder=\"+7 (999) 123-4567\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Password\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={formData.password}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Create a password\"\r\n                    className=\"pl-10 pr-10\"\r\n                    required\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                  >\r\n                    {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Confirm Password\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n                  <Input\r\n                    id=\"confirmPassword\"\r\n                    name=\"confirmPassword\"\r\n                    type={showConfirmPassword ? 'text' : 'password'}\r\n                    value={formData.confirmPassword}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Confirm your password\"\r\n                    className=\"pl-10 pr-10\"\r\n                    required\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                  >\r\n                    {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center\">\r\n                <input\r\n                  id=\"terms\"\r\n                  name=\"terms\"\r\n                  type=\"checkbox\"\r\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                  required\r\n                />\r\n                <label htmlFor=\"terms\" className=\"ml-2 block text-sm text-gray-900\">\r\n                  I agree to the{' '}\r\n                  <Link href=\"/terms\" className=\"text-blue-600 hover:text-blue-500\">\r\n                    Terms of Service\r\n                  </Link>{' '}\r\n                  and{' '}\r\n                  <Link href=\"/privacy\" className=\"text-blue-600 hover:text-blue-500\">\r\n                    Privacy Policy\r\n                  </Link>\r\n                </label>\r\n              </div>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={loading}\r\n              >\r\n                {loading ? 'Creating account...' : 'Create account'}\r\n              </Button>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\(auth)\\verify-email\\page.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\admin\\page.tsx",["323","324","325","326","327","328","329","330","331","332","333","334","335"],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\dashboard\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\realtime\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\analytics\\track\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\listings\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\messages\\route.ts",["336","337","338"],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notification-preferences\\route.ts",["339"],[],"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@ciuna/sb';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('userId');\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\r\n    }\r\n\r\n    // Get user notification preferences\r\n    const { data: preferences, error } = await supabase\r\n      .from('user_notification_preferences')\r\n      .select('type, channel, enabled')\r\n      .eq('user_id', userId);\r\n\r\n    if (error) {\r\n      console.error('Error fetching notification preferences:', error);\r\n      return NextResponse.json({ error: 'Failed to fetch preferences' }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json(preferences || []);\r\n  } catch (error) {\r\n    console.error('Error in notification preferences GET:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { userId, preferences } = body;\r\n\r\n    if (!userId || !preferences) {\r\n      return NextResponse.json({ error: 'User ID and preferences are required' }, { status: 400 });\r\n    }\r\n\r\n    // Validate preferences format\r\n    if (!Array.isArray(preferences)) {\r\n      return NextResponse.json({ error: 'Preferences must be an array' }, { status: 400 });\r\n    }\r\n\r\n    // Transform preferences for database insertion\r\n    const preferencesData = preferences.map((pref: any) => ({\r\n      user_id: userId,\r\n      type: pref.type,\r\n      channel: pref.channel,\r\n      enabled: pref.enabled,\r\n      updated_at: new Date().toISOString(),\r\n    }));\r\n\r\n    // Upsert preferences (update existing, insert new)\r\n    const { error: upsertError } = await supabase\r\n      .from('user_notification_preferences')\r\n      .upsert(preferencesData, { \r\n        onConflict: 'user_id,type,channel',\r\n        ignoreDuplicates: false \r\n      });\r\n\r\n    if (upsertError) {\r\n      console.error('Error upserting notification preferences:', upsertError);\r\n      return NextResponse.json({ error: 'Failed to save preferences' }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Error in notification preferences POST:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notifications\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\notifications\\[id]\\read\\route.ts",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\api\\user\\orders\\route.ts",["340"],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\dashboard\\page.tsx",["341","342","343","344","345","346","347","348","349"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '../../lib/auth-context';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Avatar } from '@ciuna/ui';\r\nimport { \r\n  Package, \r\n  ShoppingCart, \r\n  MessageSquare, \r\n  Settings, \r\n  Plus,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Star,\r\n  MapPin,\r\n  Calendar,\r\n  CreditCard,\r\n  Truck,\r\n  CheckCircle,\r\n  Clock,\r\n  XCircle\r\n} from 'lucide-react';\r\nimport { formatPrice, formatPriceWithConversion, formatRelativeTime } from '../../lib/utils';\r\nimport { CurrencySettings } from '../../components/currency-settings';\r\nimport Link from 'next/link';\r\n\r\ninterface UserListing {\r\n  id: number;\r\n  title: string;\r\n  price_rub: number;\r\n  condition: string;\r\n  status: string;\r\n  city: string;\r\n  district: string;\r\n  photo_urls: string[];\r\n  created_at: string;\r\n  view_count: number;\r\n}\r\n\r\ninterface UserOrder {\r\n  id: number;\r\n  type: 'buying' | 'selling';\r\n  title: string;\r\n  price_rub: number;\r\n  status: string;\r\n  created_at: string;\r\n  buyer_name?: string;\r\n  seller_name?: string;\r\n  photo_url?: string;\r\n}\r\n\r\ninterface UserMessage {\r\n  id: number;\r\n  conversation_id: number;\r\n  other_user_name: string;\r\n  other_user_avatar?: string;\r\n  last_message: string;\r\n  last_message_at: string;\r\n  unread_count: number;\r\n}\r\n\r\nexport default function UserDashboard() {\r\n  const { user, profile } = useAuth();\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [listings, setListings] = useState<UserListing[]>([]);\r\n  const [orders, setOrders] = useState<UserOrder[]>([]);\r\n  const [messages, setMessages] = useState<UserMessage[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadDashboardData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Load user's listings\r\n      const listingsResponse = await fetch('/api/user/listings');\r\n      const listingsData = await listingsResponse.json();\r\n      setListings(listingsData || []);\r\n\r\n      // Load user's orders\r\n      const ordersResponse = await fetch('/api/user/orders');\r\n      const ordersData = await ordersResponse.json();\r\n      setOrders(ordersData || []);\r\n\r\n      // Load user's messages\r\n      const messagesResponse = await fetch('/api/user/messages');\r\n      const messagesData = await messagesResponse.json();\r\n      setMessages(messagesData || []);\r\n\r\n    } catch (error) {\r\n      console.error('Error loading dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status.toLowerCase()) {\r\n      case 'active': return 'bg-green-100 text-green-800';\r\n      case 'sold': return 'bg-blue-100 text-blue-800';\r\n      case 'pending_review': return 'bg-yellow-100 text-yellow-800';\r\n      case 'paused': return 'bg-gray-100 text-gray-800';\r\n      case 'delivered': return 'bg-green-100 text-green-800';\r\n      case 'in_transit': return 'bg-blue-100 text-blue-800';\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getConditionLabel = (condition: string) => {\r\n    switch (condition) {\r\n      case 'NEW': return 'New';\r\n      case 'LIKE_NEW': return 'Like New';\r\n      case 'GOOD': return 'Good';\r\n      case 'FAIR': return 'Fair';\r\n      default: return condition;\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-center\">\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Please Sign In</h2>\r\n              <p className=\"text-gray-600 mb-4\">You need to be signed in to access your dashboard.</p>\r\n              <Link href=\"/signin\">\r\n                <Button className=\"w-full\">Sign In</Button>\r\n              </Link>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900\">My Dashboard</h1>\r\n              <p className=\"text-gray-600 mt-1\">\r\n                Welcome back, {(profile as any)?.first_name || user.email}!\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center space-x-4\">\r\n              <Link href=\"/sell/new\">\r\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                  <Plus className=\"w-4 h-4 mr-2\" />\r\n                  Create Listing\r\n                </Button>\r\n              </Link>\r\n              <Link href=\"/profile\">\r\n                <Button variant=\"outline\">\r\n                  <Settings className=\"w-4 h-4 mr-2\" />\r\n                  Settings\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n          <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Package className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n                <div className=\"ml-4\">\r\n                  <p className=\"text-sm font-medium text-gray-600\">My Listings</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{listings.length}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <ShoppingCart className=\"w-6 h-6 text-green-600\" />\r\n                </div>\r\n                <div className=\"ml-4\">\r\n                  <p className=\"text-sm font-medium text-gray-600\">Total Orders</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{orders.length}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <MessageSquare className=\"w-6 h-6 text-purple-600\" />\r\n                </div>\r\n                <div className=\"ml-4\">\r\n                  <p className=\"text-sm font-medium text-gray-600\">Messages</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">\r\n                    {messages.reduce((sum, msg) => sum + msg.unread_count, 0)}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                  <Star className=\"w-6 h-6 text-orange-600\" />\r\n                </div>\r\n                <div className=\"ml-4\">\r\n                  <p className=\"text-sm font-medium text-gray-600\">Rating</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">4.8</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n          <TabsList className=\"grid w-full grid-cols-5 bg-white/80 backdrop-blur-sm\">\r\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n            <TabsTrigger value=\"listings\">My Listings</TabsTrigger>\r\n            <TabsTrigger value=\"orders\">Orders</TabsTrigger>\r\n            <TabsTrigger value=\"messages\">Messages</TabsTrigger>\r\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Overview Tab */}\r\n          <TabsContent value=\"overview\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Recent Listings */}\r\n              <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Package className=\"w-5 h-5 mr-2\" />\r\n                    Recent Listings\r\n                  </CardTitle>\r\n                  <CardDescription>Your latest marketplace listings</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    {listings.slice(0, 3).map((listing) => (\r\n                      <div key={listing.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\r\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\r\n                          {listing.photo_urls?.[0] ? (\r\n                            <img \r\n                              src={listing.photo_urls[0]} \r\n                              alt={listing.title}\r\n                              className=\"w-full h-full object-cover rounded-lg\"\r\n                            />\r\n                          ) : (\r\n                            <Package className=\"w-6 h-6 text-gray-400\" />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                            {listing.title}\r\n                          </p>\r\n                          <p className=\"text-sm text-gray-500\">\r\n                            {formatPrice(listing.price_rub)} • {listing.city}\r\n                          </p>\r\n                        </div>\r\n                        <Badge className={getStatusColor(listing.status)}>\r\n                          {listing.status}\r\n                        </Badge>\r\n                      </div>\r\n                    ))}\r\n                    {listings.length === 0 && (\r\n                      <p className=\"text-gray-500 text-center py-4\">No listings yet</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mt-4\">\r\n                    <Link href=\"/dashboard?tab=listings\">\r\n                      <Button variant=\"outline\" className=\"w-full\">\r\n                        View All Listings\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Recent Orders */}\r\n              <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <ShoppingCart className=\"w-5 h-5 mr-2\" />\r\n                    Recent Orders\r\n                  </CardTitle>\r\n                  <CardDescription>Your latest purchases and sales</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    {orders.slice(0, 3).map((order) => (\r\n                      <div key={order.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\r\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\r\n                          {order.photo_url ? (\r\n                            <img \r\n                              src={order.photo_url} \r\n                              alt={order.title}\r\n                              className=\"w-full h-full object-cover rounded-lg\"\r\n                            />\r\n                          ) : (\r\n                            <ShoppingCart className=\"w-6 h-6 text-gray-400\" />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                            {order.title}\r\n                          </p>\r\n                          <p className=\"text-sm text-gray-500\">\r\n                            {formatPrice(order.price_rub)} • {order.type === 'buying' ? 'Buying from' : 'Selling to'} {order.type === 'buying' ? order.seller_name : order.buyer_name}\r\n                          </p>\r\n                        </div>\r\n                        <Badge className={getStatusColor(order.status)}>\r\n                          {order.status}\r\n                        </Badge>\r\n                      </div>\r\n                    ))}\r\n                    {orders.length === 0 && (\r\n                      <p className=\"text-gray-500 text-center py-4\">No orders yet</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mt-4\">\r\n                    <Link href=\"/dashboard?tab=orders\">\r\n                      <Button variant=\"outline\" className=\"w-full\">\r\n                        View All Orders\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n\r\n            {/* Recent Messages */}\r\n            <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <MessageSquare className=\"w-5 h-5 mr-2\" />\r\n                  Recent Messages\r\n                </CardTitle>\r\n                <CardDescription>Your latest conversations</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {messages.slice(0, 5).map((message) => (\r\n                    <div key={message.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer\">\r\n                      <Avatar \r\n                        className=\"w-10 h-10\"\r\n                        src={message.other_user_avatar}\r\n                        fallback={message.other_user_name.charAt(0).toUpperCase()}\r\n                      />\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {message.other_user_name}\r\n                          </p>\r\n                          <p className=\"text-xs text-gray-500\">\r\n                            {formatRelativeTime(message.last_message_at)}\r\n                          </p>\r\n                        </div>\r\n                        <p className=\"text-sm text-gray-500 truncate\">\r\n                          {message.last_message}\r\n                        </p>\r\n                      </div>\r\n                      {message.unread_count > 0 && (\r\n                        <Badge className=\"bg-blue-600 text-white\">\r\n                          {message.unread_count}\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  {messages.length === 0 && (\r\n                    <p className=\"text-gray-500 text-center py-4\">No messages yet</p>\r\n                  )}\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <Link href=\"/dashboard?tab=messages\">\r\n                    <Button variant=\"outline\" className=\"w-full\">\r\n                      View All Messages\r\n                    </Button>\r\n                  </Link>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* My Listings Tab */}\r\n          <TabsContent value=\"listings\" className=\"space-y-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h2 className=\"text-2xl font-bold text-gray-900\">My Listings</h2>\r\n              <Link href=\"/sell/new\">\r\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                  <Plus className=\"w-4 h-4 mr-2\" />\r\n                  Create New Listing\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {listings.map((listing) => (\r\n                <Card key={listing.id} className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg overflow-hidden\">\r\n                  <div className=\"aspect-square bg-gray-200 relative\">\r\n                    {listing.photo_urls?.[0] ? (\r\n                      <img \r\n                        src={listing.photo_urls[0]} \r\n                        alt={listing.title}\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"w-full h-full flex items-center justify-center\">\r\n                        <Package className=\"w-16 h-16 text-gray-400\" />\r\n                      </div>\r\n                    )}\r\n                    <div className=\"absolute top-2 right-2\">\r\n                      <Badge className={getStatusColor(listing.status)}>\r\n                        {listing.status}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                  <CardContent className=\"p-4\">\r\n                    <h3 className=\"font-semibold text-gray-900 truncate mb-2\">\r\n                      {listing.title}\r\n                    </h3>\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <span className=\"text-2xl font-bold text-blue-600\">\r\n                        {formatPrice(listing.price_rub)}\r\n                      </span>\r\n                      <Badge variant=\"outline\">\r\n                        {getConditionLabel(listing.condition)}\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"flex items-center text-sm text-gray-500 mb-3\">\r\n                      <MapPin className=\"w-4 h-4 mr-1\" />\r\n                      {listing.city}, {listing.district}\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\r\n                      <span>{listing.view_count} views</span>\r\n                      <span>{formatRelativeTime(listing.created_at)}</span>\r\n                    </div>\r\n                    <div className=\"flex space-x-2\">\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\r\n                        <Eye className=\"w-4 h-4 mr-1\" />\r\n                        View\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\r\n                        <Edit className=\"w-4 h-4 mr-1\" />\r\n                        Edit\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700\">\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n\r\n            {listings.length === 0 && (\r\n              <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                <CardContent className=\"text-center py-12\">\r\n                  <Package className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Listings Yet</h3>\r\n                  <p className=\"text-gray-500 mb-6\">Start selling by creating your first listing</p>\r\n                  <Link href=\"/sell/new\">\r\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                      <Plus className=\"w-4 h-4 mr-2\" />\r\n                      Create Your First Listing\r\n                    </Button>\r\n                  </Link>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </TabsContent>\r\n\r\n          {/* Orders Tab */}\r\n          <TabsContent value=\"orders\" className=\"space-y-6\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900\">My Orders</h2>\r\n            \r\n            <div className=\"space-y-4\">\r\n              {orders.map((order) => (\r\n                <Card key={order.id} className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                  <CardContent className=\"p-6\">\r\n                    <div className=\"flex items-start space-x-4\">\r\n                      <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0\">\r\n                        {order.photo_url ? (\r\n                          <img \r\n                            src={order.photo_url} \r\n                            alt={order.title}\r\n                            className=\"w-full h-full object-cover rounded-lg\"\r\n                          />\r\n                        ) : (\r\n                          <ShoppingCart className=\"w-8 h-8 text-gray-400\" />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div>\r\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\r\n                              {order.title}\r\n                            </h3>\r\n                            <p className=\"text-gray-600 mb-2\">\r\n                              {order.type === 'buying' ? 'Buying from' : 'Selling to'} {order.type === 'buying' ? order.seller_name : order.buyer_name}\r\n                            </p>\r\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\r\n                              <span className=\"flex items-center\">\r\n                                <Calendar className=\"w-4 h-4 mr-1\" />\r\n                                {formatRelativeTime(order.created_at)}\r\n                              </span>\r\n                              <span className=\"flex items-center\">\r\n                                <CreditCard className=\"w-4 h-4 mr-1\" />\r\n                                {formatPrice(order.price_rub)}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <Badge className={`${getStatusColor(order.status)} mb-2`}>\r\n                              {order.status}\r\n                            </Badge>\r\n                            <p className=\"text-2xl font-bold text-gray-900\">\r\n                              {formatPrice(order.price_rub)}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"mt-4 flex space-x-2\">\r\n                          <Button size=\"sm\" variant=\"outline\">\r\n                            <Eye className=\"w-4 h-4 mr-1\" />\r\n                            View Details\r\n                          </Button>\r\n                          {order.status === 'pending' && (\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <CreditCard className=\"w-4 h-4 mr-1\" />\r\n                              Pay Now\r\n                            </Button>\r\n                          )}\r\n                          {order.status === 'in_transit' && (\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Truck className=\"w-4 h-4 mr-1\" />\r\n                              Track Package\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n\r\n            {orders.length === 0 && (\r\n              <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                <CardContent className=\"text-center py-12\">\r\n                  <ShoppingCart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Orders Yet</h3>\r\n                  <p className=\"text-gray-500 mb-6\">Your orders will appear here when you make purchases or sales</p>\r\n                  <Link href=\"/listings\">\r\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                      Browse Listings\r\n                    </Button>\r\n                  </Link>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </TabsContent>\r\n\r\n          {/* Messages Tab */}\r\n          <TabsContent value=\"messages\" className=\"space-y-6\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900\">Messages</h2>\r\n            \r\n            <div className=\"space-y-4\">\r\n              {messages.map((message) => (\r\n                <Card key={message.id} className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow cursor-pointer\">\r\n                  <CardContent className=\"p-6\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <Avatar \r\n                        className=\"w-12 h-12\"\r\n                        src={message.other_user_avatar}\r\n                        fallback={message.other_user_name.charAt(0).toUpperCase()}\r\n                      />\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center justify-between mb-1\">\r\n                          <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                            {message.other_user_name}\r\n                          </h3>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"text-sm text-gray-500\">\r\n                              {formatRelativeTime(message.last_message_at)}\r\n                            </span>\r\n                            {message.unread_count > 0 && (\r\n                              <Badge className=\"bg-blue-600 text-white\">\r\n                                {message.unread_count}\r\n                              </Badge>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <p className=\"text-gray-600 truncate\">\r\n                          {message.last_message}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n\r\n            {messages.length === 0 && (\r\n              <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n                <CardContent className=\"text-center py-12\">\r\n                  <MessageSquare className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Messages Yet</h3>\r\n                  <p className=\"text-gray-500 mb-6\">Start conversations by viewing listings or making purchases</p>\r\n                  <Link href=\"/listings\">\r\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                      Browse Listings\r\n                    </Button>\r\n                  </Link>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </TabsContent>\r\n\r\n          {/* Profile Tab */}\r\n          <TabsContent value=\"profile\" className=\"space-y-6\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900\">Profile Settings</h2>\r\n            \r\n            <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <CardTitle>Account Information</CardTitle>\r\n                <CardDescription>Manage your account details and preferences</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <Avatar \r\n                    className=\"w-20 h-20\"\r\n                    src={profile?.avatar_url}\r\n                    fallback={(profile as any)?.first_name?.[0] || user.email[0]}\r\n                  />\r\n                  <div>\r\n                    <Button variant=\"outline\" size=\"sm\">\r\n                      Change Photo\r\n                    </Button>\r\n                    <p className=\"text-sm text-gray-500 mt-1\">JPG, PNG up to 2MB</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      First Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={(profile as any)?.first_name || ''}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Last Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={(profile as any)?.last_name || ''}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Email\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    defaultValue={user.email}\r\n                    disabled\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500\"\r\n                  />\r\n                  <p className=\"text-sm text-gray-500 mt-1\">Email cannot be changed</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Phone\r\n                  </label>\r\n                  <input\r\n                    type=\"tel\"\r\n                    defaultValue={profile?.phone || ''}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Country of Origin\r\n                  </label>\r\n                  <select\r\n                    defaultValue={profile?.country_of_origin || ''}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"\">Select Country</option>\r\n                    <option value=\"US\">United States</option>\r\n                    <option value=\"UK\">United Kingdom</option>\r\n                    <option value=\"DE\">Germany</option>\r\n                    <option value=\"FR\">France</option>\r\n                    <option value=\"IT\">Italy</option>\r\n                    <option value=\"ES\">Spain</option>\r\n                    <option value=\"CA\">Canada</option>\r\n                    <option value=\"AU\">Australia</option>\r\n                    <option value=\"JP\">Japan</option>\r\n                    <option value=\"KR\">South Korea</option>\r\n                    <option value=\"CN\">China</option>\r\n                    <option value=\"IN\">India</option>\r\n                    <option value=\"BR\">Brazil</option>\r\n                    <option value=\"MX\">Mexico</option>\r\n                    <option value=\"other\">Other</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      City\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={profile?.city || ''}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      District\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={profile?.district || ''}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"verified_expat\"\r\n                    defaultChecked={profile?.verified_expat || false}\r\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                  />\r\n                  <label htmlFor=\"verified_expat\" className=\"text-sm font-medium text-gray-700\">\r\n                    I am a verified expat\r\n                  </label>\r\n                </div>\r\n\r\n                <div className=\"flex justify-end space-x-4\">\r\n                  <Button variant=\"outline\">Cancel</Button>\r\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">Save Changes</Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Currency Settings */}\r\n            <CurrencySettings />\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\inbox\\page.tsx",["350","351","352","353"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { Card, CardContent, CardHeader, Avatar, Badge, Button } from '@ciuna/ui';\r\nimport { \r\n  MessageCircle, \r\n  Search, \r\n  MoreVertical, \r\n  Send, \r\n  Paperclip,\r\n  Smile,\r\n  Phone,\r\n  Video\r\n} from 'lucide-react';\r\nimport { db } from '@ciuna/sb';\r\nimport { formatRelativeTime } from '@/lib/utils';\r\nimport type { Conversation, Message } from '@ciuna/types';\r\n\r\nexport default function InboxPage() {\r\n  const { user } = useAuth();\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadConversations();\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (selectedConversation) {\r\n      loadMessages(selectedConversation.id);\r\n    }\r\n  }, [selectedConversation]);\r\n\r\n  const loadConversations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await db.conversations.getAll(user?.id || '', 1, 50);\r\n      setConversations(data);\r\n    } catch (error) {\r\n      console.error('Error loading conversations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadMessages = async (conversationId: string) => {\r\n    try {\r\n      const { data } = await db.messages.getAll(conversationId, 1, 100);\r\n      setMessages(data);\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || !selectedConversation) return;\r\n\r\n    try {\r\n      await db.messages.create({\r\n        conversation_id: selectedConversation.id,\r\n        sender_id: user?.id || '',\r\n        content: newMessage.trim(),\r\n        message_type: 'TEXT',\r\n      });\r\n      \r\n      setNewMessage('');\r\n      // Reload messages\r\n      loadMessages(selectedConversation.id);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const getOtherParticipant = (conversation: Conversation) => {\r\n    // TODO: Implement participant lookup when using ConversationWithDetails\r\n    return null;\r\n  };\r\n\r\n  const filteredConversations = conversations.filter(conversation => {\r\n    if (!searchQuery) return true;\r\n    // TODO: Implement search when using ConversationWithDetails\r\n    return true;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          {Array.from({ length: 5 }).map((_, i) => (\r\n            <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\r\n          Messages\r\n        </h1>\r\n        <p className=\"text-lg text-gray-600\">\r\n          Chat with buyers and sellers\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[600px]\">\r\n        {/* Conversations List */}\r\n        <div className=\"lg:col-span-1\">\r\n          <Card className=\"h-full\">\r\n            <CardHeader className=\"pb-4\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search conversations...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"p-0\">\r\n              {filteredConversations.length === 0 ? (\r\n                <div className=\"text-center py-12\">\r\n                  <MessageCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                    No conversations yet\r\n                  </h3>\r\n                  <p className=\"text-gray-600\">\r\n                    Start a conversation by messaging a seller\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-1\">\r\n                  {filteredConversations.map((conversation) => {\r\n                    const otherParticipant = getOtherParticipant(conversation);\r\n                    const lastMessage = null; // TODO: Get last message when using ConversationWithDetails\r\n                    \r\n                    return (\r\n                      <div\r\n                        key={conversation.id}\r\n                        onClick={() => setSelectedConversation(conversation)}\r\n                        className={`p-4 cursor-pointer hover:bg-gray-50 border-b border-gray-100 ${\r\n                          selectedConversation?.id === conversation.id ? 'bg-blue-50' : ''\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <Avatar\r\n                            src={undefined}\r\n                            fallback=\"U\"\r\n                            size=\"md\"\r\n                          />\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                                Unknown User\r\n                              </p>\r\n                              <p className=\"text-xs text-gray-500\">\r\n                                No messages\r\n                              </p>\r\n                            </div>\r\n                            <p className=\"text-sm text-gray-600 truncate\">\r\n                              No recent messages\r\n                            </p>\r\n                          </div>\r\n                          <Badge variant=\"default\" className=\"bg-blue-500\">\r\n                            0\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Chat Area */}\r\n        <div className=\"lg:col-span-2\">\r\n          {selectedConversation ? (\r\n            <Card className=\"h-full flex flex-col\">\r\n              {/* Chat Header */}\r\n              <div className=\"p-4 border-b border-gray-200\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <Avatar\r\n                      src={undefined}\r\n                      fallback=\"U\"\r\n                      size=\"md\"\r\n                    />\r\n                    <div>\r\n                      <h3 className=\"font-semibold text-gray-900\">\r\n                        Unknown User\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600\">Online</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Phone className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Video className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Messages */}\r\n              <div className=\"flex-1 p-4 overflow-y-auto space-y-4\">\r\n                {messages.length === 0 ? (\r\n                  <div className=\"text-center py-12\">\r\n                    <MessageCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                    <p className=\"text-gray-600\">No messages yet. Start the conversation!</p>\r\n                  </div>\r\n                ) : (\r\n                  messages.map((message) => (\r\n                    <div\r\n                      key={message.id}\r\n                      className={`flex ${message.sender_id === user?.id ? 'justify-end' : 'justify-start'}`}\r\n                    >\r\n                      <div\r\n                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\r\n                          message.sender_id === user?.id\r\n                            ? 'bg-blue-500 text-white'\r\n                            : 'bg-gray-100 text-gray-900'\r\n                        }`}\r\n                      >\r\n                        <p className=\"text-sm\">{message.content}</p>\r\n                        <p className={`text-xs mt-1 ${\r\n                          message.sender_id === user?.id ? 'text-blue-100' : 'text-gray-500'\r\n                        }`}>\r\n                          {formatRelativeTime(message.created_at)}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n\r\n              {/* Message Input */}\r\n              <div className=\"p-4 border-t border-gray-200\">\r\n                <form onSubmit={sendMessage} className=\"flex items-center space-x-2\">\r\n                  <Button variant=\"ghost\" size=\"sm\" type=\"button\">\r\n                    <Paperclip className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                  <Button variant=\"ghost\" size=\"sm\" type=\"button\">\r\n                    <Smile className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  <Button type=\"submit\" disabled={!newMessage.trim()}>\r\n                    <Send className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"h-full flex items-center justify-center\">\r\n              <div className=\"text-center\">\r\n                <MessageCircle className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                  Select a conversation\r\n                </h3>\r\n                <p className=\"text-gray-600\">\r\n                  Choose a conversation from the list to start chatting\r\n                </p>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\layout.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\listings\\page.tsx",["354","355"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, Badge, Button, Input } from '@ciuna/ui';\nimport { Search, Filter, MapPin, Eye, Heart, SlidersHorizontal } from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice, formatRelativeTime } from '../../lib/utils';\nimport type { Listing, ListingFilters } from '@ciuna/types';\n\nexport default function ListingsPage() {\n  const searchParams = useSearchParams();\n  const [listings, setListings] = useState<Listing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<ListingFilters>({\n    search: searchParams.get('search') || '',\n    city: searchParams.get('city') || '',\n    category_id: searchParams.get('category') || undefined,\n  });\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    const loadListings = async () => {\n      try {\n        setLoading(true);\n        const { data } = await db.listings.getAll(filters, 1, 20);\n        setListings(data);\n      } catch (error) {\n        console.error('Error loading listings:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadListings();\n  }, [filters]);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const search = formData.get('search') as string;\n    setFilters(prev => ({ ...prev, search }));\n  };\n\n  const handleFilterChange = (key: keyof ListingFilters, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-gray-200 rounded-lg h-48 mb-4\"></div>\n              <div className=\"space-y-2\">\n                <div className=\"bg-gray-200 rounded h-4\"></div>\n                <div className=\"bg-gray-200 rounded h-4 w-3/4\"></div>\n                <div className=\"bg-gray-200 rounded h-6 w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          Browse Listings\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          Discover amazing products from fellow expats and local vendors\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Search Bar */}\n          <form onSubmit={handleSearch} className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                name=\"search\"\n                placeholder=\"Search for products...\"\n                defaultValue={filters.search}\n                className=\"pl-10\"\n              />\n            </div>\n          </form>\n\n          {/* Filter Button */}\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"lg:hidden\"\n          >\n            <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Filters Panel */}\n        {showFilters && (\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  City\n                </label>\n                <select\n                  value={filters.city || ''}\n                  onChange={(e) => handleFilterChange('city', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">All Cities</option>\n                  <option value=\"Moscow\">Moscow</option>\n                  <option value=\"St. Petersburg\">St. Petersburg</option>\n                  <option value=\"Novosibirsk\">Novosibirsk</option>\n                  <option value=\"Yekaterinburg\">Yekaterinburg</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Condition\n                </label>\n                <select\n                  value={filters.condition || ''}\n                  onChange={(e) => handleFilterChange('condition', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">All Conditions</option>\n                  <option value=\"NEW\">New</option>\n                  <option value=\"LIKE_NEW\">Like New</option>\n                  <option value=\"GOOD\">Good</option>\n                  <option value=\"FAIR\">Fair</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Price Range\n                </label>\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={filters.min_price || ''}\n                    onChange={(e) => handleFilterChange('min_price', e.target.value ? parseInt(e.target.value) : undefined)}\n                    className=\"flex-1\"\n                  />\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={filters.max_price || ''}\n                    onChange={(e) => handleFilterChange('max_price', e.target.value ? parseInt(e.target.value) : undefined)}\n                    className=\"flex-1\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Results */}\n      <div className=\"mb-4\">\n        <p className=\"text-gray-600\">\n          {listings.length} listings found\n        </p>\n      </div>\n\n      {/* Listings Grid */}\n      {listings.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">🔍</div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            No listings found\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            Try adjusting your search criteria or browse all listings\n          </p>\n          <Button asChild>\n            <Link href=\"/listings\">\n              Browse All Listings\n            </Link>\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {listings.map((listing) => (\n            <Link key={listing.id} href={`/listings/${listing.id}`}>\n              <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n                <div className=\"relative\">\n                  {listing.photo_urls && listing.photo_urls.length > 0 ? (\n                    <Image\n                      src={listing.photo_urls[0]}\n                      alt={listing.title}\n                      width={400}\n                      height={300}\n                      className=\"w-full h-48 object-cover rounded-t-lg\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-48 bg-gray-200 rounded-t-lg flex items-center justify-center\">\n                      <span className=\"text-gray-400 text-4xl\">📦</span>\n                    </div>\n                  )}\n                  <div className=\"absolute top-2 right-2\">\n                    <Badge variant=\"secondary\" className=\"bg-white/90 text-gray-900\">\n                      {listing.condition}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-2 group-hover:text-blue-600 transition-colors line-clamp-2\">\n                    {listing.title}\n                  </h3>\n                  \n                  <div className=\"flex items-center text-sm text-gray-600 mb-2\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    {listing.city}\n                    {listing.district && `, ${listing.district}`}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-2xl font-bold text-blue-600\">\n                      {formatPrice(listing.price_rub)}\n                    </span>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                      <div className=\"flex items-center\">\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        {listing.view_count}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Heart className=\"h-4 w-4 mr-1\" />\n                        {listing.favorite_count}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                    <span>by Unknown Seller</span>\n                    <span>{formatRelativeTime(listing.created_at)}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\orders\\page.tsx",["356","357"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle, Badge, Button } from '@ciuna/ui';\nimport { \n  ShoppingBag, \n  Package, \n  Truck, \n  CheckCircle, \n  XCircle,\n  Eye,\n  MessageCircle,\n  Star\n} from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice, formatRelativeTime } from '@/lib/utils';\nimport type { Order } from '@ciuna/types';\n\nexport default function OrdersPage() {\n  const { user } = useAuth();\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'buying' | 'selling'>('buying');\n\n  useEffect(() => {\n    if (user) {\n      loadOrders();\n    }\n  }, [user, activeTab]);\n\n  const loadOrders = async () => {\n    try {\n      setLoading(true);\n      const filters = activeTab === 'buying' \n        ? { buyer_id: user?.id }\n        : { seller_id: user?.id };\n      \n      const { data } = await db.orders.getAll(filters, 1, 50);\n      setOrders(data);\n    } catch (error) {\n      console.error('Error loading orders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return <Package className=\"h-5 w-5 text-yellow-500\" />;\n      case 'PAID':\n        return <CheckCircle className=\"h-5 w-5 text-blue-500\" />;\n      case 'FULFILLING':\n        return <Truck className=\"h-5 w-5 text-purple-500\" />;\n      case 'DELIVERED':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'CANCELLED':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <ShoppingBag className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'PAID':\n        return 'bg-blue-100 text-blue-800';\n      case 'FULFILLING':\n        return 'bg-purple-100 text-purple-800';\n      case 'DELIVERED':\n        return 'bg-green-100 text-green-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"space-y-6\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-gray-200 rounded-lg h-32\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          Orders\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          Track your purchases and sales\n        </p>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"mb-8\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            <button\n              onClick={() => setActiveTab('buying')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'buying'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              Buying ({orders.filter(o => o.buyer_id === user?.id).length})\n            </button>\n            <button\n              onClick={() => setActiveTab('selling')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'selling'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              Selling ({orders.filter(o => o.seller_id === user?.id).length})\n            </button>\n          </nav>\n        </div>\n      </div>\n\n      {/* Orders List */}\n      {orders.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <ShoppingBag className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            No orders yet\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            {activeTab === 'buying' \n              ? 'You haven\\'t made any purchases yet.' \n              : 'You haven\\'t received any orders yet.'}\n          </p>\n          <Button asChild>\n            <a href={activeTab === 'buying' ? '/listings' : '/sell/new'}>\n              {activeTab === 'buying' ? 'Start Shopping' : 'Create Listing'}\n            </a>\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {orders.map((order) => (\n            <Card key={order.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      {getStatusIcon(order.status)}\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900\">\n                          Order #{order.id}\n                        </h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {formatRelativeTime(order.created_at)}\n                        </p>\n                      </div>\n                      <Badge className={getStatusColor(order.status)}>\n                        {order.status}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">\n                          {activeTab === 'buying' ? 'Seller' : 'Buyer'}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          {activeTab === 'buying' ? 'Unknown Seller' : 'Unknown Buyer'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">Total Amount</p>\n                        <p className=\"text-lg font-semibold text-gray-900\">\n                          {formatPrice(order.total_amount_rub)}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Order Items */}\n                    <div className=\"flex items-center space-x-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"h-16 w-16 bg-gray-200 rounded-lg flex items-center justify-center\">\n                          <Package className=\"h-8 w-8 text-gray-400\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-900\">Order Item</h4>\n                        <p className=\"text-sm text-gray-600\">Item details not available</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-gray-900\">\n                          {formatPrice(order.total_amount_rub)}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Vendor product section commented out - requires OrderWithRelations type */}\n\n                    {/* Delivery Info - commented out - requires OrderWithRelations type */}\n\n                    {/* Escrow Info */}\n                    <div className=\"mb-4 p-4 bg-green-50 rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-green-900\">Escrow Protection</p>\n                          <p className=\"text-sm text-green-800\">\n                            {order.escrow_amount_rub} RUB held in escrow\n                          </p>\n                        </div>\n                        <Badge variant=\"success\">\n                          {order.escrow_status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex flex-col space-y-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View Details\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <MessageCircle className=\"h-4 w-4 mr-2\" />\n                      Message\n                    </Button>\n                    {order.status === 'DELIVERED' && (\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Star className=\"h-4 w-4 mr-2\" />\n                        Leave Review\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\page.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\payments\\page.tsx",["358","359","360"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { PaymentService, PaymentMethod, PaymentTransaction, PaymentProvider } from '@ciuna/sb';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { useI18n } from '@/contexts/i18n-context';\r\nimport { \r\n  CreditCard, \r\n  Plus, \r\n  Trash2, \r\n  Edit, \r\n  CheckCircle, \r\n  XCircle,\r\n  Clock,\r\n  ExternalLink,\r\n  Smartphone,\r\n  Banknote,\r\n  Building2\r\n} from 'lucide-react';\r\n\r\nconst PROVIDER_ICONS: { [key: string]: React.ComponentType<any> } = {\r\n  'YOOMONEY': Smartphone,\r\n  'STRIPE': CreditCard,\r\n  'CASH': Banknote,\r\n  'BANK_TRANSFER': Building2,\r\n};\r\n\r\nconst METHOD_ICONS: { [key: string]: React.ComponentType<any> } = {\r\n  'CARD': CreditCard,\r\n  'BANK_ACCOUNT': Building2,\r\n  'WALLET': Smartphone,\r\n  'CASH': Banknote,\r\n  'CRYPTO': CreditCard,\r\n};\r\n\r\nexport default function PaymentsPage() {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [transactions, setTransactions] = useState<PaymentTransaction[]>([]);\r\n  const [providers, setProviders] = useState<PaymentProvider[]>([]);\r\n  const [showAddMethod, setShowAddMethod] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadPaymentData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadPaymentData = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [methods, txs, provs] = await Promise.all([\r\n        PaymentService.getPaymentMethods(user.id),\r\n        PaymentService.getUserTransactions(user.id, 20),\r\n        PaymentService.getProviders()\r\n      ]);\r\n\r\n      setPaymentMethods(methods);\r\n      setTransactions(txs);\r\n      setProviders(provs);\r\n    } catch (error) {\r\n      console.error('Error loading payment data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSetDefault = async (methodId: string) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const success = await PaymentService.setDefaultPaymentMethod(user.id, methodId);\r\n      if (success) {\r\n        await loadPaymentData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error setting default payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteMethod = async (methodId: string) => {\r\n    if (!user) return;\r\n\r\n    if (confirm('Are you sure you want to delete this payment method?')) {\r\n      try {\r\n        // In a real implementation, you would call a delete method\r\n        console.log('Delete payment method:', methodId);\r\n        await loadPaymentData();\r\n      } catch (error) {\r\n        console.error('Error deleting payment method:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'FAILED':\r\n      case 'CANCELLED':\r\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\r\n      case 'PROCESSING':\r\n        return <Clock className=\"h-4 w-4 text-blue-600\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\r\n      case 'FAILED':\r\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\r\n      case 'CANCELLED':\r\n        return <Badge className=\"bg-gray-100 text-gray-800\">Cancelled</Badge>;\r\n      case 'PROCESSING':\r\n        return <Badge className=\"bg-blue-100 text-blue-800\">Processing</Badge>;\r\n      case 'PENDING':\r\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\r\n      default:\r\n        return <Badge className=\"bg-gray-100 text-gray-800\">{status}</Badge>;\r\n    }\r\n  };\r\n\r\n  const getProviderIcon = (providerType: string) => {\r\n    const IconComponent = PROVIDER_ICONS[providerType] || CreditCard;\r\n    return <IconComponent className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getMethodIcon = (methodType: string) => {\r\n    const IconComponent = METHOD_ICONS[methodType] || CreditCard;\r\n    return <IconComponent className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getProviderName = (providerId: string) => {\r\n    const provider = providers.find(p => p.id === providerId);\r\n    return provider?.display_name || 'Unknown Provider';\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader>\r\n            <CardTitle>Access Denied</CardTitle>\r\n            <CardDescription>Please sign in to access payment settings.</CardDescription>\r\n          </CardHeader>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"animate-pulse space-y-6\">\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\r\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Payment Settings</h1>\r\n          <p className=\"text-gray-600 mt-2\">Manage your payment methods and view transaction history.</p>\r\n        </div>\r\n\r\n        <Tabs defaultValue=\"methods\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-2\">\r\n            <TabsTrigger value=\"methods\">Payment Methods</TabsTrigger>\r\n            <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Payment Methods Tab */}\r\n          <TabsContent value=\"methods\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <CardTitle>Payment Methods</CardTitle>\r\n                    <CardDescription>\r\n                      Manage your saved payment methods for faster checkout.\r\n                    </CardDescription>\r\n                  </div>\r\n                  <Button onClick={() => setShowAddMethod(true)}>\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Method\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {paymentMethods.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <CreditCard className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      No payment methods\r\n                    </h3>\r\n                    <p className=\"text-gray-600 mb-4\">\r\n                      Add a payment method to make checkout faster and easier.\r\n                    </p>\r\n                    <Button onClick={() => setShowAddMethod(true)}>\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Add Your First Method\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {paymentMethods.map((method) => (\r\n                      <div\r\n                        key={method.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            {getMethodIcon(method.method_type)}\r\n                            {getProviderIcon(providers.find(p => p.id === method.provider_id)?.provider_type || '')}\r\n                          </div>\r\n                          <div>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <span className=\"font-medium\">\r\n                                {method.method_type === 'CARD' ? 'Card' :\r\n                                 method.method_type === 'BANK_ACCOUNT' ? 'Bank Account' :\r\n                                 method.method_type === 'WALLET' ? 'Digital Wallet' :\r\n                                 method.method_type === 'CASH' ? 'Cash' :\r\n                                 method.method_type === 'CRYPTO' ? 'Cryptocurrency' :\r\n                                 method.method_type}\r\n                              </span>\r\n                              {method.is_default && (\r\n                                <Badge variant=\"secondary\" className=\"text-xs\">\r\n                                  Default\r\n                                </Badge>\r\n                              )}\r\n                              {method.is_verified && (\r\n                                <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                              )}\r\n                            </div>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              {getProviderName(method.provider_id)}\r\n                            </p>\r\n                            {method.metadata?.last4 && (\r\n                              <p className=\"text-xs text-gray-500\">\r\n                                •••• {method.metadata.last4}\r\n                              </p>\r\n                            )}\r\n                            {method.expires_at && (\r\n                              <p className=\"text-xs text-gray-500\">\r\n                                Expires {new Date(method.expires_at).toLocaleDateString()}\r\n                              </p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {!method.is_default && (\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleSetDefault(method.id)}\r\n                            >\r\n                              Set Default\r\n                            </Button>\r\n                          )}\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => console.log('Edit method:', method.id)}\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleDeleteMethod(method.id)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Supported Providers */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Supported Payment Providers</CardTitle>\r\n                <CardDescription>\r\n                  We support multiple payment providers for your convenience.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  {providers.map((provider) => (\r\n                    <div\r\n                      key={provider.id}\r\n                      className=\"flex items-center space-x-3 p-4 border rounded-lg\"\r\n                    >\r\n                      {getProviderIcon(provider.provider_type)}\r\n                      <div>\r\n                        <h3 className=\"font-medium\">{provider.display_name}</h3>\r\n                        <p className=\"text-sm text-gray-600\">\r\n                          {provider.supported_currencies.join(', ')}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Transactions Tab */}\r\n          <TabsContent value=\"transactions\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Transaction History</CardTitle>\r\n                <CardDescription>\r\n                  View your recent payment transactions and their status.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {transactions.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <CreditCard className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      No transactions yet\r\n                    </h3>\r\n                    <p className=\"text-gray-600\">\r\n                      Your payment transactions will appear here.\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {transactions.map((transaction) => (\r\n                      <div\r\n                        key={transaction.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          {getStatusIcon(transaction.status)}\r\n                          <div>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <span className=\"font-medium\">\r\n                                {transaction.transaction_type === 'PAYMENT' ? 'Payment' :\r\n                                 transaction.transaction_type === 'REFUND' ? 'Refund' :\r\n                                 transaction.transaction_type === 'CHARGEBACK' ? 'Chargeback' :\r\n                                 transaction.transaction_type === 'DISPUTE' ? 'Dispute' :\r\n                                 transaction.transaction_type === 'TRANSFER' ? 'Transfer' :\r\n                                 transaction.transaction_type}\r\n                              </span>\r\n                              {getStatusBadge(transaction.status)}\r\n                            </div>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              {formatPrice(transaction.amount, transaction.currency_code)}\r\n                            </p>\r\n                            <p className=\"text-xs text-gray-500\">\r\n                              {new Date(transaction.created_at).toLocaleString()}\r\n                            </p>\r\n                            {transaction.provider_transaction_id && (\r\n                              <p className=\"text-xs text-gray-500 font-mono\">\r\n                                ID: {transaction.provider_transaction_id}\r\n                              </p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {transaction.provider_response?.payment_url && (\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => window.open(transaction.provider_response.payment_url, '_blank')}\r\n                            >\r\n                              <ExternalLink className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\privacy\\page.tsx",["361","362","363"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SecurityService, PrivacyRequest, UserConsent } from '@ciuna/sb';\r\nimport { useAuth } from '../../lib/auth-context';\r\nimport { \r\n  Shield, \r\n  Download, \r\n  Trash2, \r\n  Edit, \r\n  CheckCircle, \r\n  Clock,\r\n  FileText,\r\n  Eye,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\n\r\nexport default function PrivacyPage() {\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [privacyRequests, setPrivacyRequests] = useState<PrivacyRequest[]>([]);\r\n  const [consents, setConsents] = useState<UserConsent[]>([]);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadPrivacyData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadPrivacyData = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [requests, userConsents] = await Promise.all([\r\n        SecurityService.getPrivacyRequests(user.id),\r\n        SecurityService.getConsents(user.id)\r\n      ]);\r\n\r\n      setPrivacyRequests(requests);\r\n      setConsents(userConsents);\r\n    } catch (error) {\r\n      console.error('Error loading privacy data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDataExport = async () => {\r\n    if (!user) return;\r\n\r\n    setSubmitting(true);\r\n    setMessage(null);\r\n\r\n    try {\r\n      const result = await SecurityService.submitPrivacyRequest(\r\n        user.id,\r\n        'DATA_EXPORT',\r\n        'Request for personal data export',\r\n        { includeAll: true }\r\n      );\r\n\r\n      if (result.success) {\r\n        setMessage({ \r\n          type: 'success', \r\n          text: 'Data export request submitted. You will receive an email with your data within 30 days.' \r\n        });\r\n        await loadPrivacyData();\r\n      } else {\r\n        setMessage({ type: 'error', text: 'Failed to submit data export request.' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting data export:', error);\r\n      setMessage({ type: 'error', text: 'An error occurred while submitting your request.' });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleDataDeletion = async () => {\r\n    if (!user) return;\r\n\r\n    if (!confirm('Are you sure you want to request data deletion? This action cannot be undone.')) {\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    setMessage(null);\r\n\r\n    try {\r\n      const result = await SecurityService.submitPrivacyRequest(\r\n        user.id,\r\n        'DATA_DELETION',\r\n        'Request for complete data deletion',\r\n        { confirmDeletion: true }\r\n      );\r\n\r\n      if (result.success) {\r\n        setMessage({ \r\n          type: 'success', \r\n          text: 'Data deletion request submitted. Your account will be deleted within 30 days.' \r\n        });\r\n        await loadPrivacyData();\r\n      } else {\r\n        setMessage({ type: 'error', text: 'Failed to submit data deletion request.' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting data deletion:', error);\r\n      setMessage({ type: 'error', text: 'An error occurred while submitting your request.' });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleConsentUpdate = async (consentType: string, granted: boolean) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const success = await SecurityService.updateConsent(\r\n        user.id,\r\n        consentType,\r\n        granted,\r\n        `Updated consent for ${consentType}`,\r\n        '1.0'\r\n      );\r\n\r\n      if (success) {\r\n        await loadPrivacyData();\r\n        setMessage({ \r\n          type: 'success', \r\n          text: `Consent ${granted ? 'granted' : 'withdrawn'} successfully.` \r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating consent:', error);\r\n      setMessage({ type: 'error', text: 'Failed to update consent.' });\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\r\n      case 'IN_PROGRESS':\r\n        return <Clock className=\"h-5 w-5 text-yellow-600\" />;\r\n      case 'REJECTED':\r\n        return <AlertTriangle className=\"h-5 w-5 text-red-600\" />;\r\n      default:\r\n        return <Clock className=\"h-5 w-5 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\r\n      case 'IN_PROGRESS':\r\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">In Progress</Badge>;\r\n      case 'REJECTED':\r\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\r\n      default:\r\n        return <Badge className=\"bg-blue-100 text-blue-800\">Pending</Badge>;\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader>\r\n            <CardTitle>Access Denied</CardTitle>\r\n            <CardDescription>Please sign in to access privacy settings.</CardDescription>\r\n          </CardHeader>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Privacy & Data Protection</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Manage your privacy settings and data protection rights under GDPR and other regulations.\r\n          </p>\r\n        </div>\r\n\r\n        {message && (\r\n          <div className={`mb-6 p-4 rounded-md ${\r\n            message.type === 'success' \r\n              ? 'bg-green-50 text-green-800 border border-green-200' \r\n              : 'bg-red-50 text-red-800 border border-red-200'\r\n          }`}>\r\n            {message.text}\r\n          </div>\r\n        )}\r\n\r\n        <Tabs defaultValue=\"rights\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"rights\">Your Rights</TabsTrigger>\r\n            <TabsTrigger value=\"consent\">Consent</TabsTrigger>\r\n            <TabsTrigger value=\"requests\">Requests</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Your Rights Tab */}\r\n          <TabsContent value=\"rights\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Download className=\"h-5 w-5 mr-2\" />\r\n                    Data Export\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Download a copy of all your personal data.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <p className=\"text-sm text-gray-600 mb-4\">\r\n                    You have the right to receive a copy of all personal data we hold about you in a structured, \r\n                    machine-readable format.\r\n                  </p>\r\n                  <Button\r\n                    onClick={handleDataExport}\r\n                    disabled={submitting}\r\n                    className=\"w-full\"\r\n                  >\r\n                    {submitting ? 'Requesting...' : 'Request Data Export'}\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Edit className=\"h-5 w-5 mr-2\" />\r\n                    Data Rectification\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Request correction of inaccurate personal data.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <p className=\"text-sm text-gray-600 mb-4\">\r\n                    You have the right to have inaccurate personal data corrected and incomplete data completed.\r\n                  </p>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    className=\"w-full\"\r\n                    onClick={() => window.location.href = '/settings'}\r\n                  >\r\n                    Update Your Data\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Trash2 className=\"h-5 w-5 mr-2\" />\r\n                    Data Deletion\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Request complete deletion of your personal data.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <p className=\"text-sm text-gray-600 mb-4\">\r\n                    You have the right to request the deletion of your personal data under certain circumstances.\r\n                  </p>\r\n                  <Button\r\n                    variant=\"destructive\"\r\n                    onClick={handleDataDeletion}\r\n                    disabled={submitting}\r\n                    className=\"w-full\"\r\n                  >\r\n                    {submitting ? 'Requesting...' : 'Request Data Deletion'}\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Eye className=\"h-5 w-5 mr-2\" />\r\n                    Data Portability\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Transfer your data to another service.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <p className=\"text-sm text-gray-600 mb-4\">\r\n                    You have the right to receive your personal data in a structured format and transfer it to another controller.\r\n                  </p>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    className=\"w-full\"\r\n                    onClick={handleDataExport}\r\n                    disabled={submitting}\r\n                  >\r\n                    {submitting ? 'Preparing...' : 'Request Data Transfer'}\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n\r\n            {/* Privacy Information */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Your Privacy Rights</CardTitle>\r\n                <CardDescription>\r\n                  Understanding your rights under data protection laws.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <h3 className=\"font-semibold mb-2\">Right to Information</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      You have the right to know what personal data we collect, how we use it, and who we share it with.\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold mb-2\">Right to Access</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      You can request access to all personal data we hold about you and information about how we process it.\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold mb-2\">Right to Rectification</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      You can request correction of any inaccurate or incomplete personal data we hold about you.\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold mb-2\">Right to Erasure</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      You can request deletion of your personal data in certain circumstances, such as when it's no longer necessary.\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold mb-2\">Right to Object</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      You can object to processing of your personal data for direct marketing or legitimate interests.\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Consent Tab */}\r\n          <TabsContent value=\"consent\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Consent Management</CardTitle>\r\n                <CardDescription>\r\n                  Manage your consent preferences for different types of data processing.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-6\">\r\n                  {[\r\n                    {\r\n                      type: 'MARKETING_EMAILS',\r\n                      title: 'Marketing Emails',\r\n                      description: 'Receive promotional emails and newsletters about our services and products.',\r\n                      current: consents.find(c => c.consent_type === 'MARKETING_EMAILS')?.granted || false\r\n                    },\r\n                    {\r\n                      type: 'ANALYTICS_TRACKING',\r\n                      title: 'Analytics Tracking',\r\n                      description: 'Allow us to collect anonymous usage data to improve our services.',\r\n                      current: consents.find(c => c.consent_type === 'ANALYTICS_TRACKING')?.granted || false\r\n                    },\r\n                    {\r\n                      type: 'COOKIES',\r\n                      title: 'Cookies',\r\n                      description: 'Allow us to use cookies to enhance your browsing experience.',\r\n                      current: consents.find(c => c.consent_type === 'COOKIES')?.granted || false\r\n                    },\r\n                    {\r\n                      type: 'DATA_PROCESSING',\r\n                      title: 'Data Processing',\r\n                      description: 'Allow us to process your personal data to provide our services.',\r\n                      current: consents.find(c => c.consent_type === 'DATA_PROCESSING')?.granted || true\r\n                    },\r\n                    {\r\n                      type: 'THIRD_PARTY_SHARING',\r\n                      title: 'Third-Party Sharing',\r\n                      description: 'Allow us to share your data with trusted third-party service providers.',\r\n                      current: consents.find(c => c.consent_type === 'THIRD_PARTY_SHARING')?.granted || false\r\n                    }\r\n                  ].map((consent) => (\r\n                    <div key={consent.type} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium\">{consent.title}</h3>\r\n                        <p className=\"text-sm text-gray-600 mt-1\">{consent.description}</p>\r\n                        <div className=\"flex items-center mt-2\">\r\n                          <Badge className={consent.current ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\r\n                            {consent.current ? 'Consented' : 'Not Consented'}\r\n                          </Badge>\r\n                          {consent.current && (\r\n                            <span className=\"text-xs text-gray-500 ml-2\">\r\n                              Since {consents.find(c => c.consent_type === consent.type)?.granted_at ? \r\n                                new Date(consents.find(c => c.consent_type === consent.type)!.granted_at).toLocaleDateString() : \r\n                                'Recently'\r\n                              }\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ml-4\">\r\n                        <Button\r\n                          variant={consent.current ? 'destructive' : 'default'}\r\n                          size=\"sm\"\r\n                          onClick={() => handleConsentUpdate(consent.type, !consent.current)}\r\n                        >\r\n                          {consent.current ? 'Withdraw' : 'Grant'}\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Requests Tab */}\r\n          <TabsContent value=\"requests\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Privacy Requests</CardTitle>\r\n                <CardDescription>\r\n                  Track the status of your privacy-related requests.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {privacyRequests.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <FileText className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      No privacy requests\r\n                    </h3>\r\n                    <p className=\"text-gray-600\">\r\n                      You haven't submitted any privacy requests yet.\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {privacyRequests.map((request) => (\r\n                      <div\r\n                        key={request.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          {getStatusIcon(request.status)}\r\n                          <div>\r\n                            <h3 className=\"font-medium capitalize\">\r\n                              {request.request_type.toLowerCase().replace('_', ' ')}\r\n                            </h3>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              Submitted {new Date(request.created_at).toLocaleDateString()}\r\n                            </p>\r\n                            {request.description && (\r\n                              <p className=\"text-sm text-gray-500 mt-1\">\r\n                                {request.description}\r\n                              </p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {getStatusBadge(request.status)}\r\n                          {request.status === 'COMPLETED' && (\r\n                            <Button variant=\"outline\" size=\"sm\">\r\n                              <Download className=\"h-4 w-4 mr-1\" />\r\n                              Download\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\provider-dashboard\\page.tsx",["364","365","366"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Card, CardContent, CardHeader, CardTitle, Button, Badge, Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { \r\n  Plus, \r\n  Wrench, \r\n  Calendar, \r\n  TrendingUp, \r\n  Users, \r\n  Star,\r\n  Eye,\r\n  Settings,\r\n  BarChart3,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle\r\n} from 'lucide-react';\r\nimport { db } from '@ciuna/sb';\r\nimport { formatPrice, formatRelativeTime } from '@/lib/utils';\r\nimport type { ServiceProviderWithProfile, ServiceWithRelations, ServiceBookingWithRelations } from '@ciuna/types';\r\n\r\nexport default function ProviderDashboardPage() {\r\n  const { user, profile } = useAuth();\r\n  const router = useRouter();\r\n  const [provider, setProvider] = useState<ServiceProviderWithProfile | null>(null);\r\n  const [services, setServices] = useState<ServiceWithRelations[]>([]);\r\n  const [bookings, setBookings] = useState<ServiceBookingWithRelations[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [stats, setStats] = useState({\r\n    totalServices: 0,\r\n    activeServices: 0,\r\n    totalBookings: 0,\r\n    pendingBookings: 0,\r\n    completedBookings: 0,\r\n    totalRevenue: 0,\r\n    monthlyRevenue: 0,\r\n    averageRating: 0,\r\n    totalReviews: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!user || !profile?.verified_expat) {\r\n      router.push('/');\r\n      return;\r\n    }\r\n    loadProviderData();\r\n  }, [user, profile, router]);\r\n\r\n  const loadProviderData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Get service provider profile\r\n      // TODO: Implement getByProfileId method or use getAll with filtering\r\n      setProvider(null);\r\n\r\n      // Get services\r\n      // TODO: Fix when provider data is available\r\n      setServices([]);\r\n\r\n      // Get bookings\r\n      // TODO: Fix when provider data is available\r\n      setBookings([]);\r\n\r\n      // Calculate stats\r\n      const activeServices = 0;\r\n      const pendingBookings = 0;\r\n      const completedBookings = 0;\r\n      \r\n      setStats({\r\n        totalServices: 0,\r\n        activeServices,\r\n        totalBookings: 0,\r\n        pendingBookings,\r\n        completedBookings,\r\n        totalRevenue: 0,\r\n        monthlyRevenue: 0,\r\n        averageRating: 0,\r\n        totalReviews: 0,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading provider data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"animate-pulse space-y-6\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n            {Array.from({ length: 4 }).map((_, i) => (\r\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!provider) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8 text-center\">\r\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Service Provider Account Required</h1>\r\n        <p className=\"text-gray-600 mb-6\">You need to create a service provider account to access this dashboard.</p>\r\n        <Button asChild>\r\n          <Link href=\"/provider-dashboard/setup\">Create Provider Account</Link>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-8\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">\r\n            Welcome back, {provider.name}\r\n          </h1>\r\n          <p className=\"text-lg text-gray-600\">\r\n            Manage your services and bookings\r\n          </p>\r\n        </div>\r\n        <div className=\"flex space-x-4\">\r\n          <Button asChild>\r\n            <Link href=\"/provider-dashboard/services/new\">\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Add Service\r\n            </Link>\r\n          </Button>\r\n          <Button variant=\"outline\" asChild>\r\n            <Link href=\"/provider-dashboard/settings\">\r\n              <Settings className=\"h-4 w-4 mr-2\" />\r\n              Settings\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n        <Card className=\"ciuna-gradient text-white\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-white/20 rounded-lg\">\r\n                <Wrench className=\"h-6 w-6\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm opacity-90\">Total Services</p>\r\n                <p className=\"text-2xl font-bold\">{stats.totalServices}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-white/20 rounded-lg\">\r\n                <Calendar className=\"h-6 w-6\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm opacity-90\">Total Bookings</p>\r\n                <p className=\"text-2xl font-bold\">{stats.totalBookings}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-white/20 rounded-lg\">\r\n                <TrendingUp className=\"h-6 w-6\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm opacity-90\">Monthly Revenue</p>\r\n                <p className=\"text-2xl font-bold\">{formatPrice(stats.monthlyRevenue)}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-white/20 rounded-lg\">\r\n                <Star className=\"h-6 w-6\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm opacity-90\">Rating</p>\r\n                <p className=\"text-2xl font-bold\">{stats.averageRating.toFixed(1)}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"services\">Services</TabsTrigger>\r\n          <TabsTrigger value=\"bookings\">Bookings</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab */}\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Recent Services */}\r\n            <Card>\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle>Recent Services</CardTitle>\r\n                  <Button variant=\"outline\" size=\"sm\" asChild>\r\n                    <Link href=\"/provider-dashboard/services\">\r\n                      View All\r\n                    </Link>\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {services.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <Wrench className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No services yet</h3>\r\n                    <p className=\"text-gray-600 mb-4\">Start by adding your first service</p>\r\n                    <Button asChild>\r\n                      <Link href=\"/provider-dashboard/services/new\">\r\n                        <Plus className=\"h-4 w-4 mr-2\" />\r\n                        Add Service\r\n                      </Link>\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {services.slice(0, 5).map((service) => (\r\n                      <div key={service.id} className=\"flex items-center space-x-4\">\r\n                        <div className=\"flex-shrink-0\">\r\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center\">\r\n                            <Wrench className=\"h-6 w-6 text-blue-600\" />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                            {service.title}\r\n                          </p>\r\n                          <p className=\"text-sm text-gray-500\">\r\n                            {formatPrice(service.price_rub)} • {service.duration_minutes} min\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <Badge variant={service.status === 'ACTIVE' ? 'default' : 'secondary'}>\r\n                            {service.status}\r\n                          </Badge>\r\n                          <Button variant=\"ghost\" size=\"sm\" asChild>\r\n                            <Link href={`/provider-dashboard/services/${service.id}`}>\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            </Link>\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Recent Bookings */}\r\n            <Card>\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle>Recent Bookings</CardTitle>\r\n                  <Button variant=\"outline\" size=\"sm\" asChild>\r\n                    <Link href=\"/provider-dashboard/bookings\">\r\n                      View All\r\n                    </Link>\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {bookings.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No bookings yet</h3>\r\n                    <p className=\"text-gray-600\">Bookings will appear here when clients book your services</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {bookings.slice(0, 5).map((booking) => (\r\n                      <div key={booking.id} className=\"flex items-center space-x-4\">\r\n                        <div className=\"flex-shrink-0\">\r\n                          <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n                            <Calendar className=\"h-6 w-6 text-blue-600\" />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {booking.service.title}\r\n                          </p>\r\n                          <p className=\"text-sm text-gray-500\">\r\n                            {new Date(booking.scheduled_at).toLocaleDateString()} • {booking.client.email}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <Badge variant={\r\n                            booking.status === 'PENDING' ? 'secondary' :\r\n                            booking.status === 'CONFIRMED' ? 'default' :\r\n                            booking.status === 'COMPLETED' ? 'success' : 'destructive'\r\n                          }>\r\n                            {booking.status}\r\n                          </Badge>\r\n                          <Button variant=\"ghost\" size=\"sm\" asChild>\r\n                            <Link href={`/provider-dashboard/bookings/${booking.id}`}>\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            </Link>\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Quick Actions */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Quick Actions</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <Button asChild className=\"h-20 flex-col\">\r\n                  <Link href=\"/provider-dashboard/services/new\">\r\n                    <Plus className=\"h-6 w-6 mb-2\" />\r\n                    Add New Service\r\n                  </Link>\r\n                </Button>\r\n                <Button variant=\"outline\" asChild className=\"h-20 flex-col\">\r\n                  <Link href=\"/provider-dashboard/analytics\">\r\n                    <BarChart3 className=\"h-6 w-6 mb-2\" />\r\n                    View Analytics\r\n                  </Link>\r\n                </Button>\r\n                <Button variant=\"outline\" asChild className=\"h-20 flex-col\">\r\n                  <Link href=\"/provider-dashboard/settings\">\r\n                    <Settings className=\"h-6 w-6 mb-2\" />\r\n                    Provider Settings\r\n                  </Link>\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Services Tab */}\r\n        <TabsContent value=\"services\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle>My Services</CardTitle>\r\n                <Button asChild>\r\n                  <Link href=\"/provider-dashboard/services/new\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Service\r\n                  </Link>\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {services.length === 0 ? (\r\n                <div className=\"text-center py-12\">\r\n                  <Wrench className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No services yet</h3>\r\n                  <p className=\"text-gray-600 mb-6\">Start by adding your first service to begin receiving bookings</p>\r\n                  <Button asChild>\r\n                    <Link href=\"/provider-dashboard/services/new\">\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Add Your First Service\r\n                    </Link>\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                  {services.map((service) => (\r\n                    <Card key={service.id} className=\"hover:shadow-lg transition-shadow\">\r\n                      <CardContent className=\"p-6\">\r\n                        <div className=\"flex items-start justify-between mb-4\">\r\n                          <h3 className=\"font-semibold text-lg text-gray-900 line-clamp-2\">\r\n                            {service.title}\r\n                          </h3>\r\n                          <Badge variant=\"outline\">{service.category}</Badge>\r\n                        </div>\r\n                        \r\n                        <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\r\n                          {service.description}\r\n                        </p>\r\n                        \r\n                        <div className=\"flex items-center justify-between mb-4\">\r\n                          <span className=\"text-2xl font-bold text-blue-600\">\r\n                            {formatPrice(service.price_rub)}\r\n                          </span>\r\n                          <div className=\"flex items-center text-sm text-gray-500\">\r\n                            <Clock className=\"h-4 w-4 mr-1\" />\r\n                            {service.duration_minutes} min\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex items-center justify-between text-sm\">\r\n                          <div className=\"flex items-center\">\r\n                            <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\r\n                            <span className=\"font-medium\">{service.rating.toFixed(1)}</span>\r\n                            <span className=\"text-gray-500 ml-1\">({service.review_count})</span>\r\n                          </div>\r\n                          <Badge variant={service.status === 'ACTIVE' ? 'default' : 'secondary'}>\r\n                            {service.status}\r\n                          </Badge>\r\n                        </div>\r\n                        \r\n                        <div className=\"mt-4 flex space-x-2\">\r\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" asChild>\r\n                            <Link href={`/provider-dashboard/services/${service.id}`}>\r\n                              <Eye className=\"h-4 w-4 mr-1\" />\r\n                              View\r\n                            </Link>\r\n                          </Button>\r\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" asChild>\r\n                            <Link href={`/provider-dashboard/services/${service.id}/edit`}>\r\n                              Edit\r\n                            </Link>\r\n                          </Button>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Bookings Tab */}\r\n        <TabsContent value=\"bookings\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Service Bookings</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {bookings.length === 0 ? (\r\n                <div className=\"text-center py-12\">\r\n                  <Calendar className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No bookings yet</h3>\r\n                  <p className=\"text-gray-600\">Bookings will appear here when clients book your services</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {bookings.map((booking) => (\r\n                    <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n                          <Calendar className=\"h-6 w-6 text-blue-600\" />\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"font-semibold\">{booking.service.title}</p>\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {new Date(booking.scheduled_at).toLocaleString()} • {booking.client.email}\r\n                          </p>\r\n                          <p className=\"text-xs text-gray-500\">\r\n                            {formatPrice(booking.service.price_rub)} • {booking.service.duration_minutes} min\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Badge variant={\r\n                          booking.status === 'PENDING' ? 'secondary' :\r\n                          booking.status === 'CONFIRMED' ? 'default' :\r\n                          booking.status === 'COMPLETED' ? 'success' : 'destructive'\r\n                        }>\r\n                          {booking.status}\r\n                        </Badge>\r\n                        <Button variant=\"outline\" size=\"sm\" asChild>\r\n                          <Link href={`/provider-dashboard/bookings/${booking.id}`}>\r\n                            <Eye className=\"h-4 w-4\" />\r\n                          </Link>\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Analytics Tab */}\r\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Overview</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600\">Total Revenue</span>\r\n                    <span className=\"font-semibold\">{formatPrice(stats.totalRevenue)}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600\">Monthly Revenue</span>\r\n                    <span className=\"font-semibold\">{formatPrice(stats.monthlyRevenue)}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600\">Completed Bookings</span>\r\n                    <span className=\"font-semibold\">{stats.completedBookings}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600\">Average Rating</span>\r\n                    <span className=\"font-semibold flex items-center\">\r\n                      <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\r\n                      {stats.averageRating.toFixed(1)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Recent Activity</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\r\n                    <div>\r\n                      <p className=\"text-sm font-medium\">Service completed</p>\r\n                      <p className=\"text-xs text-gray-500\">2 hours ago</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\r\n                    <div>\r\n                      <p className=\"text-sm font-medium\">New booking received</p>\r\n                      <p className=\"text-xs text-gray-500\">5 hours ago</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <Star className=\"h-5 w-5 text-yellow-500\" />\r\n                    <div>\r\n                      <p className=\"text-sm font-medium\">New review received</p>\r\n                      <p className=\"text-xs text-gray-500\">1 day ago</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\providers.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\search\\page.tsx",["367","368"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SearchService, SearchResult, SearchSuggestion } from '@ciuna/sb';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport AdvancedSearch from '../../components/advanced-search';\r\nimport SearchResults from '../../components/search-results';\r\nimport { \r\n  Search, \r\n  TrendingUp, \r\n  Clock, \r\n  Star,\r\n  BarChart3,\r\n  Filter\r\n} from 'lucide-react';\r\n\r\nexport default function SearchPage() {\r\n  const { user } = useAuth();\r\n  const searchParams = useSearchParams();\r\n  const [query, setQuery] = useState(searchParams.get('q') || '');\r\n  const [results, setResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [trending, setTrending] = useState<SearchSuggestion[]>([]);\r\n  const [popular, setPopular] = useState<SearchSuggestion[]>([]);\r\n  const [searchHistory, setSearchHistory] = useState<SearchSuggestion[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      handleSearch(query, 'ALL');\r\n    }\r\n  }, [query]);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const [trendingData, popularData] = await Promise.all([\r\n        SearchService.getTrendingSearches(10),\r\n        SearchService.getPopularSearches(10)\r\n      ]);\r\n\r\n      setTrending(trendingData);\r\n      setPopular(popularData);\r\n\r\n      if (user) {\r\n        const history = await SearchService.getSearchHistory(user.id, 10);\r\n        setSearchHistory(history.map(h => ({\r\n          suggestion: h.query_text,\r\n          type: 'AUTOCOMPLETE' as const,\r\n          score: 0\r\n        })));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading initial data:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (searchQuery: string, contentType: 'ALL' | 'LISTINGS' | 'VENDORS' | 'SERVICES' | 'PRODUCTS' = 'ALL') => {\r\n    if (!searchQuery.trim()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const searchResults = await SearchService.search(\r\n        searchQuery,\r\n        contentType,\r\n        20,\r\n        0,\r\n        {},\r\n        user?.id\r\n      );\r\n\r\n      setResults(searchResults);\r\n    } catch (error) {\r\n      console.error('Error searching:', error);\r\n      setResults([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResultClick = (result: SearchResult) => {\r\n    // Navigate to the result page\r\n    const baseUrl = result.content_type === 'LISTING' ? '/listings' :\r\n                   result.content_type === 'VENDOR' ? '/vendors' :\r\n                   result.content_type === 'SERVICE' ? '/services' :\r\n                   result.content_type === 'PRODUCT' ? '/products' : '/';\r\n    \r\n    window.location.href = `${baseUrl}/${result.id}`;\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setQuery(suggestion);\r\n    handleSearch(suggestion, 'ALL');\r\n  };\r\n\r\n  const renderEmptyState = () => (\r\n    <div className=\"text-center py-12\">\r\n      <Search className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\r\n      <h3 className=\"text-xl font-medium text-gray-900 mb-2\">\r\n        Search for anything\r\n      </h3>\r\n      <p className=\"text-gray-600 mb-6\">\r\n        Find listings, vendors, services, and products in your area.\r\n      </p>\r\n      \r\n      {/* Trending Searches */}\r\n      {trending.length > 0 && (\r\n        <div className=\"max-w-md mx-auto\">\r\n          <h4 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\r\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\r\n            Trending Searches\r\n          </h4>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {trending.slice(0, 6).map((trend, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleSuggestionClick(trend.suggestion)}\r\n                className=\"px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm transition-colors\"\r\n              >\r\n                {trend.suggestion}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderSearchResults = () => (\r\n    <div className=\"space-y-6\">\r\n      <AdvancedSearch\r\n        onResults={setResults}\r\n        onLoading={setLoading}\r\n        placeholder=\"Search for anything...\"\r\n        showFilters={true}\r\n        showSuggestions={true}\r\n        showTrending={true}\r\n        contentType={activeTab === 'all' ? 'ALL' : activeTab.toUpperCase() as any}\r\n      />\r\n      \r\n      {results.length > 0 && (\r\n        <SearchResults\r\n          results={results}\r\n          loading={loading}\r\n          onResultClick={handleResultClick}\r\n          showFilters={true}\r\n          showSorting={true}\r\n          showViewToggle={true}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderDiscoverSection = () => (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Discover</h2>\r\n        <p className=\"text-gray-600\">Explore popular searches and trending items.</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {/* Trending Searches */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <TrendingUp className=\"h-5 w-5 mr-2\" />\r\n              Trending Searches\r\n            </CardTitle>\r\n            <CardDescription>\r\n              What's popular right now\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              {trending.slice(0, 5).map((trend, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => handleSuggestionClick(trend.suggestion)}\r\n                  className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm flex items-center justify-between\"\r\n                >\r\n                  <span>{trend.suggestion}</span>\r\n                  <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Popular Searches */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <BarChart3 className=\"h-5 w-5 mr-2\" />\r\n              Popular Searches\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Most searched items\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              {popular.slice(0, 5).map((pop, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => handleSuggestionClick(pop.suggestion)}\r\n                  className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm flex items-center justify-between\"\r\n                >\r\n                  <span>{pop.suggestion}</span>\r\n                  <span className=\"text-xs text-gray-500\">#{index + 1}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Search History */}\r\n        {user && searchHistory.length > 0 && (\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <Clock className=\"h-5 w-5 mr-2\" />\r\n                Recent Searches\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Your search history\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2\">\r\n                {searchHistory.slice(0, 5).map((history, index) => (\r\n                  <button\r\n                    key={index}\r\n                    onClick={() => handleSuggestionClick(history.suggestion)}\r\n                    className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm\"\r\n                  >\r\n                    {history.suggestion}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Search</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Find exactly what you're looking for\r\n          </p>\r\n        </div>\r\n\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-5\">\r\n            <TabsTrigger value=\"all\">All</TabsTrigger>\r\n            <TabsTrigger value=\"listings\">Listings</TabsTrigger>\r\n            <TabsTrigger value=\"vendors\">Vendors</TabsTrigger>\r\n            <TabsTrigger value=\"services\">Services</TabsTrigger>\r\n            <TabsTrigger value=\"products\">Products</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"all\" className=\"space-y-6\">\r\n            {query ? renderSearchResults() : renderEmptyState()}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"listings\" className=\"space-y-6\">\r\n            {query ? renderSearchResults() : renderEmptyState()}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"vendors\" className=\"space-y-6\">\r\n            {query ? renderSearchResults() : renderEmptyState()}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"services\" className=\"space-y-6\">\r\n            {query ? renderSearchResults() : renderEmptyState()}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"products\" className=\"space-y-6\">\r\n            {query ? renderSearchResults() : renderEmptyState()}\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Discover Section - Only show when no search query */}\r\n        {!query && (\r\n          <div className=\"mt-12\">\r\n            {renderDiscoverSection()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\security\\page.tsx",["369","370","371"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SecurityService, TwoFactorAuth, APIKey, SecurityEvent } from '@ciuna/sb';\r\nimport { useAuth } from '../../lib/auth-context';\r\nimport TwoFactorSetup from '../../components/two-factor-setup';\r\nimport KYCVerification from '../../components/kyc-verification';\r\nimport { \r\n  Shield, \r\n  Key, \r\n  Eye, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  Clock,\r\n  Trash2,\r\n  Plus,\r\n  Download\r\n} from 'lucide-react';\r\n\r\nexport default function SecurityPage() {\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [twoFactorSettings, setTwoFactorSettings] = useState<TwoFactorAuth[]>([]);\r\n  const [apiKeys, setApiKeys] = useState<APIKey[]>([]);\r\n  const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([]);\r\n  const [show2FASetup, setShow2FASetup] = useState(false);\r\n  const [showKYC, setShowKYC] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadSecurityData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadSecurityData = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [twoFactor, keys, events] = await Promise.all([\r\n        SecurityService.get2FASettings(user.id),\r\n        SecurityService.getAPIKeys(user.id),\r\n        loadSecurityEvents(user.id)\r\n      ]);\r\n\r\n      setTwoFactorSettings(twoFactor);\r\n      setApiKeys(keys);\r\n      setSecurityEvents(events);\r\n    } catch (error) {\r\n      console.error('Error loading security data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadSecurityEvents = async (userId: string): Promise<SecurityEvent[]> => {\r\n    // Mock data - in a real app, you'd fetch from SecurityService\r\n    return [\r\n      {\r\n        id: '1',\r\n        user_id: userId,\r\n        event_type: 'LOGIN',\r\n        severity: 'LOW',\r\n        description: 'Successful login from Chrome on Windows',\r\n        ip_address: '192.168.1.1',\r\n        user_agent: 'Mozilla/5.0...',\r\n        location_data: { country: 'US', city: 'New York' },\r\n        metadata: {},\r\n        created_at: new Date().toISOString()\r\n      },\r\n      {\r\n        id: '2',\r\n        user_id: userId,\r\n        event_type: '2FA_ENABLED',\r\n        severity: 'MEDIUM',\r\n        description: 'Two-factor authentication enabled',\r\n        ip_address: '192.168.1.1',\r\n        user_agent: 'Mozilla/5.0...',\r\n        location_data: { country: 'US', city: 'New York' },\r\n        metadata: { method: 'TOTP' },\r\n        created_at: new Date(Date.now() - 86400000).toISOString()\r\n      }\r\n    ];\r\n  };\r\n\r\n  const handleDisable2FA = async (method: 'SMS' | 'TOTP' | 'EMAIL') => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const success = await SecurityService.disable2FA(user.id, method);\r\n      if (success) {\r\n        await loadSecurityData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disabling 2FA:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateAPIKey = async () => {\r\n    if (!user) return;\r\n\r\n    const name = prompt('Enter a name for your API key:');\r\n    if (!name) return;\r\n\r\n    try {\r\n      const result = await SecurityService.generateAPIKey(user.id, name);\r\n      if (result.success && result.apiKey) {\r\n        alert(`Your API key: ${result.apiKey}\\n\\nPlease save this key securely - it won't be shown again.`);\r\n        await loadSecurityData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating API key:', error);\r\n    }\r\n  };\r\n\r\n  const handleRevokeAPIKey = async (keyId: string) => {\r\n    if (!user) return;\r\n\r\n    if (confirm('Are you sure you want to revoke this API key?')) {\r\n      try {\r\n        const success = await SecurityService.revokeAPIKey(user.id, keyId);\r\n        if (success) {\r\n          await loadSecurityData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error revoking API key:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'LOW':\r\n        return 'text-green-600 bg-green-100';\r\n      case 'MEDIUM':\r\n        return 'text-yellow-600 bg-yellow-100';\r\n      case 'HIGH':\r\n        return 'text-orange-600 bg-orange-100';\r\n      case 'CRITICAL':\r\n        return 'text-red-600 bg-red-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader>\r\n            <CardTitle>Access Denied</CardTitle>\r\n            <CardDescription>Please sign in to access security settings.</CardDescription>\r\n          </CardHeader>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (show2FASetup) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"mb-8\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setShow2FASetup(false)}\r\n              className=\"mb-4\"\r\n            >\r\n              ← Back to Security\r\n            </Button>\r\n            <h1 className=\"text-3xl font-bold text-gray-900\">Two-Factor Authentication</h1>\r\n            <p className=\"text-gray-600 mt-2\">Set up 2FA to secure your account.</p>\r\n          </div>\r\n          <TwoFactorSetup onComplete={() => {\r\n            setShow2FASetup(false);\r\n            loadSecurityData();\r\n          }} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (showKYC) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"mb-8\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setShowKYC(false)}\r\n              className=\"mb-4\"\r\n            >\r\n              ← Back to Security\r\n            </Button>\r\n            <h1 className=\"text-3xl font-bold text-gray-900\">Identity Verification</h1>\r\n            <p className=\"text-gray-600 mt-2\">Verify your identity to access all features.</p>\r\n          </div>\r\n          <KYCVerification onComplete={() => {\r\n            setShowKYC(false);\r\n            loadSecurityData();\r\n          }} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Security Settings</h1>\r\n          <p className=\"text-gray-600 mt-2\">Manage your account security and privacy settings.</p>\r\n        </div>\r\n\r\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n            <TabsTrigger value=\"2fa\">2FA</TabsTrigger>\r\n            <TabsTrigger value=\"api\">API Keys</TabsTrigger>\r\n            <TabsTrigger value=\"activity\">Activity</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Overview Tab */}\r\n          <TabsContent value=\"overview\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {/* Security Score */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center\">\r\n                    <Shield className=\"h-5 w-5 mr-2\" />\r\n                    Security Score\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">85/100</div>\r\n                  <p className=\"text-sm text-gray-600\">Good security practices</p>\r\n                  <div className=\"mt-4 space-y-2\">\r\n                    <div className=\"flex items-center text-sm\">\r\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\r\n                      Strong password\r\n                    </div>\r\n                    <div className=\"flex items-center text-sm\">\r\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\r\n                      Email verified\r\n                    </div>\r\n                    {twoFactorSettings.some(settings => settings.is_enabled) && (\r\n                      <div className=\"flex items-center text-sm\">\r\n                        <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\r\n                        2FA enabled\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Quick Actions */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Quick Actions</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-3\">\r\n                  <Button\r\n                    onClick={() => setShow2FASetup(true)}\r\n                    className=\"w-full justify-start\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    <Key className=\"h-4 w-4 mr-2\" />\r\n                    {twoFactorSettings.some(s => s.is_enabled) ? 'Manage 2FA' : 'Enable 2FA'}\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => setShowKYC(true)}\r\n                    className=\"w-full justify-start\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    <Eye className=\"h-4 w-4 mr-2\" />\r\n                    Identity Verification\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleCreateAPIKey}\r\n                    className=\"w-full justify-start\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Create API Key\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Recent Activity */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Recent Activity</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {securityEvents.slice(0, 3).map((event) => (\r\n                      <div key={event.id} className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"text-sm font-medium\">{event.description}</p>\r\n                          <p className=\"text-xs text-gray-500\">\r\n                            {new Date(event.created_at).toLocaleDateString()}\r\n                          </p>\r\n                        </div>\r\n                        <Badge className={getSeverityColor(event.severity)}>\r\n                          {event.severity}\r\n                        </Badge>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* 2FA Tab */}\r\n          <TabsContent value=\"2fa\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Two-Factor Authentication</CardTitle>\r\n                <CardDescription>\r\n                  Add an extra layer of security to your account.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {twoFactorSettings.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <Shield className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      No 2FA methods enabled\r\n                    </h3>\r\n                    <p className=\"text-gray-600 mb-4\">\r\n                      Enable two-factor authentication to secure your account.\r\n                    </p>\r\n                    <Button onClick={() => setShow2FASetup(true)}>\r\n                      Enable 2FA\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {twoFactorSettings.map((settings) => (\r\n                      <div\r\n                        key={settings.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className=\"p-2 bg-blue-100 rounded-full\">\r\n                            <Key className=\"h-5 w-5 text-blue-600\" />\r\n                          </div>\r\n                          <div>\r\n                            <h3 className=\"font-medium\">\r\n                              {settings.method === 'TOTP' ? 'Authenticator App' : settings.method}\r\n                            </h3>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              {settings.is_enabled ? 'Enabled' : 'Disabled'}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <Badge className={settings.is_enabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>\r\n                            {settings.is_enabled ? 'Active' : 'Inactive'}\r\n                          </Badge>\r\n                          {settings.is_enabled && (\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDisable2FA(settings.method)}\r\n                            >\r\n                              Disable\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    <Button\r\n                      onClick={() => setShow2FASetup(true)}\r\n                      className=\"w-full\"\r\n                      variant=\"outline\"\r\n                    >\r\n                      Add Another Method\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* API Keys Tab */}\r\n          <TabsContent value=\"api\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>API Keys</CardTitle>\r\n                <CardDescription>\r\n                  Manage your API keys for programmatic access.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {apiKeys.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <Key className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      No API keys created\r\n                    </h3>\r\n                    <p className=\"text-gray-600 mb-4\">\r\n                      Create an API key to access our services programmatically.\r\n                    </p>\r\n                    <Button onClick={handleCreateAPIKey}>\r\n                      Create API Key\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {apiKeys.map((key) => (\r\n                      <div\r\n                        key={key.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className=\"p-2 bg-purple-100 rounded-full\">\r\n                            <Key className=\"h-5 w-5 text-purple-600\" />\r\n                          </div>\r\n                          <div>\r\n                            <h3 className=\"font-medium\">{key.name}</h3>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              Created {new Date(key.created_at).toLocaleDateString()}\r\n                            </p>\r\n                            {key.last_used && (\r\n                              <p className=\"text-xs text-gray-500\">\r\n                                Last used {new Date(key.last_used).toLocaleDateString()}\r\n                              </p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <Badge className={key.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\r\n                            {key.is_active ? 'Active' : 'Revoked'}\r\n                          </Badge>\r\n                          {key.is_active && (\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleRevokeAPIKey(key.id)}\r\n                            >\r\n                              <Trash2 className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    <Button\r\n                      onClick={handleCreateAPIKey}\r\n                      className=\"w-full\"\r\n                      variant=\"outline\"\r\n                    >\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Create New API Key\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Activity Tab */}\r\n          <TabsContent value=\"activity\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Security Activity</CardTitle>\r\n                <CardDescription>\r\n                  Monitor your account's security events and activities.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {securityEvents.map((event) => (\r\n                    <div\r\n                      key={event.id}\r\n                      className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                    >\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className={`p-2 rounded-full ${\r\n                          event.severity === 'CRITICAL' ? 'bg-red-100' :\r\n                          event.severity === 'HIGH' ? 'bg-orange-100' :\r\n                          event.severity === 'MEDIUM' ? 'bg-yellow-100' :\r\n                          'bg-green-100'\r\n                        }`}>\r\n                          <AlertTriangle className={`h-4 w-4 ${\r\n                            event.severity === 'CRITICAL' ? 'text-red-600' :\r\n                            event.severity === 'HIGH' ? 'text-orange-600' :\r\n                            event.severity === 'MEDIUM' ? 'text-yellow-600' :\r\n                            'text-green-600'\r\n                          }`} />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{event.description}</h3>\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {event.ip_address} • {new Date(event.created_at).toLocaleString()}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <Badge className={getSeverityColor(event.severity)}>\r\n                        {event.severity}\r\n                      </Badge>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\sell\\new\\page.tsx",["372","373","374","375","376","377"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button, Input, Card, CardContent, CardHeader, CardTitle, Badge } from '@ciuna/ui';\nimport { \n  Upload, \n  X, \n  MapPin, \n  DollarSign, \n  Tag, \n  Image as ImageIcon,\n  Plus,\n  Minus\n} from 'lucide-react';\nimport { useAuth } from '@/lib/auth-context';\nimport { db } from '@ciuna/sb';\nimport type { Category, Condition } from '@ciuna/types';\n\nexport default function CreateListingPage() {\n  const { user, profile } = useAuth();\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    category_id: '',\n    price_rub: '',\n    condition: 'GOOD' as Condition,\n    city: '',\n    district: '',\n    photo_urls: [] as string[],\n  });\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (!user) {\n      router.push('/auth/signin');\n      return;\n    }\n    loadCategories();\n  }, [user, router]);\n\n  const loadCategories = async () => {\n    try {\n      const data = await db.categories.getAll();\n      setCategories(data);\n    } catch (error) {\n      console.error('Error loading categories:', error);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files) {\n      // In a real app, you would upload to Supabase Storage here\n      const newImages = Array.from(files).map(file => URL.createObjectURL(file));\n      setFormData(prev => ({\n        ...prev,\n        photo_urls: [...prev.photo_urls, ...newImages]\n      }));\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      photo_urls: prev.photo_urls.filter((_, i) => i !== index)\n    }));\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Title is required';\n    }\n    if (!formData.description.trim()) {\n      newErrors.description = 'Description is required';\n    }\n    if (!formData.category_id) {\n      newErrors.category_id = 'Category is required';\n    }\n    if (!formData.price_rub || isNaN(Number(formData.price_rub)) || Number(formData.price_rub) <= 0) {\n      newErrors.price_rub = 'Valid price is required';\n    }\n    if (!formData.city.trim()) {\n      newErrors.city = 'City is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // In a real app, you would upload images to Supabase Storage first\n      const listingData = {\n        ...formData,\n        price_rub: parseInt(formData.price_rub),\n        category_id: formData.category_id,\n        seller_id: user?.id || '',\n        status: 'ACTIVE' as const,\n        currency: 'RUB' as const,\n        is_negotiable: true,\n        tags: [],\n      };\n\n      const listing = await db.listings.create(listingData);\n      router.push(`/listings/${listing.id}`);\n    } catch (error) {\n      console.error('Error creating listing:', error);\n      setErrors({ submit: 'Failed to create listing. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const conditions: { value: Condition; label: string }[] = [\n    { value: 'NEW', label: 'New' },\n    { value: 'LIKE_NEW', label: 'Like New' },\n    { value: 'GOOD', label: 'Good' },\n    { value: 'FAIR', label: 'Fair' },\n  ];\n\n  if (!user) {\n    return null; // Will redirect\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          Create New Listing\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          Sell your items to fellow expats in Russia\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Listing Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {errors.submit && (\n              <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm\">\n                {errors.submit}\n              </div>\n            )}\n\n            {/* Title */}\n            <div>\n              <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Title *\n              </label>\n              <Input\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleChange}\n                placeholder=\"What are you selling?\"\n                className={errors.title ? 'border-red-300' : ''}\n              />\n              {errors.title && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.title}</p>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description *\n              </label>\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleChange}\n                rows={4}\n                placeholder=\"Describe your item in detail...\"\n                className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.description ? 'border-red-300' : ''\n                }`}\n              />\n              {errors.description && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>\n              )}\n            </div>\n\n            {/* Category and Condition */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"category_id\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Category *\n                </label>\n                <select\n                  id=\"category_id\"\n                  name=\"category_id\"\n                  value={formData.category_id}\n                  onChange={handleChange}\n                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                    errors.category_id ? 'border-red-300' : ''\n                  }`}\n                >\n                  <option value=\"\">Select a category</option>\n                  {categories.map(category => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n                {errors.category_id && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.category_id}</p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"condition\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Condition\n                </label>\n                <select\n                  id=\"condition\"\n                  name=\"condition\"\n                  value={formData.condition}\n                  onChange={handleChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  {conditions.map(condition => (\n                    <option key={condition.value} value={condition.value}>\n                      {condition.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Price */}\n            <div>\n              <label htmlFor=\"price_rub\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Price (RUB) *\n              </label>\n              <div className=\"relative\">\n                <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                <Input\n                  id=\"price_rub\"\n                  name=\"price_rub\"\n                  type=\"number\"\n                  value={formData.price_rub}\n                  onChange={handleChange}\n                  placeholder=\"0\"\n                  className={`pl-10 ${errors.price_rub ? 'border-red-300' : ''}`}\n                />\n              </div>\n              {errors.price_rub && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.price_rub}</p>\n              )}\n            </div>\n\n            {/* Location */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  City *\n                </label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                  <Input\n                    id=\"city\"\n                    name=\"city\"\n                    value={formData.city}\n                    onChange={handleChange}\n                    placeholder=\"Moscow, St. Petersburg, etc.\"\n                    className={`pl-10 ${errors.city ? 'border-red-300' : ''}`}\n                  />\n                </div>\n                {errors.city && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.city}</p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"district\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  District (Optional)\n                </label>\n                <Input\n                  id=\"district\"\n                  name=\"district\"\n                  value={formData.district}\n                  onChange={handleChange}\n                  placeholder=\"Arbat, Nevsky Prospekt, etc.\"\n                />\n              </div>\n            </div>\n\n            {/* Photos */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Photos\n              </label>\n              <div className=\"space-y-4\">\n                {/* Upload Button */}\n                <div className=\"flex items-center justify-center w-full\">\n                  <label\n                    htmlFor=\"photos\"\n                    className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\"\n                  >\n                    <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                      <ImageIcon className=\"w-8 h-8 mb-4 text-gray-500\" />\n                      <p className=\"mb-2 text-sm text-gray-500\">\n                        <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                      </p>\n                      <p className=\"text-xs text-gray-500\">PNG, JPG up to 10MB each</p>\n                    </div>\n                    <input\n                      id=\"photos\"\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      onChange={handleImageUpload}\n                      className=\"hidden\"\n                    />\n                  </label>\n                </div>\n\n                {/* Image Preview */}\n                {formData.photo_urls.length > 0 && (\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    {formData.photo_urls.map((url, index) => (\n                      <div key={index} className=\"relative\">\n                        <img\n                          src={url}\n                          alt={`Upload ${index + 1}`}\n                          className=\"w-full h-24 object-cover rounded-lg\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => removeImage(index)}\n                          className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => router.back()}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? 'Creating...' : 'Create Listing'}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\services\\page.tsx",["378","379"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Card, CardContent, Badge, Button, Input } from '@ciuna/ui';\r\nimport { Search, MapPin, Star, Clock, Users, Filter, SlidersHorizontal } from 'lucide-react';\r\nimport { db } from '@ciuna/sb';\r\nimport { formatPrice, formatRelativeTime } from '@/lib/utils';\r\nimport type { Service, ServiceFilters } from '@ciuna/types';\r\n\r\nexport default function ServicesPage() {\r\n  const [services, setServices] = useState<Service[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filters, setFilters] = useState<ServiceFilters>({\r\n    category: undefined,\r\n    is_online: undefined,\r\n    is_in_person: undefined,\r\n    location: '',\r\n    min_price: undefined,\r\n    max_price: undefined,\r\n  });\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadServices();\r\n  }, [filters]);\r\n\r\n  const loadServices = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await db.services.getAll(filters, 1, 20);\r\n      setServices(data);\r\n    } catch (error) {\r\n      console.error('Error loading services:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setFilters(prev => ({ ...prev, search: searchQuery }));\r\n  };\r\n\r\n  const filteredServices = services.filter(service => {\r\n    if (searchQuery) {\r\n      return service.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n             service.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const serviceCategories = [\r\n    { value: 'LEGAL', label: 'Legal Services' },\r\n    { value: 'FINANCIAL', label: 'Financial Services' },\r\n    { value: 'PERSONAL', label: 'Personal Services' },\r\n    { value: 'EVENT', label: 'Event Services' },\r\n    { value: 'HEALTHCARE', label: 'Healthcare' },\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {Array.from({ length: 9 }).map((_, i) => (\r\n            <div key={i} className=\"animate-pulse\">\r\n              <div className=\"bg-gray-200 rounded-lg h-48 mb-4\"></div>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"bg-gray-200 rounded h-4\"></div>\r\n                <div className=\"bg-gray-200 rounded h-4 w-3/4\"></div>\r\n                <div className=\"bg-gray-200 rounded h-6 w-1/2\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\r\n          Professional Services\r\n        </h1>\r\n        <p className=\"text-lg text-gray-600\">\r\n          Find trusted professionals for all your needs in Russia\r\n        </p>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex flex-col lg:flex-row gap-4\">\r\n          {/* Search Bar */}\r\n          <form onSubmit={handleSearch} className=\"flex-1\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\r\n              <Input\r\n                placeholder=\"Search services...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          {/* Filter Button */}\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            className=\"lg:hidden\"\r\n          >\r\n            <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\r\n            Filters\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Filters Panel */}\r\n        {showFilters && (\r\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Category\r\n                </label>\r\n                <select\r\n                  value={filters.category || ''}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value as any }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"\">All Categories</option>\r\n                  {serviceCategories.map(cat => (\r\n                    <option key={cat.value} value={cat.value}>{cat.label}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Location\r\n                </label>\r\n                <select\r\n                  value={filters.location || ''}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, location: e.target.value }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"\">All Locations</option>\r\n                  <option value=\"Moscow\">Moscow</option>\r\n                  <option value=\"St. Petersburg\">St. Petersburg</option>\r\n                  <option value=\"Online\">Online</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Price Range\r\n                </label>\r\n                <div className=\"flex space-x-2\">\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Min\"\r\n                    value={filters.min_price || ''}\r\n                    onChange={(e) => setFilters(prev => ({ ...prev, min_price: e.target.value ? parseInt(e.target.value) : undefined }))}\r\n                    className=\"flex-1\"\r\n                  />\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Max\"\r\n                    value={filters.max_price || ''}\r\n                    onChange={(e) => setFilters(prev => ({ ...prev, max_price: e.target.value ? parseInt(e.target.value) : undefined }))}\r\n                    className=\"flex-1\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"block text-sm font-medium text-gray-700\">\r\n                  Service Type\r\n                </label>\r\n                <div className=\"space-y-1\">\r\n                  <label className=\"flex items-center\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={filters.is_online === true}\r\n                      onChange={(e) => setFilters(prev => ({ ...prev, is_online: e.target.checked ? true : undefined }))}\r\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                    />\r\n                    <span className=\"ml-2 text-sm text-gray-700\">Online</span>\r\n                  </label>\r\n                  <label className=\"flex items-center\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={filters.is_in_person === true}\r\n                      onChange={(e) => setFilters(prev => ({ ...prev, is_in_person: e.target.checked ? true : undefined }))}\r\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                    />\r\n                    <span className=\"ml-2 text-sm text-gray-700\">In-Person</span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Results */}\r\n      <div className=\"mb-4\">\r\n        <p className=\"text-gray-600\">\r\n          {filteredServices.length} services found\r\n        </p>\r\n      </div>\r\n\r\n      {/* Services Grid */}\r\n      {filteredServices.length === 0 ? (\r\n        <div className=\"text-center py-12\">\r\n          <div className=\"text-6xl mb-4\">🔧</div>\r\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n            No services found\r\n          </h3>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            Try adjusting your search criteria or browse all services\r\n          </p>\r\n          <Button asChild>\r\n            <Link href=\"/services\">\r\n              Browse All Services\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {filteredServices.map((service) => (\r\n            <Link key={service.id} href={`/services/${service.id}`}>\r\n              <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\r\n                <CardContent className=\"p-6\">\r\n                  <div className=\"flex items-start justify-between mb-4\">\r\n                    <div className=\"flex-1\">\r\n                      <h3 className=\"font-semibold text-lg mb-2 group-hover:text-blue-600 transition-colors\">\r\n                        {service.title}\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\r\n                        {service.description}\r\n                      </p>\r\n                    </div>\r\n                    <Badge variant=\"outline\" className=\"ml-2\">\r\n                      {service.category}\r\n                    </Badge>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center text-sm text-gray-600 mb-3\">\r\n                    <MapPin className=\"h-4 w-4 mr-1\" />\r\n                    {service.location || 'Online'}\r\n                    {service.is_online && service.is_in_person && ' • Online'}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between mb-3\">\r\n                    <span className=\"text-2xl font-bold text-blue-600\">\r\n                      {formatPrice(service.price_rub)}\r\n                    </span>\r\n                    <div className=\"flex items-center text-sm text-gray-500\">\r\n                      <Clock className=\"h-4 w-4 mr-1\" />\r\n                      {service.duration_minutes} min\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <div className=\"flex items-center\">\r\n                      <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\r\n                      <span className=\"font-medium\">4.5</span>\r\n                      <span className=\"text-gray-500 ml-1\">\r\n                        (0 reviews)\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex items-center text-gray-500\">\r\n                      <Users className=\"h-4 w-4 mr-1\" />\r\n                      {service.max_participants} max\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"mt-3 pt-3 border-t border-gray-100\">\r\n                    <div className=\"flex items-center justify-between text-sm text-gray-500\">\r\n                      <span>by Provider</span>\r\n                      <span>{formatRelativeTime(service.created_at)}</span>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\services\\[id]\\page.tsx",["380","381"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Card, CardContent, Badge, Button, Avatar, Textarea } from '@ciuna/ui';\nimport { \n  MapPin, \n  Star, \n  Clock, \n  Users, \n  Calendar,\n  MessageCircle,\n  Heart,\n  Shield,\n  CheckCircle\n} from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice, formatRelativeTime } from '@/lib/utils';\nimport type { Service, ServiceBooking } from '@ciuna/types';\n\nexport default function ServiceDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const serviceId = params.id as string;\n  const [service, setService] = useState<Service | null>(null);\n  const [bookings, setBookings] = useState<ServiceBooking[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  const [selectedTime, setSelectedTime] = useState<string>('');\n  const [bookingNotes, setBookingNotes] = useState('');\n  const [bookingLoading, setBookingLoading] = useState(false);\n\n  useEffect(() => {\n    if (serviceId) {\n      loadServiceData();\n    }\n  }, [serviceId]);\n\n  const loadServiceData = async () => {\n    try {\n      setLoading(true);\n      const [serviceData, bookingsData] = await Promise.all([\n        db.services.getById(parseInt(serviceId)),\n        db.bookings.getAll({ service_id: parseInt(serviceId) }, 1, 10)\n      ]);\n      \n      setService(serviceData);\n      setBookings(bookingsData.data);\n    } catch (error) {\n      console.error('Error loading service data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedTime || !service) return;\n\n    setBookingLoading(true);\n    try {\n      const scheduledAt = new Date(`${selectedDate}T${selectedTime}`);\n      \n      const bookingData = {\n        service_id: service.id,\n        client_id: 'current-user-id', // In real app, get from auth context\n        scheduled_at: scheduledAt.toISOString(),\n        status: 'PENDING' as const,\n        escrow_status: 'HELD' as const,\n        notes: bookingNotes,\n        duration_minutes: service.duration_minutes,\n        total_amount_rub: service.price_rub,\n        escrow_amount_rub: service.price_rub,\n        requirements: service.requirements,\n        deliverables: service.deliverables,\n        cancellation_policy: service.cancellation_policy || 'Standard cancellation policy',\n        meeting_location: service.is_online ? 'Online' : 'TBD',\n        is_online: service.is_online,\n        is_in_person: !service.is_online,\n      };\n\n      const booking = await db.bookings.create(bookingData);\n      router.push(`/bookings/${booking.id}`);\n    } catch (error) {\n      console.error('Error creating booking:', error);\n    } finally {\n      setBookingLoading(false);\n    }\n  };\n\n  const getAvailableSlots = (date: string) => {\n    // Mock available slots - in real app, this would come from the service's available_slots JSONB\n    const slots = [\n      '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'\n    ];\n    \n    // Filter out already booked slots\n    const bookedSlots = bookings\n      .filter(booking => \n        booking.scheduled_at.startsWith(date) && \n        booking.status !== 'CANCELLED'\n      )\n      .map(booking => new Date(booking.scheduled_at).toTimeString().slice(0, 5));\n    \n    return slots.filter(slot => !bookedSlots.includes(slot));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2 space-y-4\">\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!service) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Service not found</h1>\n        <p className=\"text-gray-600 mb-6\">The service you're looking for doesn't exist.</p>\n        <Button asChild>\n          <Link href=\"/services\">Browse All Services</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2\">\n          {/* Service Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {service.title}\n                </h1>\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Badge variant=\"outline\">Service</Badge>\n                  <Badge variant=\"success\" className=\"bg-green-500\">\n                    <Shield className=\"h-3 w-3 mr-1\" />\n                    Verified Provider\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Heart className=\"h-4 w-4 mr-2\" />\n                  Save\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Message\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center text-gray-600 mb-4\">\n              <MapPin className=\"h-5 w-5 mr-2\" />\n              <span>{service.is_online ? 'Online' : 'In-person'}</span>\n            </div>\n\n            <div className=\"flex items-center space-x-6 mb-6\">\n              <div className=\"flex items-center\">\n                <Star className=\"h-5 w-5 text-yellow-500 mr-1\" />\n                <span className=\"font-semibold\">4.5</span>\n                <span className=\"text-gray-600 ml-1\">(0 reviews)</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 text-gray-500 mr-1\" />\n                <span>{service.duration_minutes} minutes</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Users className=\"h-5 w-5 text-gray-500 mr-1\" />\n                <span>Max {service.max_participants} participants</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Service Description */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">About this service</h2>\n              <p className=\"text-gray-700 leading-relaxed mb-6\">\n                {service.description}\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">What's included</h3>\n                  <ul className=\"space-y-2 text-gray-700\">\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Professional consultation\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Follow-up support\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Documentation provided\n                    </li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Requirements</h3>\n                  <ul className=\"space-y-2 text-gray-700\">\n                    <li>• Valid identification</li>\n                    <li>• Relevant documents</li>\n                    <li>• 24-hour advance booking</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Provider Info */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">About the provider</h2>\n              <div className=\"flex items-start space-x-4\">\n                <Avatar\n                  src={undefined}\n                  fallback=\"P\"\n                  size=\"lg\"\n                />\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Provider\n                  </h3>\n                  <p className=\"text-gray-700 mb-4\">\n                    Professional service provider\n                  </p>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center\">\n                      <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                      <span className=\"font-medium\">4.5</span>\n                      <span className=\"text-gray-600 ml-1\">(0 reviews)</span>\n                    </div>\n                    <div className=\"text-gray-600\">\n                      0 completed bookings\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reviews */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Reviews</h2>\n              <div className=\"text-center py-8\">\n                <Star className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No reviews yet. Be the first to review this service!</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Booking Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center mb-6\">\n                <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                  {formatPrice(service.price_rub)}\n                </div>\n                <div className=\"text-gray-600\">per session</div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* Date Selection */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Select Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    min={new Date().toISOString().split('T')[0]}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                {/* Time Selection */}\n                {selectedDate && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Select Time\n                    </label>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {getAvailableSlots(selectedDate).map((slot) => (\n                        <button\n                          key={slot}\n                          onClick={() => setSelectedTime(slot)}\n                          className={`px-3 py-2 text-sm rounded-md border ${\n                            selectedTime === slot\n                              ? 'bg-blue-500 text-white border-blue-500'\n                              : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                          }`}\n                        >\n                          {slot}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Notes */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Special Requests (Optional)\n                  </label>\n                  <Textarea\n                    value={bookingNotes}\n                    onChange={(e) => setBookingNotes(e.target.value)}\n                    placeholder=\"Any special requirements or notes...\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Book Button */}\n                <Button\n                  onClick={handleBooking}\n                  disabled={!selectedDate || !selectedTime || bookingLoading}\n                  className=\"w-full\"\n                >\n                  {bookingLoading ? 'Booking...' : 'Book Now'}\n                </Button>\n\n                <div className=\"text-center text-sm text-gray-600\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <Shield className=\"h-4 w-4 text-green-500 mr-1\" />\n                    <span>Protected by escrow</span>\n                  </div>\n                  <p>Payment held until service completion</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\settings\\page.tsx",["382","383","384","385","386","387","388","389"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { useI18n } from '../../contexts/i18n-context';\r\nimport LanguageSelector from '../../components/language-selector';\r\nimport CurrencySelector from '../../components/currency-selector';\r\nimport NotificationSettings from '../../components/notification-settings';\r\nimport { useAuth } from '../../lib/auth-context';\r\nimport { Settings, Globe, DollarSign, Bell, User } from 'lucide-react';\r\n\r\nexport default function SettingsPage() {\r\n  const { user } = useAuth();\r\n  const { \r\n    userPreferences, \r\n    updateUserPreferences, \r\n    isLoading: i18nLoading \r\n  } = useI18n();\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\r\n\r\n  const handleSavePreferences = async (preferences: any) => {\r\n    try {\r\n      setLoading(true);\r\n      setMessage(null);\r\n      \r\n      await updateUserPreferences(preferences);\r\n      setMessage({ type: 'success', text: 'Settings saved successfully!' });\r\n    } catch (error) {\r\n      console.error('Error saving preferences:', error);\r\n      setMessage({ type: 'error', text: 'Failed to save settings. Please try again.' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = async (language: string) => {\r\n    await handleSavePreferences({ preferred_language: language });\r\n  };\r\n\r\n  const handleCurrencyChange = async (currency: string) => {\r\n    await handleSavePreferences({ currency_code: currency });\r\n  };\r\n\r\n  const handleTimezoneChange = async (timezone: string) => {\r\n    await handleSavePreferences({ timezone });\r\n  };\r\n\r\n  const handleDateFormatChange = async (dateFormat: string) => {\r\n    await handleSavePreferences({ date_format: dateFormat });\r\n  };\r\n\r\n  const handleTimeFormatChange = async (timeFormat: string) => {\r\n    await handleSavePreferences({ time_format: timeFormat });\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader>\r\n            <CardTitle>Access Denied</CardTitle>\r\n            <CardDescription>Please sign in to access settings.</CardDescription>\r\n          </CardHeader>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Settings</h1>\r\n          <p className=\"text-gray-600 mt-2\">Manage your account preferences and settings.</p>\r\n        </div>\r\n\r\n        {message && (\r\n          <div className={`mb-6 p-4 rounded-md ${\r\n            message.type === 'success' \r\n              ? 'bg-green-50 text-green-800 border border-green-200' \r\n              : 'bg-red-50 text-red-800 border border-red-200'\r\n          }`}>\r\n            {message.text}\r\n          </div>\r\n        )}\r\n\r\n        <Tabs defaultValue=\"general\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"general\" className=\"flex items-center space-x-2\">\r\n              <User className=\"h-4 w-4\" />\r\n              <span>General</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"language\" className=\"flex items-center space-x-2\">\r\n              <Globe className=\"h-4 w-4\" />\r\n              <span>Language</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"currency\" className=\"flex items-center space-x-2\">\r\n              <DollarSign className=\"h-4 w-4\" />\r\n              <span>Currency</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\r\n              <Bell className=\"h-4 w-4\" />\r\n              <span>Notifications</span>\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* General Settings */}\r\n          <TabsContent value=\"general\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Account Information</CardTitle>\r\n                <CardDescription>Your basic account details and preferences.</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Timezone\r\n                    </label>\r\n                    <select\r\n                      value={userPreferences?.timezone || 'UTC'}\r\n                      onChange={(e) => handleTimezoneChange(e.target.value)}\r\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      <option value=\"UTC\">UTC</option>\r\n                      <option value=\"Europe/Moscow\">Moscow (UTC+3)</option>\r\n                      <option value=\"Europe/London\">London (UTC+0)</option>\r\n                      <option value=\"America/New_York\">New York (UTC-5)</option>\r\n                      <option value=\"America/Los_Angeles\">Los Angeles (UTC-8)</option>\r\n                      <option value=\"Asia/Tokyo\">Tokyo (UTC+9)</option>\r\n                      <option value=\"Asia/Shanghai\">Shanghai (UTC+8)</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Date Format\r\n                    </label>\r\n                    <select\r\n                      value={userPreferences?.date_format || 'MM/DD/YYYY'}\r\n                      onChange={(e) => handleDateFormatChange(e.target.value)}\r\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      <option value=\"MM/DD/YYYY\">MM/DD/YYYY</option>\r\n                      <option value=\"DD/MM/YYYY\">DD/MM/YYYY</option>\r\n                      <option value=\"YYYY-MM-DD\">YYYY-MM-DD</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Time Format\r\n                    </label>\r\n                    <select\r\n                      value={userPreferences?.time_format || '12h'}\r\n                      onChange={(e) => handleTimeFormatChange(e.target.value)}\r\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      <option value=\"12h\">12-hour (AM/PM)</option>\r\n                      <option value=\"24h\">24-hour</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Language Settings */}\r\n          <TabsContent value=\"language\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Language Preferences</CardTitle>\r\n                <CardDescription>Choose your preferred language for the interface.</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\">\r\n                      Select Language\r\n                    </label>\r\n                    <LanguageSelector \r\n                      variant=\"inline\" \r\n                      showFlag={true} \r\n                      showNativeName={true}\r\n                      className=\"justify-start\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-gray-600\">\r\n                    <p>Your language preference affects:</p>\r\n                    <ul className=\"list-disc list-inside mt-2 space-y-1\">\r\n                      <li>Interface text and labels</li>\r\n                      <li>Date and time formatting</li>\r\n                      <li>Number formatting</li>\r\n                      <li>Currency display</li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Currency Settings */}\r\n          <TabsContent value=\"currency\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Currency Preferences</CardTitle>\r\n                <CardDescription>Set your preferred currency for price display.</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\">\r\n                      Select Currency\r\n                    </label>\r\n                    <CurrencySelector \r\n                      variant=\"inline\" \r\n                      showSymbol={true}\r\n                      className=\"justify-start\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-gray-600\">\r\n                    <p>Your currency preference affects:</p>\r\n                    <ul className=\"list-disc list-inside mt-2 space-y-1\">\r\n                      <li>Price display throughout the platform</li>\r\n                      <li>Payment processing</li>\r\n                      <li>Financial reports and analytics</li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Notification Settings */}\r\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\r\n            <NotificationSettings userId={user.id} />\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\subscriptions\\page.tsx",["390","391","392","393","394"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { BusinessService, SubscriptionPlan, UserSubscription } from '@ciuna/sb';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { useI18n } from '@/contexts/i18n-context';\r\nimport { \r\n  Check, \r\n  X, \r\n  Crown, \r\n  Star, \r\n  Building2,\r\n  CreditCard,\r\n  Calendar,\r\n  AlertCircle,\r\n  CheckCircle\r\n} from 'lucide-react';\r\n\r\nexport default function SubscriptionsPage() {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [loading, setLoading] = useState(true);\r\n  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);\r\n  const [currentSubscription, setCurrentSubscription] = useState<UserSubscription | null>(null);\r\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\r\n  const [billingCycle, setBillingCycle] = useState<'MONTHLY' | 'YEARLY'>('MONTHLY');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadSubscriptionData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadSubscriptionData = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [plansData, subscriptionData] = await Promise.all([\r\n        BusinessService.getSubscriptionPlans(),\r\n        BusinessService.getUserSubscription(user.id)\r\n      ]);\r\n\r\n      setPlans(plansData);\r\n      setCurrentSubscription(subscriptionData);\r\n    } catch (error) {\r\n      console.error('Error loading subscription data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubscribe = async (planId: string) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const result = await BusinessService.createSubscription(\r\n        user.id,\r\n        planId,\r\n        billingCycle\r\n      );\r\n\r\n      if (result.success) {\r\n        // Redirect to payment or show success\r\n        alert('Subscription created successfully!');\r\n        await loadSubscriptionData();\r\n      } else {\r\n        alert('Failed to create subscription. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating subscription:', error);\r\n      alert('An error occurred. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleCancelSubscription = async () => {\r\n    if (!user || !currentSubscription) return;\r\n\r\n    if (confirm('Are you sure you want to cancel your subscription?')) {\r\n      try {\r\n        const success = await BusinessService.cancelSubscription(user.id, true);\r\n        if (success) {\r\n          alert('Subscription will be cancelled at the end of the current period.');\r\n          await loadSubscriptionData();\r\n        } else {\r\n          alert('Failed to cancel subscription. Please try again.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error cancelling subscription:', error);\r\n        alert('An error occurred. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPlanIcon = (planType: string) => {\r\n    switch (planType) {\r\n      case 'BASIC':\r\n        return <Star className=\"h-6 w-6\" />;\r\n      case 'PREMIUM':\r\n        return <Crown className=\"h-6 w-6\" />;\r\n      case 'ENTERPRISE':\r\n        return <Building2 className=\"h-6 w-6\" />;\r\n      default:\r\n        return <Star className=\"h-6 w-6\" />;\r\n    }\r\n  };\r\n\r\n  const getPlanColor = (planType: string) => {\r\n    switch (planType) {\r\n      case 'BASIC':\r\n        return 'text-blue-600 bg-blue-100';\r\n      case 'PREMIUM':\r\n        return 'text-purple-600 bg-purple-100';\r\n      case 'ENTERPRISE':\r\n        return 'text-green-600 bg-green-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const isCurrentPlan = (planId: string) => {\r\n    return currentSubscription?.plan_id === planId;\r\n  };\r\n\r\n  const getSubscriptionStatus = () => {\r\n    if (!currentSubscription) return null;\r\n\r\n    switch (currentSubscription.status) {\r\n      case 'TRIAL':\r\n        return { text: 'Trial', color: 'bg-blue-100 text-blue-800' };\r\n      case 'ACTIVE':\r\n        return { text: 'Active', color: 'bg-green-100 text-green-800' };\r\n      case 'PAUSED':\r\n        return { text: 'Paused', color: 'bg-yellow-100 text-yellow-800' };\r\n      case 'CANCELLED':\r\n        return { text: 'Cancelled', color: 'bg-red-100 text-red-800' };\r\n      case 'EXPIRED':\r\n        return { text: 'Expired', color: 'bg-gray-100 text-gray-800' };\r\n      case 'PAST_DUE':\r\n        return { text: 'Past Due', color: 'bg-orange-100 text-orange-800' };\r\n      default:\r\n        return { text: 'Unknown', color: 'bg-gray-100 text-gray-800' };\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader>\r\n            <CardTitle>Access Denied</CardTitle>\r\n            <CardDescription>Please sign in to view subscriptions.</CardDescription>\r\n          </CardHeader>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"animate-pulse space-y-6\">\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"h-96 bg-gray-200 rounded\"></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Subscription Plans</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Choose the perfect plan for your business needs.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Current Subscription */}\r\n        {currentSubscription && (\r\n          <Card className=\"mb-8\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                <span>Current Subscription</span>\r\n                <Badge className={getSubscriptionStatus()?.color}>\r\n                  {getSubscriptionStatus()?.text}\r\n                </Badge>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900\">Plan</h3>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    {currentSubscription.billing_cycle === 'YEARLY' ? 'Yearly' : 'Monthly'} billing\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900\">Price</h3>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    {formatPrice(currentSubscription.price, currentSubscription.currency_code)}\r\n                    /{currentSubscription.billing_cycle === 'YEARLY' ? 'year' : 'month'}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900\">Next Billing</h3>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    {new Date(currentSubscription.current_period_end).toLocaleDateString()}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              \r\n              {currentSubscription.status === 'ACTIVE' && (\r\n                <div className=\"mt-6 flex space-x-4\">\r\n                  <Button variant=\"outline\" onClick={handleCancelSubscription}>\r\n                    Cancel Subscription\r\n                  </Button>\r\n                  <Button variant=\"outline\">\r\n                    <CreditCard className=\"h-4 w-4 mr-2\" />\r\n                    Update Payment Method\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Billing Cycle Toggle */}\r\n        <div className=\"flex justify-center mb-8\">\r\n          <div className=\"bg-gray-100 rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setBillingCycle('MONTHLY')}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                billingCycle === 'MONTHLY'\r\n                  ? 'bg-white text-gray-900 shadow-sm'\r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              Monthly\r\n            </button>\r\n            <button\r\n              onClick={() => setBillingCycle('YEARLY')}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                billingCycle === 'YEARLY'\r\n                  ? 'bg-white text-gray-900 shadow-sm'\r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              Yearly\r\n              <span className=\"ml-1 text-xs text-green-600\">Save 20%</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Subscription Plans */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n          {plans.map((plan) => {\r\n            const price = billingCycle === 'YEARLY' ? plan.price_yearly : plan.price_monthly;\r\n            const isCurrent = isCurrentPlan(plan.id);\r\n            const isPopular = plan.plan_type === 'PREMIUM';\r\n\r\n            return (\r\n              <Card\r\n                key={plan.id}\r\n                className={`relative ${\r\n                  isPopular ? 'ring-2 ring-purple-500 shadow-lg' : ''\r\n                } ${isCurrent ? 'ring-2 ring-green-500' : ''}`}\r\n              >\r\n                {isPopular && (\r\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\r\n                    <Badge className=\"bg-purple-600 text-white\">\r\n                      Most Popular\r\n                    </Badge>\r\n                  </div>\r\n                )}\r\n                \r\n                {isCurrent && (\r\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\r\n                    <Badge className=\"bg-green-600 text-white\">\r\n                      Current Plan\r\n                    </Badge>\r\n                  </div>\r\n                )}\r\n\r\n                <CardHeader>\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <div className={getPlanColor(plan.plan_type)}>\r\n                      {getPlanIcon(plan.plan_type)}\r\n                    </div>\r\n                    <CardTitle className=\"text-xl\">{plan.name}</CardTitle>\r\n                  </div>\r\n                  <CardDescription>{plan.description}</CardDescription>\r\n                  <div className=\"mt-4\">\r\n                    <span className=\"text-4xl font-bold\">\r\n                      {formatPrice(price || plan.price_monthly, plan.currency_code)}\r\n                    </span>\r\n                    <span className=\"text-gray-600 ml-2\">\r\n                      /{billingCycle === 'YEARLY' ? 'year' : 'month'}\r\n                    </span>\r\n                  </div>\r\n                </CardHeader>\r\n\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"space-y-3\">\r\n                      {Object.entries(plan.features).map(([key, value]) => (\r\n                        <div key={key} className=\"flex items-center space-x-2\">\r\n                          <Check className=\"h-4 w-4 text-green-600\" />\r\n                          <span className=\"text-sm text-gray-600\">\r\n                            {key.replace(/_/g, ' ').toLowerCase()}: {value}\r\n                          </span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n\r\n                    <div className=\"pt-4\">\r\n                      {isCurrent ? (\r\n                        <Button className=\"w-full\" disabled>\r\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n                          Current Plan\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          className=\"w-full\"\r\n                          onClick={() => handleSubscribe(plan.id)}\r\n                        >\r\n                          {plan.plan_type === 'ENTERPRISE' ? 'Contact Sales' : 'Subscribe'}\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n\r\n                    {plan.trial_days > 0 && (\r\n                      <p className=\"text-xs text-center text-gray-500\">\r\n                        {plan.trial_days}-day free trial\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* FAQ Section */}\r\n        <div className=\"mt-16\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\">Frequently Asked Questions</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                Can I change my plan anytime?\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Yes, you can upgrade or downgrade your plan at any time. Changes will be prorated and reflected in your next billing cycle.\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                What happens if I cancel?\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                You can cancel your subscription at any time. You'll continue to have access to premium features until the end of your current billing period.\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                Do you offer refunds?\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                We offer a 30-day money-back guarantee for all new subscriptions. Contact our support team for assistance.\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                Can I get a custom plan?\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Yes, we offer custom Enterprise plans for large businesses. Contact our sales team to discuss your specific needs.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendor-dashboard\\page.tsx",["395","396"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Card, CardContent, CardHeader, CardTitle, Button, Badge } from '@ciuna/ui';\nimport { \n  Plus, \n  Package, \n  ShoppingBag, \n  TrendingUp, \n  Users, \n  Star,\n  Eye,\n  DollarSign,\n  BarChart3,\n  Settings\n} from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice } from '@/lib/utils';\nimport type { Vendor, VendorProduct, Order } from '@ciuna/types';\n\nexport default function VendorDashboardPage() {\n  const { user, profile } = useAuth();\n  const router = useRouter();\n  const [vendor, setVendor] = useState<Vendor | null>(null);\n  const [products, setProducts] = useState<VendorProduct[]>([]);\n  const [recentOrders, setRecentOrders] = useState<Order[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalProducts: 0,\n    activeProducts: 0,\n    totalOrders: 0,\n    pendingOrders: 0,\n    totalRevenue: 0,\n    monthlyRevenue: 0,\n  });\n\n  useEffect(() => {\n    if (!user || profile?.role !== 'VENDOR') {\n      router.push('/');\n      return;\n    }\n    loadVendorData();\n  }, [user, profile, router]);\n\n  const loadVendorData = async () => {\n    try {\n      setLoading(true);\n      \n      // Get vendor profile\n      const vendorData = await db.vendors.getByOwnerId(user?.id || '');\n      setVendor(vendorData);\n\n      if (vendorData) {\n        // Get products\n        const productsData = await db.products.getAll({ vendor_id: vendorData.id }, 1, 10);\n        setProducts(productsData.data);\n\n        // Get recent orders\n        const ordersData = await db.orders.getAll({ seller_id: user?.id }, 1, 5);\n        setRecentOrders(ordersData.data);\n\n        // Calculate stats\n        const activeProducts = productsData.data.filter(p => p.status === 'ACTIVE').length;\n        const pendingOrders = ordersData.data.filter(o => o.status === 'PENDING').length;\n        \n        setStats({\n          totalProducts: productsData.data.length,\n          activeProducts,\n          totalOrders: ordersData.data.length,\n          pendingOrders,\n          totalRevenue: vendorData.total_sales || 0,\n          monthlyRevenue: 0, // This would need to be calculated separately\n        });\n      }\n    } catch (error) {\n      console.error('Error loading vendor data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!vendor) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Vendor Account Required</h1>\n        <p className=\"text-gray-600 mb-6\">You need to create a vendor account to access this dashboard.</p>\n        <Button asChild>\n          <Link href=\"/vendor-dashboard/setup\">Create Vendor Account</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Welcome back, {vendor.name}\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Manage your products and orders\n          </p>\n        </div>\n        <div className=\"flex space-x-4\">\n          <Button asChild>\n            <Link href=\"/vendor-dashboard/products/new\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Product\n            </Link>\n          </Button>\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/vendor-dashboard/settings\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Settings\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Package className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Products</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalProducts}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <TrendingUp className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Products</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.activeProducts}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <ShoppingBag className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Orders</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalOrders}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <DollarSign className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatPrice(stats.totalRevenue)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Products */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Products</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link href=\"/vendor-dashboard/products\">\n                  View All\n                </Link>\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {products.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products yet</h3>\n                <p className=\"text-gray-600 mb-4\">Start by adding your first product</p>\n                <Button asChild>\n                  <Link href=\"/vendor-dashboard/products/new\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Product\n                  </Link>\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {products.slice(0, 5).map((product) => (\n                  <div key={product.id} className=\"flex items-center space-x-4\">\n                    <div className=\"flex-shrink-0\">\n                      {product.photo_urls && product.photo_urls.length > 0 ? (\n                        <img\n                          src={product.photo_urls[0]}\n                          alt={product.name}\n                          className=\"h-12 w-12 rounded-lg object-cover\"\n                        />\n                      ) : (\n                        <div className=\"h-12 w-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n                          <Package className=\"h-6 w-6 text-gray-400\" />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\n                        {product.name}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        {formatPrice(product.price_rub)} • {product.stock_quantity} in stock\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant={product.status === 'ACTIVE' ? 'default' : 'secondary'}>\n                        {product.status}\n                      </Badge>\n                      <Button variant=\"ghost\" size=\"sm\" asChild>\n                        <Link href={`/vendor-dashboard/products/${product.id}`}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Orders */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Orders</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link href=\"/vendor-dashboard/orders\">\n                  View All\n                </Link>\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {recentOrders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <ShoppingBag className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders yet</h3>\n                <p className=\"text-gray-600\">Orders will appear here when customers purchase your products</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center space-x-4\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                        <ShoppingBag className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        Order #{order.id}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        {formatPrice(order.total_amount_rub)}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant={\n                        order.status === 'PENDING' ? 'secondary' :\n                        order.status === 'PAID' ? 'default' :\n                        order.status === 'DELIVERED' ? 'success' : 'destructive'\n                      }>\n                        {order.status}\n                      </Badge>\n                      <Button variant=\"ghost\" size=\"sm\" asChild>\n                        <Link href={`/vendor-dashboard/orders/${order.id}`}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button asChild className=\"h-20 flex-col\">\n              <Link href=\"/vendor-dashboard/products/new\">\n                <Plus className=\"h-6 w-6 mb-2\" />\n                Add New Product\n              </Link>\n            </Button>\n            <Button variant=\"outline\" asChild className=\"h-20 flex-col\">\n              <Link href=\"/vendor-dashboard/analytics\">\n                <BarChart3 className=\"h-6 w-6 mb-2\" />\n                View Analytics\n              </Link>\n            </Button>\n            <Button variant=\"outline\" asChild className=\"h-20 flex-col\">\n              <Link href=\"/vendor-dashboard/settings\">\n                <Settings className=\"h-6 w-6 mb-2\" />\n                Vendor Settings\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendors\\page.tsx",["397","398"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, Badge, Button, Input } from '@ciuna/ui';\nimport { Search, MapPin, Star, Shield, Filter, SlidersHorizontal } from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice } from '@/lib/utils';\nimport type { Vendor } from '@ciuna/types';\n\nexport default function VendorsPage() {\n  const [vendors, setVendors] = useState<Vendor[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState({\n    type: '',\n    city: '',\n    verified: false,\n  });\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    loadVendors();\n  }, [filters]);\n\n  const loadVendors = async () => {\n    try {\n      setLoading(true);\n      const { data } = await db.vendors.getAll(filters, 1, 20);\n      setVendors(data);\n    } catch (error) {\n      console.error('Error loading vendors:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Implement search logic\n  };\n\n  const filteredVendors = vendors.filter(vendor => {\n    if (searchQuery) {\n      return vendor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n             vendor.description.toLowerCase().includes(searchQuery.toLowerCase());\n    }\n    return true;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {Array.from({ length: 9 }).map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-gray-200 rounded-lg h-48 mb-4\"></div>\n              <div className=\"space-y-2\">\n                <div className=\"bg-gray-200 rounded h-4\"></div>\n                <div className=\"bg-gray-200 rounded h-4 w-3/4\"></div>\n                <div className=\"bg-gray-200 rounded h-6 w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          Verified Vendors\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          Discover trusted vendors with quality products and excellent service\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Search Bar */}\n          <form onSubmit={handleSearch} className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                placeholder=\"Search vendors...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </form>\n\n          {/* Filter Button */}\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"lg:hidden\"\n          >\n            <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Filters Panel */}\n        {showFilters && (\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Type\n                </label>\n                <select\n                  value={filters.type}\n                  onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">All Types</option>\n                  <option value=\"LOCAL\">Local</option>\n                  <option value=\"INTERNATIONAL\">International</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  City\n                </label>\n                <select\n                  value={filters.city}\n                  onChange={(e) => setFilters(prev => ({ ...prev, city: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">All Cities</option>\n                  <option value=\"Moscow\">Moscow</option>\n                  <option value=\"St. Petersburg\">St. Petersburg</option>\n                  <option value=\"Novosibirsk\">Novosibirsk</option>\n                  <option value=\"Yekaterinburg\">Yekaterinburg</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"verified\"\n                  checked={filters.verified}\n                  onChange={(e) => setFilters(prev => ({ ...prev, verified: e.target.checked }))}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"verified\" className=\"ml-2 block text-sm text-gray-900\">\n                  Verified only\n                </label>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Results */}\n      <div className=\"mb-4\">\n        <p className=\"text-gray-600\">\n          {filteredVendors.length} vendors found\n        </p>\n      </div>\n\n      {/* Vendors Grid */}\n      {filteredVendors.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">🏪</div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            No vendors found\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            Try adjusting your search criteria or browse all vendors\n          </p>\n          <Button asChild>\n            <Link href=\"/vendors\">\n              Browse All Vendors\n            </Link>\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredVendors.map((vendor) => (\n            <Link key={vendor.id} href={`/vendors/${vendor.id}`}>\n              <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n                <div className=\"relative\">\n                  {vendor.logo_url ? (\n                    <Image\n                      src={vendor.logo_url}\n                      alt={vendor.name}\n                      width={400}\n                      height={200}\n                      className=\"w-full h-48 object-cover rounded-t-lg\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-48 bg-gradient-to-br from-blue-100 to-purple-100 rounded-t-lg flex items-center justify-center\">\n                      <span className=\"text-4xl\">🏪</span>\n                    </div>\n                  )}\n                  <div className=\"absolute top-2 right-2 flex space-x-1\">\n                    <Badge variant={vendor.type === 'LOCAL' ? 'default' : 'secondary'}>\n                      {vendor.type}\n                    </Badge>\n                    {vendor.verified && (\n                      <Badge variant=\"success\" className=\"bg-green-500\">\n                        <Shield className=\"h-3 w-3 mr-1\" />\n                        Verified\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                \n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-lg mb-2 group-hover:text-blue-600 transition-colors\">\n                    {vendor.name}\n                  </h3>\n                  \n                  <div className=\"flex items-center text-sm text-gray-600 mb-2\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    {vendor.city}, {vendor.country}\n                  </div>\n                  \n                  <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n                    {vendor.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                      <span className=\"font-medium\">{vendor.rating.toFixed(1)}</span>\n                      <span className=\"text-gray-500 ml-1\">\n                        ({vendor.review_count} reviews)\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {vendor.total_sales} sales\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">\n                      by Vendor\n                    </span>\n                    <span className=\"text-gray-500\">\n                      {vendor.created_at ? new Date(vendor.created_at).toLocaleDateString() : ''}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\app\\vendors\\[id]\\page.tsx",["399","400"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'next/navigation';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, Badge, Button, Avatar } from '@ciuna/ui';\nimport { \n  MapPin, \n  Star, \n  Shield, \n  ExternalLink, \n  MessageCircle, \n  Heart,\n  ShoppingBag,\n  Globe,\n  Phone,\n  Mail\n} from 'lucide-react';\nimport { db } from '@ciuna/sb';\nimport { formatPrice, formatRelativeTime } from '@/lib/utils';\nimport type { Vendor, VendorProduct } from '@ciuna/types';\n\nexport default function VendorDetailPage() {\n  const params = useParams();\n  const vendorId = params.id as string;\n  const [vendor, setVendor] = useState<Vendor | null>(null);\n  const [products, setProducts] = useState<VendorProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('products');\n\n  useEffect(() => {\n    if (vendorId) {\n      loadVendorData();\n    }\n  }, [vendorId]);\n\n  const loadVendorData = async () => {\n    try {\n      setLoading(true);\n      const [vendorData, productsData] = await Promise.all([\n        db.vendors.getById(vendorId),\n        db.products.getAll({ vendor_id: vendorId }, 1, 20)\n      ]);\n      \n      setVendor(vendorData);\n      setProducts(productsData.data);\n    } catch (error) {\n      console.error('Error loading vendor data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"bg-gray-200 rounded-lg h-64 mb-8\"></div>\n          <div className=\"space-y-4\">\n            <div className=\"bg-gray-200 rounded h-8 w-1/3\"></div>\n            <div className=\"bg-gray-200 rounded h-4 w-2/3\"></div>\n            <div className=\"bg-gray-200 rounded h-4 w-1/2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!vendor) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Vendor not found</h1>\n        <p className=\"text-gray-600 mb-6\">The vendor you're looking for doesn't exist.</p>\n        <Button asChild>\n          <Link href=\"/vendors\">Browse All Vendors</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Vendor Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Vendor Logo */}\n          <div className=\"lg:w-1/3\">\n            {vendor.logo_url ? (\n              <Image\n                src={vendor.logo_url}\n                alt={vendor.name}\n                width={300}\n                height={300}\n                className=\"w-full h-64 object-cover rounded-lg\"\n              />\n            ) : (\n              <div className=\"w-full h-64 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center\">\n                <span className=\"text-6xl\">🏪</span>\n              </div>\n            )}\n          </div>\n\n          {/* Vendor Info */}\n          <div className=\"lg:w-2/3\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {vendor.name}\n                </h1>\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Badge variant={vendor.type === 'LOCAL' ? 'default' : 'secondary'}>\n                    {vendor.type}\n                  </Badge>\n                  {vendor.verified && (\n                    <Badge variant=\"success\" className=\"bg-green-500\">\n                      <Shield className=\"h-3 w-3 mr-1\" />\n                      Verified\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Heart className=\"h-4 w-4 mr-2\" />\n                  Follow\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Message\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center text-gray-600 mb-4\">\n              <MapPin className=\"h-5 w-5 mr-2\" />\n              <span>{vendor.city}, {vendor.country}</span>\n            </div>\n\n            <p className=\"text-gray-700 mb-6 leading-relaxed\">\n              {vendor.description}\n            </p>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{vendor.rating.toFixed(1)}</div>\n                <div className=\"text-sm text-gray-600\">Rating</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{vendor.review_count}</div>\n                <div className=\"text-sm text-gray-600\">Reviews</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{vendor.total_sales}</div>\n                <div className=\"text-sm text-gray-600\">Sales</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{products.length}</div>\n                <div className=\"text-sm text-gray-600\">Products</div>\n              </div>\n            </div>\n\n            {/* Contact Info */}\n            <div className=\"flex flex-wrap gap-4 text-sm text-gray-600\">\n              {vendor.contact_email && (\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  <a href={`mailto:${vendor.contact_email}`} className=\"hover:text-blue-600\">\n                    {vendor.contact_email}\n                  </a>\n                </div>\n              )}\n              {vendor.contact_phone && (\n                <div className=\"flex items-center\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  <a href={`tel:${vendor.contact_phone}`} className=\"hover:text-blue-600\">\n                    {vendor.contact_phone}\n                  </a>\n                </div>\n              )}\n              {vendor.website && (\n                <div className=\"flex items-center\">\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  <a \n                    href={vendor.website} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-blue-600 flex items-center\"\n                  >\n                    Website\n                    <ExternalLink className=\"h-3 w-3 ml-1\" />\n                  </a>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"mb-8\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            <button\n              onClick={() => setActiveTab('products')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'products'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              Products ({products.length})\n            </button>\n            <button\n              onClick={() => setActiveTab('reviews')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'reviews'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              Reviews ({vendor.review_count})\n            </button>\n            <button\n              onClick={() => setActiveTab('about')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'about'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              About\n            </button>\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'products' && (\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Products</h2>\n            <Button asChild>\n              <Link href={`/vendors/${vendor.id}/products`}>\n                View All Products\n              </Link>\n            </Button>\n          </div>\n          \n          {products.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-4xl mb-4\">📦</div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No products yet</h3>\n              <p className=\"text-gray-600\">This vendor hasn't added any products yet.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {products.slice(0, 6).map((product) => (\n                <Link key={product.id} href={`/products/${product.id}`}>\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n                    <div className=\"relative\">\n                      {product.photo_urls && product.photo_urls.length > 0 ? (\n                        <Image\n                          src={product.photo_urls[0]}\n                          alt={product.name}\n                          width={400}\n                          height={300}\n                          className=\"w-full h-48 object-cover rounded-t-lg\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-48 bg-gray-200 rounded-t-lg flex items-center justify-center\">\n                          <span className=\"text-4xl\">📦</span>\n                        </div>\n                      )}\n                      <div className=\"absolute top-2 right-2\">\n                        <Badge variant=\"secondary\" className=\"bg-white/90 text-gray-900\">\n                          {product.is_local_stock ? 'Local' : 'Dropship'}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <CardContent className=\"p-4\">\n                      <h3 className=\"font-semibold text-lg mb-2 group-hover:text-blue-600 transition-colors line-clamp-2\">\n                        {product.name}\n                      </h3>\n                      \n                      <div className=\"flex items-center justify-between mb-3\">\n                        <span className=\"text-2xl font-bold text-blue-600\">\n                          {formatPrice(product.price_rub)}\n                        </span>\n                        <div className=\"text-sm text-gray-500\">\n                          {product.stock_quantity} in stock\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                        <span>{product.view_count} views</span>\n                        <span>{formatRelativeTime(product.created_at)}</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {activeTab === 'reviews' && (\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Reviews</h2>\n          <div className=\"text-center py-12\">\n            <div className=\"text-4xl mb-4\">⭐</div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No reviews yet</h3>\n            <p className=\"text-gray-600\">Be the first to review this vendor!</p>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'about' && (\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">About {vendor.name}</h2>\n          <div className=\"prose max-w-none\">\n            <p className=\"text-gray-700 leading-relaxed mb-6\">\n              {vendor.description}\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Business Information</h3>\n                <dl className=\"space-y-2\">\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Type</dt>\n                    <dd className=\"text-gray-600\">{vendor.type}</dd>\n                  </div>\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Location</dt>\n                    <dd className=\"text-gray-600\">{vendor.city}, {vendor.country}</dd>\n                  </div>\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Commission Rate</dt>\n                    <dd className=\"text-gray-600\">{(vendor.commission_rate * 100).toFixed(1)}%</dd>\n                  </div>\n                </dl>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Performance</h3>\n                <dl className=\"space-y-2\">\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Rating</dt>\n                    <dd className=\"text-gray-600 flex items-center\">\n                      <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                      {vendor.rating.toFixed(1)} out of 5\n                    </dd>\n                  </div>\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Total Sales</dt>\n                    <dd className=\"text-gray-600\">{vendor.total_sales}</dd>\n                  </div>\n                  <div>\n                    <dt className=\"font-medium text-gray-900\">Member Since</dt>\n                    <dd className=\"text-gray-600\">\n                      {vendor.created_at ? new Date(vendor.created_at).toLocaleDateString() : 'N/A'}\n                    </dd>\n                  </div>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\advanced-search.tsx",["401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],[],"'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Input } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SearchService, SearchResult, SearchSuggestion, SearchFilter } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { useI18n } from '../contexts/i18n-context';\r\nimport { \r\n  Search, \r\n  Filter, \r\n  X, \r\n  TrendingUp, \r\n  Clock, \r\n  Star,\r\n  MapPin,\r\n  DollarSign,\r\n  Calendar,\r\n  ChevronDown,\r\n  Loader2\r\n} from 'lucide-react';\r\n\r\ninterface AdvancedSearchProps {\r\n  onResults: (results: SearchResult[]) => void;\r\n  onLoading: (loading: boolean) => void;\r\n  placeholder?: string;\r\n  showFilters?: boolean;\r\n  showSuggestions?: boolean;\r\n  showTrending?: boolean;\r\n  contentType?: 'ALL' | 'LISTINGS' | 'VENDORS' | 'SERVICES' | 'PRODUCTS';\r\n}\r\n\r\nexport default function AdvancedSearch({\r\n  onResults,\r\n  onLoading,\r\n  placeholder = \"Search for anything...\",\r\n  showFilters = true,\r\n  showSuggestions = true,\r\n  showTrending = true,\r\n  contentType = 'ALL'\r\n}: AdvancedSearchProps) {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [query, setQuery] = useState('');\r\n  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);\r\n  const [filters, setFilters] = useState<SearchFilter[]>([]);\r\n  const [activeFilters, setActiveFilters] = useState<Record<string, any>>({});\r\n  const [trending, setTrending] = useState<SearchSuggestion[]>([]);\r\n  const [recentSearches, setRecentSearches] = useState<SearchSuggestion[]>([]);\r\n  const [showSuggestionsList, setShowSuggestionsList] = useState(false);\r\n  const [showFiltersPanel, setShowFiltersPanel] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchHistory, setSearchHistory] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (query.length > 2) {\r\n      loadSuggestions();\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  }, [query]);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const [filtersData, trendingData] = await Promise.all([\r\n        SearchService.getFilters(),\r\n        showTrending ? SearchService.getTrendingSearches(5) : Promise.resolve([])\r\n      ]);\r\n\r\n      setFilters(filtersData);\r\n      setTrending(trendingData);\r\n\r\n      if (user) {\r\n        const history = await SearchService.getSearchHistory(user.id, 5);\r\n        setRecentSearches(history.map(h => ({\r\n          suggestion: h.query_text,\r\n          type: 'AUTOCOMPLETE' as const,\r\n          score: 0\r\n        })));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading initial data:', error);\r\n    }\r\n  };\r\n\r\n  const loadSuggestions = useCallback(async () => {\r\n    try {\r\n      const suggestionsData = await SearchService.getSuggestions(query, 8);\r\n      setSuggestions(suggestionsData);\r\n    } catch (error) {\r\n      console.error('Error loading suggestions:', error);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleSearch = async (searchQuery: string = query) => {\r\n    if (!searchQuery.trim()) return;\r\n\r\n    setLoading(true);\r\n    onLoading(true);\r\n    setShowSuggestionsList(false);\r\n\r\n    try {\r\n      const results = await SearchService.search(\r\n        searchQuery,\r\n        contentType,\r\n        20,\r\n        0,\r\n        activeFilters,\r\n        user?.id\r\n      );\r\n\r\n      onResults(results);\r\n      \r\n      // Add to search history\r\n      if (!searchHistory.includes(searchQuery)) {\r\n        setSearchHistory(prev => [searchQuery, ...prev.slice(0, 9)]);\r\n      }\r\n\r\n      // Update suggestion popularity\r\n      await SearchService.updateSuggestionPopularity(searchQuery);\r\n    } catch (error) {\r\n      console.error('Error searching:', error);\r\n      onResults([]);\r\n    } finally {\r\n      setLoading(false);\r\n      onLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setQuery(suggestion);\r\n    handleSearch(suggestion);\r\n  };\r\n\r\n  const handleFilterChange = (filterKey: string, value: any) => {\r\n    setActiveFilters(prev => ({\r\n      ...prev,\r\n      [filterKey]: value\r\n    }));\r\n  };\r\n\r\n  const handleRemoveFilter = (filterKey: string) => {\r\n    setActiveFilters(prev => {\r\n      const newFilters = { ...prev };\r\n      delete newFilters[filterKey];\r\n      return newFilters;\r\n    });\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  const getFilterDisplayValue = (filter: SearchFilter, value: any) => {\r\n    switch (filter.filter_type) {\r\n      case 'RANGE':\r\n        if (Array.isArray(value) && value.length === 2) {\r\n          return `${value[0]} - ${value[1]}`;\r\n        }\r\n        return value?.toString() || '';\r\n      case 'SELECT':\r\n      case 'MULTISELECT':\r\n        if (Array.isArray(value)) {\r\n          return value.join(', ');\r\n        }\r\n        return value?.toString() || '';\r\n      case 'BOOLEAN':\r\n        return value ? 'Yes' : 'No';\r\n      case 'LOCATION':\r\n        return value?.address || value?.city || 'Location';\r\n      default:\r\n        return value?.toString() || '';\r\n    }\r\n  };\r\n\r\n  const renderFilterInput = (filter: SearchFilter) => {\r\n    const value = activeFilters[filter.filter_key];\r\n\r\n    switch (filter.filter_type) {\r\n      case 'RANGE':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex space-x-2\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Min\"\r\n                value={value?.[0] || ''}\r\n                onChange={(e) => {\r\n                  const newValue = [e.target.value, value?.[1] || ''];\r\n                  handleFilterChange(filter.filter_key, newValue);\r\n                }}\r\n                className=\"w-20\"\r\n              />\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Max\"\r\n                value={value?.[1] || ''}\r\n                onChange={(e) => {\r\n                  const newValue = [value?.[0] || '', e.target.value];\r\n                  handleFilterChange(filter.filter_key, newValue);\r\n                }}\r\n                className=\"w-20\"\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'SELECT':\r\n        return (\r\n          <select\r\n            value={value || ''}\r\n            onChange={(e) => handleFilterChange(filter.filter_key, e.target.value)}\r\n            className=\"w-full p-2 border rounded-md\"\r\n          >\r\n            <option value=\"\">Select {filter.filter_name}</option>\r\n            {filter.filter_options.options?.map((option: string) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        );\r\n\r\n      case 'MULTISELECT':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            {filter.filter_options.options?.map((option: string) => (\r\n              <label key={option} className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={value?.includes(option) || false}\r\n                  onChange={(e) => {\r\n                    const currentValue = value || [];\r\n                    const newValue = e.target.checked\r\n                      ? [...currentValue, option]\r\n                      : currentValue.filter((v: string) => v !== option);\r\n                    handleFilterChange(filter.filter_key, newValue);\r\n                  }}\r\n                />\r\n                <span className=\"text-sm\">{option}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        );\r\n\r\n      case 'BOOLEAN':\r\n        return (\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={value || false}\r\n              onChange={(e) => handleFilterChange(filter.filter_key, e.target.checked)}\r\n            />\r\n            <span className=\"text-sm\">{filter.filter_options.label}</span>\r\n          </label>\r\n        );\r\n\r\n      case 'LOCATION':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Input\r\n              placeholder=\"Enter location\"\r\n              value={value?.address || ''}\r\n              onChange={(e) => handleFilterChange(filter.filter_key, {\r\n                ...value,\r\n                address: e.target.value\r\n              })}\r\n            />\r\n            <Input\r\n              type=\"number\"\r\n              placeholder=\"Radius (km)\"\r\n              value={value?.radius || ''}\r\n              onChange={(e) => handleFilterChange(filter.filter_key, {\r\n                ...value,\r\n                radius: parseInt(e.target.value) || 0\r\n              })}\r\n              className=\"w-24\"\r\n            />\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <Input\r\n            placeholder={`Enter ${filter.filter_name.toLowerCase()}`}\r\n            value={value || ''}\r\n            onChange={(e) => handleFilterChange(filter.filter_key, e.target.value)}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      {/* Search Input */}\r\n      <div className=\"relative\">\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n          <Input\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            onFocus={() => setShowSuggestionsList(true)}\r\n            className=\"pl-10 pr-20\"\r\n          />\r\n          <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 flex space-x-1\">\r\n            {showFilters && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowFiltersPanel(!showFiltersPanel)}\r\n                className=\"h-8\"\r\n              >\r\n                <Filter className=\"h-4 w-4\" />\r\n              </Button>\r\n            )}\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => handleSearch()}\r\n              disabled={loading || !query.trim()}\r\n              className=\"h-8\"\r\n            >\r\n              {loading ? (\r\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n              ) : (\r\n                <Search className=\"h-4 w-4\" />\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Suggestions Dropdown */}\r\n        {showSuggestionsList && (suggestions.length > 0 || recentSearches.length > 0 || trending.length > 0) && (\r\n          <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-y-auto\">\r\n            <CardContent className=\"p-0\">\r\n              {/* Recent Searches */}\r\n              {recentSearches.length > 0 && (\r\n                <div className=\"p-3 border-b\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <Clock className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm font-medium text-gray-700\">Recent</span>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    {recentSearches.slice(0, 3).map((search, index) => (\r\n                      <button\r\n                        key={index}\r\n                        onClick={() => handleSuggestionClick(search.suggestion)}\r\n                        className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm\"\r\n                      >\r\n                        {search.suggestion}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Trending Searches */}\r\n              {trending.length > 0 && (\r\n                <div className=\"p-3 border-b\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <TrendingUp className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm font-medium text-gray-700\">Trending</span>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    {trending.slice(0, 3).map((trend, index) => (\r\n                      <button\r\n                        key={index}\r\n                        onClick={() => handleSuggestionClick(trend.suggestion)}\r\n                        className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm\"\r\n                      >\r\n                        {trend.suggestion}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Search Suggestions */}\r\n              {suggestions.length > 0 && (\r\n                <div className=\"p-3\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <Search className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm font-medium text-gray-700\">Suggestions</span>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    {suggestions.map((suggestion, index) => (\r\n                      <button\r\n                        key={index}\r\n                        onClick={() => handleSuggestionClick(suggestion.suggestion)}\r\n                        className=\"w-full text-left p-2 hover:bg-gray-100 rounded text-sm\"\r\n                      >\r\n                        {suggestion.suggestion}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n\r\n      {/* Active Filters */}\r\n      {Object.keys(activeFilters).length > 0 && (\r\n        <div className=\"mt-3 flex flex-wrap gap-2\">\r\n          {Object.entries(activeFilters).map(([filterKey, value]) => {\r\n            const filter = filters.find(f => f.filter_key === filterKey);\r\n            if (!filter || !value) return null;\r\n\r\n            return (\r\n              <Badge key={filterKey} variant=\"secondary\" className=\"flex items-center space-x-1\">\r\n                <span>{filter.filter_name}: {getFilterDisplayValue(filter, value)}</span>\r\n                <button\r\n                  onClick={() => handleRemoveFilter(filterKey)}\r\n                  className=\"ml-1 hover:text-red-600\"\r\n                >\r\n                  <X className=\"h-3 w-3\" />\r\n                </button>\r\n              </Badge>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Filters Panel */}\r\n      {showFiltersPanel && (\r\n        <Card className=\"mt-4\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span>Filters</span>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowFiltersPanel(false)}\r\n              >\r\n                <X className=\"h-4 w-4\" />\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {filters.map((filter) => (\r\n                <div key={filter.id} className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">\r\n                    {filter.filter_name}\r\n                  </label>\r\n                  {renderFilterInput(filter)}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"flex justify-end space-x-2 mt-4\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setActiveFilters({})}\r\n              >\r\n                Clear All\r\n              </Button>\r\n              <Button onClick={() => handleSearch()}>\r\n                Apply Filters\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\analytics-dashboard.tsx",["416","417"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\n\r\ninterface DashboardData {\r\n  total_users: number;\r\n  total_sessions: number;\r\n  total_page_views: number;\r\n  total_conversions: number;\r\n  conversion_rate: number;\r\n  avg_session_duration: number;\r\n  bounce_rate: number;\r\n  top_pages: Array<{ page: string; views: number }>;\r\n  top_events: Array<{ event: string; count: number }>;\r\n  device_breakdown: Array<{ device: string; count: number }>;\r\n  country_breakdown: Array<{ country: string; count: number }>;\r\n}\r\n\r\ninterface AnalyticsDashboardProps {\r\n  isAdmin?: boolean;\r\n}\r\n\r\nexport default function AnalyticsDashboard({ isAdmin = false }: AnalyticsDashboardProps) {\r\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');\r\n  const [realTimeData, setRealTimeData] = useState<DashboardData | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadDashboardData();\r\n    \r\n    // Set up real-time updates every 30 seconds\r\n    const interval = setInterval(() => {\r\n      loadRealTimeData();\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [timeRange]);\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      \r\n      switch (timeRange) {\r\n        case '1h':\r\n          startDate.setHours(endDate.getHours() - 1);\r\n          break;\r\n        case '24h':\r\n          startDate.setDate(endDate.getDate() - 1);\r\n          break;\r\n        case '7d':\r\n          startDate.setDate(endDate.getDate() - 7);\r\n          break;\r\n        case '30d':\r\n          startDate.setDate(endDate.getDate() - 30);\r\n          break;\r\n      }\r\n\r\n      const response = await fetch('/api/analytics/dashboard', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          startDate: startDate.toISOString(),\r\n          endDate: endDate.toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setDashboardData(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadRealTimeData = async () => {\r\n    try {\r\n      const response = await fetch('/api/analytics/realtime');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setRealTimeData(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading real-time data:', error);\r\n    }\r\n  };\r\n\r\n  const formatNumber = (num: number) => {\r\n    if (num >= 1000000) {\r\n      return (num / 1000000).toFixed(1) + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n      return (num / 1000).toFixed(1) + 'K';\r\n    }\r\n    return num.toString();\r\n  };\r\n\r\n  const formatDuration = (seconds: number) => {\r\n    if (seconds < 60) {\r\n      return `${Math.round(seconds)}s`;\r\n    }\r\n    if (seconds < 3600) {\r\n      return `${Math.round(seconds / 60)}m`;\r\n    }\r\n    return `${Math.round(seconds / 3600)}h`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <Card key={i}>\r\n              <CardHeader className=\"pb-2\">\r\n                <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-8 bg-gray-200 rounded animate-pulse\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const data = realTimeData || dashboardData;\r\n\r\n  if (!data) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Analytics Dashboard</CardTitle>\r\n          <CardDescription>Unable to load analytics data</CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Analytics Dashboard</h1>\r\n          <p className=\"text-gray-600\">\r\n            {timeRange === '1h' ? 'Last hour' : \r\n             timeRange === '24h' ? 'Last 24 hours' :\r\n             timeRange === '7d' ? 'Last 7 days' : 'Last 30 days'}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          {['1h', '24h', '7d', '30d'].map((range) => (\r\n            <Button\r\n              key={range}\r\n              variant={timeRange === range ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setTimeRange(range as any)}\r\n            >\r\n              {range}\r\n            </Button>\r\n          ))}\r\n          {realTimeData && (\r\n            <Badge variant=\"secondary\" className=\"animate-pulse\">\r\n              Live\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Key Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Total Users</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{formatNumber(data.total_users)}</div>\r\n            <p className=\"text-xs text-gray-500\">Active users</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Sessions</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{formatNumber(data.total_sessions)}</div>\r\n            <p className=\"text-xs text-gray-500\">User sessions</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Page Views</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{formatNumber(data.total_page_views)}</div>\r\n            <p className=\"text-xs text-gray-500\">Total page views</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Conversions</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{formatNumber(data.total_conversions)}</div>\r\n            <p className=\"text-xs text-gray-500\">{data.conversion_rate.toFixed(1)}% conversion rate</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Detailed Analytics */}\r\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"traffic\">Traffic</TabsTrigger>\r\n          <TabsTrigger value=\"conversions\">Conversions</TabsTrigger>\r\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Session Metrics */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Session Metrics</CardTitle>\r\n                <CardDescription>User engagement statistics</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm font-medium\">Average Session Duration</span>\r\n                  <span className=\"text-sm font-bold\">\r\n                    {data.avg_session_duration ? formatDuration(data.avg_session_duration) : 'N/A'}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm font-medium\">Bounce Rate</span>\r\n                  <span className=\"text-sm font-bold\">{data.bounce_rate.toFixed(1)}%</span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm font-medium\">Conversion Rate</span>\r\n                  <span className=\"text-sm font-bold\">{data.conversion_rate.toFixed(1)}%</span>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Device Breakdown */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Device Breakdown</CardTitle>\r\n                <CardDescription>User device distribution</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {data.device_breakdown.map((device, index) => (\r\n                    <div key={index} className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm font-medium capitalize\">{device.device || 'Unknown'}</span>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <div className=\"w-20 bg-gray-200 rounded-full h-2\">\r\n                          <div \r\n                            className=\"bg-blue-500 h-2 rounded-full\" \r\n                            style={{ \r\n                              width: `${(device.count / Math.max(...data.device_breakdown.map(d => d.count))) * 100}%` \r\n                            }}\r\n                          ></div>\r\n                        </div>\r\n                        <span className=\"text-sm font-bold\">{device.count}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"traffic\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Top Pages */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Top Pages</CardTitle>\r\n                <CardDescription>Most visited pages</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {data.top_pages.slice(0, 10).map((page, index) => (\r\n                    <div key={index} className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm font-medium truncate\">{page.page}</span>\r\n                      <Badge variant=\"secondary\">{page.views}</Badge>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Top Events */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Top Events</CardTitle>\r\n                <CardDescription>Most triggered events</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {data.top_events.slice(0, 10).map((event, index) => (\r\n                    <div key={index} className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm font-medium\">{event.event}</span>\r\n                      <Badge variant=\"secondary\">{event.count}</Badge>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"conversions\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Conversion Funnel</CardTitle>\r\n              <CardDescription>User conversion journey</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-green-600\">{data.total_conversions}</div>\r\n                  <div className=\"text-sm text-gray-600\">Total Conversions</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-lg font-semibold\">{data.conversion_rate.toFixed(1)}%</div>\r\n                  <div className=\"text-sm text-gray-600\">Conversion Rate</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"performance\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Performance Metrics</CardTitle>\r\n              <CardDescription>System performance indicators</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-center py-8\">\r\n                <div className=\"text-4xl mb-4\">⚡</div>\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Performance Monitoring</h3>\r\n                <p className=\"text-gray-600\">\r\n                  Real-time performance metrics will be displayed here.\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\business-dashboard.tsx",["418","419","420","421","422"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\nimport { Button } from '@ciuna/ui';\nimport { Badge } from '@ciuna/ui';\n// import { Progress } from '@ciuna/ui'; // Progress component not available\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\nimport { BusinessService, BusinessGoal, BusinessNotification, InventoryItem } from '@ciuna/sb';\nimport { useAuth } from '../lib/auth-context';\nimport { useI18n } from '../contexts/i18n-context';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  ShoppingCart, \n  Users, \n  Package,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  BarChart3,\n  Settings,\n  Plus\n} from 'lucide-react';\n\ninterface BusinessDashboardProps {\n  userId: string;\n}\n\nexport default function BusinessDashboard({ userId }: BusinessDashboardProps) {\n  const { formatPrice } = useI18n();\n  const [loading, setLoading] = useState(true);\n  const [metrics, setMetrics] = useState<Record<string, any>>({});\n  const [goals, setGoals] = useState<BusinessGoal[]>([]);\n  const [notifications, setNotifications] = useState<BusinessNotification[]>([]);\n  const [lowInventory, setLowInventory] = useState<InventoryItem[]>([]);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [userId]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const dashboardData = await BusinessService.getBusinessDashboard(userId);\n      \n      setMetrics(dashboardData.metrics);\n      setGoals(dashboardData.goals);\n      setNotifications(dashboardData.notifications);\n      setLowInventory(dashboardData.lowInventory);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMarkNotificationAsRead = async (notificationId: string) => {\n    try {\n      await BusinessService.markNotificationAsRead(notificationId);\n      setNotifications(prev => \n        prev.map(n => n.id === notificationId ? { ...n, is_read: true } : n)\n      );\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'URGENT':\n        return 'text-red-600 bg-red-100';\n      case 'HIGH':\n        return 'text-orange-600 bg-orange-100';\n      case 'MEDIUM':\n        return 'text-yellow-600 bg-yellow-100';\n      case 'LOW':\n        return 'text-blue-600 bg-blue-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getGoalStatusColor = (progress: number) => {\n    if (progress >= 100) return 'text-green-600';\n    if (progress >= 75) return 'text-blue-600';\n    if (progress >= 50) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Business Dashboard</h2>\n        <Button>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Goal\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n          <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Alerts</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {formatPrice(metrics.total_revenue || 0, 'RUB')}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Last 30 days\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{metrics.total_orders || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Last 30 days\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Customers</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{metrics.total_customers || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Unique customers\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Order Value</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {formatPrice(metrics.avg_order_value || 0, 'RUB')}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Per order\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Active Goals */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Goals</CardTitle>\n              <CardDescription>Track your business objectives</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {goals.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Target className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No active goals\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Set goals to track your business progress.\n                  </p>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Goal\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {goals.slice(0, 3).map((goal) => (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">{goal.title}</h4>\n                        <span className={`text-sm font-medium ${getGoalStatusColor(goal.progress_percentage)}`}>\n                          {goal.progress_percentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full\" \n                          style={{ width: `${goal.progress_percentage}%` }}\n                        ></div>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                        <span>{goal.current_value} / {goal.target_value} {goal.unit}</span>\n                        <span>{goal.end_date}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Notifications */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Alerts</CardTitle>\n              <CardDescription>Important business notifications</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <CheckCircle className=\"h-12 w-12 mx-auto text-green-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    All caught up!\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    No new notifications at the moment.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {notifications.slice(0, 5).map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`flex items-start space-x-3 p-3 rounded-lg ${\n                        !notification.is_read ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex-shrink-0\">\n                        {notification.priority === 'URGENT' ? (\n                          <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                        ) : (\n                          <Clock className=\"h-5 w-5 text-gray-400\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium text-gray-900\">\n                            {notification.title}\n                          </h4>\n                          <Badge className={getPriorityColor(notification.priority)}>\n                            {notification.priority}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {new Date(notification.created_at).toLocaleString()}\n                        </p>\n                      </div>\n                      {!notification.is_read && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleMarkNotificationAsRead(notification.id)}\n                        >\n                          Mark Read\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Goals Tab */}\n        <TabsContent value=\"goals\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Business Goals</CardTitle>\n              <CardDescription>Set and track your business objectives</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {goals.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Target className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No goals set\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Create goals to track your business progress and stay motivated.\n                  </p>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Goal\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {goals.map((goal) => (\n                    <div key={goal.id} className=\"border rounded-lg p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h3 className=\"text-lg font-medium text-gray-900\">\n                            {goal.title}\n                          </h3>\n                          {goal.description && (\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              {goal.description}\n                            </p>\n                          )}\n                        </div>\n                        <Badge className={getGoalStatusColor(goal.progress_percentage)}>\n                          {goal.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-600\">Progress</span>\n                          <span className=\"font-medium\">\n                            {goal.current_value} / {goal.target_value} {goal.unit}\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                          <div \n                            className=\"bg-blue-600 h-3 rounded-full\" \n                            style={{ width: `${goal.progress_percentage}%` }}\n                          ></div>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                          <span>{goal.progress_percentage.toFixed(1)}% complete</span>\n                          <span>Due: {new Date(goal.end_date).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Inventory Tab */}\n        <TabsContent value=\"inventory\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Alerts</CardTitle>\n              <CardDescription>Items running low on stock</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {lowInventory.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Package className=\"h-16 w-16 mx-auto text-green-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    All items in stock\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    No low inventory alerts at the moment.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {lowInventory.map((item) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-4 border border-orange-200 rounded-lg bg-orange-50\">\n                      <div className=\"flex items-center space-x-3\">\n                        <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{item.name}</h4>\n                          <p className=\"text-sm text-gray-600\">\n                            SKU: {item.sku || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium text-orange-600\">\n                          {item.quantity} left\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Min: {item.min_quantity}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>All Notifications</CardTitle>\n              <CardDescription>Manage your business alerts and notifications</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"h-16 w-16 mx-auto text-green-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No notifications\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    You're all caught up! New notifications will appear here.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {notifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`flex items-start space-x-3 p-4 rounded-lg border ${\n                        !notification.is_read \n                          ? 'bg-blue-50 border-blue-200' \n                          : 'bg-gray-50 border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex-shrink-0\">\n                        {notification.priority === 'URGENT' ? (\n                          <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                        ) : notification.priority === 'HIGH' ? (\n                          <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n                        ) : (\n                          <Clock className=\"h-5 w-5 text-gray-400\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium text-gray-900\">\n                            {notification.title}\n                          </h4>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getPriorityColor(notification.priority)}>\n                              {notification.priority}\n                            </Badge>\n                            {!notification.is_read && (\n                              <Badge variant=\"secondary\">New</Badge>\n                            )}\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-2\">\n                          {new Date(notification.created_at).toLocaleString()}\n                        </p>\n                      </div>\n                      {!notification.is_read && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleMarkNotificationAsRead(notification.id)}\n                        >\n                          Mark Read\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\category-grid.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\currency-selector.tsx",["423","424","425"],[],"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { \r\n  DropdownMenu, \r\n  DropdownMenuContent, \r\n  DropdownMenuItem, \r\n  DropdownMenuTrigger \r\n} from '@ciuna/ui';\r\nimport { useI18n } from '../contexts/i18n-context';\r\nimport { DollarSign, Check } from 'lucide-react';\r\n\r\ninterface CurrencySelectorProps {\r\n  variant?: 'button' | 'dropdown' | 'inline';\r\n  showSymbol?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst CURRENCIES = [\r\n  { code: 'RUB', name: 'Russian Ruble', symbol: '₽', flag: '🇷🇺' },\r\n  { code: 'USD', name: 'US Dollar', symbol: '$', flag: '🇺🇸' },\r\n  { code: 'EUR', name: 'Euro', symbol: '€', flag: '🇪🇺' },\r\n  { code: 'GBP', name: 'British Pound', symbol: '£', flag: '🇬🇧' },\r\n  { code: 'JPY', name: 'Japanese Yen', symbol: '¥', flag: '🇯🇵' },\r\n  { code: 'CNY', name: 'Chinese Yuan', symbol: '¥', flag: '🇨🇳' },\r\n  { code: 'KRW', name: 'South Korean Won', symbol: '₩', flag: '🇰🇷' },\r\n  { code: 'INR', name: 'Indian Rupee', symbol: '₹', flag: '🇮🇳' },\r\n  { code: 'BRL', name: 'Brazilian Real', symbol: 'R$', flag: '🇧🇷' },\r\n  { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$', flag: '🇨🇦' },\r\n  { code: 'AUD', name: 'Australian Dollar', symbol: 'A$', flag: '🇦🇺' },\r\n  { code: 'CHF', name: 'Swiss Franc', symbol: 'CHF', flag: '🇨🇭' },\r\n  { code: 'SEK', name: 'Swedish Krona', symbol: 'kr', flag: '🇸🇪' },\r\n  { code: 'NOK', name: 'Norwegian Krone', symbol: 'kr', flag: '🇳🇴' },\r\n  { code: 'DKK', name: 'Danish Krone', symbol: 'kr', flag: '🇩🇰' },\r\n  { code: 'PLN', name: 'Polish Zloty', symbol: 'zł', flag: '🇵🇱' },\r\n  { code: 'CZK', name: 'Czech Koruna', symbol: 'Kč', flag: '🇨🇿' },\r\n  { code: 'HUF', name: 'Hungarian Forint', symbol: 'Ft', flag: '🇭🇺' },\r\n  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', flag: '🇹🇷' },\r\n  { code: 'ZAR', name: 'South African Rand', symbol: 'R', flag: '🇿🇦' },\r\n];\r\n\r\nexport default function CurrencySelector({ \r\n  variant = 'dropdown',\r\n  showSymbol = true,\r\n  className = ''\r\n}: CurrencySelectorProps) {\r\n  const { userPreferences, updateUserPreferences, formatPrice } = useI18n();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const currentCurrency = userPreferences?.currency_code || 'RUB';\r\n  const currentCurrencyInfo = CURRENCIES.find(c => c.code === currentCurrency);\r\n\r\n  const handleCurrencyChange = async (currencyCode: string) => {\r\n    await updateUserPreferences({ currency_code: currencyCode });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  if (variant === 'inline') {\r\n    return (\r\n      <div className={`flex flex-wrap gap-2 ${className}`}>\r\n        {CURRENCIES.slice(0, 8).map((currency) => (\r\n          <Button\r\n            key={currency.code}\r\n            variant={currentCurrency === currency.code ? 'default' : 'outline'}\r\n            size=\"sm\"\r\n            onClick={() => handleCurrencyChange(currency.code)}\r\n            className=\"flex items-center space-x-2\"\r\n          >\r\n            <span className=\"text-lg\">{currency.flag}</span>\r\n            <span>{currency.code}</span>\r\n            {showSymbol && (\r\n              <span className=\"text-sm text-gray-500\">{currency.symbol}</span>\r\n            )}\r\n            {currentCurrency === currency.code && (\r\n              <Check className=\"h-3 w-3\" />\r\n            )}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (variant === 'button') {\r\n    return (\r\n      <Button\r\n        variant=\"outline\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className={`flex items-center space-x-2 ${className}`}\r\n      >\r\n        <DollarSign className=\"h-4 w-4\" />\r\n        <span className=\"text-lg\">{currentCurrencyInfo?.flag || '💱'}</span>\r\n        <span>{currentCurrencyInfo?.code || 'RUB'}</span>\r\n        {showSymbol && (\r\n          <span className=\"text-sm text-gray-500\">\r\n            {currentCurrencyInfo?.symbol || '₽'}\r\n          </span>\r\n        )}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className={`flex items-center space-x-2 ${className}`}\r\n        >\r\n          <DollarSign className=\"h-4 w-4\" />\r\n          <span className=\"text-lg\">{currentCurrencyInfo?.flag || '💱'}</span>\r\n          <span>{currentCurrencyInfo?.code || 'RUB'}</span>\r\n          {showSymbol && (\r\n            <span className=\"text-sm text-gray-500\">\r\n              {currentCurrencyInfo?.symbol || '₽'}\r\n            </span>\r\n          )}\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-64\">\r\n        {CURRENCIES.map((currency) => (\r\n          <DropdownMenuItem\r\n            key={currency.code}\r\n            onClick={() => handleCurrencyChange(currency.code)}\r\n            className=\"flex items-center justify-between cursor-pointer\"\r\n          >\r\n            <div className=\"flex items-center space-x-3\">\r\n              <span className=\"text-lg\">{currency.flag}</span>\r\n              <div className=\"flex flex-col\">\r\n                <span className=\"font-medium\">{currency.code}</span>\r\n                <span className=\"text-xs text-gray-500\">{currency.name}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              {showSymbol && (\r\n                <span className=\"text-sm text-gray-500\">{currency.symbol}</span>\r\n              )}\r\n              {currentCurrency === currency.code && (\r\n                <Check className=\"h-4 w-4 text-blue-600\" />\r\n              )}\r\n            </div>\r\n          </DropdownMenuItem>\r\n        ))}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n\r\n// Currency display component\r\nexport function CurrencyDisplay({ \r\n  amount, \r\n  currencyCode, \r\n  showSymbol = true,\r\n  className = ''\r\n}: { \r\n  amount: number; \r\n  currencyCode?: string; \r\n  showSymbol?: boolean;\r\n  className?: string;\r\n}) {\r\n  const { userPreferences, formatPrice } = useI18n();\r\n  const currency = currencyCode || userPreferences?.currency_code || 'RUB';\r\n  \r\n  return (\r\n    <span className={className}>\r\n      {formatPrice(amount, currency)}\r\n    </span>\r\n  );\r\n}\r\n\r\n// Compact currency selector for mobile\r\nexport function CompactCurrencySelector({ className = '' }: { className?: string }) {\r\n  const { userPreferences, updateUserPreferences } = useI18n();\r\n  \r\n  const currentCurrency = userPreferences?.currency_code || 'RUB';\r\n\r\n  return (\r\n    <div className={`flex items-center space-x-1 ${className}`}>\r\n      {CURRENCIES.slice(0, 6).map((currency) => (\r\n        <Button\r\n          key={currency.code}\r\n          variant={currentCurrency === currency.code ? 'default' : 'ghost'}\r\n          size=\"sm\"\r\n          onClick={() => updateUserPreferences({ currency_code: currency.code })}\r\n          className=\"px-2 py-1 h-8\"\r\n        >\r\n          <span className=\"text-sm\">{currency.flag}</span>\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\currency-settings.tsx",["426"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\nimport { CurrencySelector } from '@ciuna/ui';\nimport { Button } from '@ciuna/ui';\nimport { CurrencyCode } from '@ciuna/types';\nimport { CurrencyService } from '@ciuna/sb';\nimport { useAuth } from '../lib/auth-context';\nimport { formatPrice } from '../lib/utils';\n\ninterface CurrencySettingsProps {\n  onSave?: () => void;\n}\n\nexport function CurrencySettings({ onSave }: CurrencySettingsProps) {\n  const { user } = useAuth();\n  const [primaryCurrency, setPrimaryCurrency] = useState<CurrencyCode>('RUB');\n  const [displayCurrency, setDisplayCurrency] = useState<CurrencyCode>('RUB');\n  const [autoConvert, setAutoConvert] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadUserPreferences();\n    }\n  }, [user]);\n\n  const loadUserPreferences = async () => {\n    try {\n      setLoading(true);\n      // TODO: Implement getUserCurrencyPreferences method in CurrencyService\n      // For now, use default values\n      setPrimaryCurrency('RUB');\n      setDisplayCurrency('RUB');\n      setAutoConvert(true);\n    } catch (error) {\n      console.error('Error loading currency preferences:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!user) return;\n\n    try {\n      setSaving(true);\n      // TODO: Implement updateUserCurrencyPreferences method in CurrencyService\n      // For now, just simulate saving\n      console.log('Currency preferences saved:', {\n        primary_currency: primaryCurrency,\n        display_currency: displayCurrency,\n        auto_convert: autoConvert,\n      });\n      \n      onSave?.();\n    } catch (error) {\n      console.error('Error saving currency preferences:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n            <div className=\"h-10 bg-gray-200 rounded mb-4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-4\"></div>\n            <div className=\"h-10 bg-gray-200 rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Currency Settings</CardTitle>\n        <CardDescription>\n          Configure your preferred currencies for buying and selling\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-gray-700\">\n            Primary Currency\n          </label>\n          <p className=\"text-sm text-gray-500\">\n            The currency you prefer to use when creating listings\n          </p>\n          <CurrencySelector\n            value={primaryCurrency}\n            onValueChange={setPrimaryCurrency}\n            showSymbols={true}\n            showNames={true}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-gray-700\">\n            Display Currency\n          </label>\n          <p className=\"text-sm text-gray-500\">\n            The currency you want to see prices in\n          </p>\n          <CurrencySelector\n            value={displayCurrency}\n            onValueChange={setDisplayCurrency}\n            showSymbols={true}\n            showNames={true}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={autoConvert}\n              onChange={(e) => setAutoConvert(e.target.checked)}\n              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n            />\n            <span className=\"text-sm font-medium text-gray-700\">\n              Auto-convert prices\n            </span>\n          </label>\n          <p className=\"text-sm text-gray-500\">\n            Automatically convert prices to your display currency\n          </p>\n        </div>\n\n        {autoConvert && primaryCurrency !== displayCurrency && (\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-blue-900 mb-2\">\n              Price Conversion Preview\n            </h4>\n            <div className=\"text-sm text-blue-700\">\n              <p>100 {primaryCurrency} → {formatPrice(100, displayCurrency)}</p>\n              <p className=\"text-xs text-blue-600 mt-1\">\n                Exchange rates are updated automatically\n              </p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => loadUserPreferences()}\n            disabled={saving}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={saving}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {saving ? 'Saving...' : 'Save Settings'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-listings.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-services.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\featured-vendors.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\hero.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\kyc-verification.tsx",["427","428"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SecurityService, KYCVerification } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { \r\n  Shield, \r\n  Upload, \r\n  CheckCircle, \r\n  XCircle, \r\n  Clock, \r\n  AlertCircle,\r\n  FileText,\r\n  Camera,\r\n  MapPin\r\n} from 'lucide-react';\r\n\r\ninterface KYCVerificationProps {\r\n  onComplete?: () => void;\r\n}\r\n\r\nexport default function KYCVerification({ onComplete }: KYCVerificationProps) {\r\n  const { user } = useAuth();\r\n  const [verifications, setVerifications] = useState<KYCVerification[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<string>('identity');\r\n\r\n  // Form data\r\n  const [documentType, setDocumentType] = useState<string>('PASSPORT');\r\n  const [documentNumber, setDocumentNumber] = useState<string>('');\r\n  const [documentFront, setDocumentFront] = useState<File | null>(null);\r\n  const [documentBack, setDocumentBack] = useState<File | null>(null);\r\n  const [selfie, setSelfie] = useState<File | null>(null);\r\n  const [addressProof, setAddressProof] = useState<File | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadKYCStatus();\r\n  }, [user]);\r\n\r\n  const loadKYCStatus = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const status = await SecurityService.getKYCStatus(user.id);\r\n      setVerifications(status);\r\n    } catch (err) {\r\n      console.error('Error loading KYC status:', err);\r\n      setError('Failed to load verification status');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (file: File, type: 'front' | 'back' | 'selfie' | 'address') => {\r\n    // Validate file type and size\r\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\r\n    const maxSize = 5 * 1024 * 1024; // 5MB\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n      setError('Please upload a valid image file (JPEG, PNG, or WebP)');\r\n      return;\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      setError('File size must be less than 5MB');\r\n      return;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'front':\r\n        setDocumentFront(file);\r\n        break;\r\n      case 'back':\r\n        setDocumentBack(file);\r\n        break;\r\n      case 'selfie':\r\n        setSelfie(file);\r\n        break;\r\n      case 'address':\r\n        setAddressProof(file);\r\n        break;\r\n    }\r\n\r\n    setError(null);\r\n  };\r\n\r\n  const handleSubmit = async (verificationType: 'IDENTITY' | 'ADDRESS' | 'DOCUMENT' | 'SELFIE') => {\r\n    if (!user) return;\r\n\r\n    setSubmitting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Upload files and get URLs (in a real app, you'd upload to Supabase Storage)\r\n      const documentFrontUrl = documentFront ? await uploadFile(documentFront) : undefined;\r\n      const documentBackUrl = documentBack ? await uploadFile(documentBack) : undefined;\r\n      const selfieUrl = selfie ? await uploadFile(selfie) : undefined;\r\n      const addressProofUrl = addressProof ? await uploadFile(addressProof) : undefined;\r\n\r\n      const result = await SecurityService.submitKYC(\r\n        user.id,\r\n        verificationType,\r\n        documentType,\r\n        documentNumber,\r\n        documentFrontUrl,\r\n        documentBackUrl,\r\n        selfieUrl,\r\n        addressProofUrl,\r\n        {\r\n          documentType,\r\n          documentNumber,\r\n          submittedAt: new Date().toISOString(),\r\n        }\r\n      );\r\n\r\n      if (result.success) {\r\n        setSuccess('Verification submitted successfully! We\\'ll review it within 24-48 hours.');\r\n        await loadKYCStatus();\r\n        onComplete?.();\r\n      } else {\r\n        setError('Failed to submit verification. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting KYC:', err);\r\n      setError('An error occurred while submitting verification.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (file: File): Promise<string> => {\r\n    // Mock file upload - in a real app, you'd upload to Supabase Storage\r\n    return `https://example.com/uploads/${file.name}`;\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'APPROVED':\r\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\r\n      case 'REJECTED':\r\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\r\n      case 'IN_REVIEW':\r\n        return <Clock className=\"h-5 w-5 text-yellow-600\" />;\r\n      default:\r\n        return <AlertCircle className=\"h-5 w-5 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'APPROVED':\r\n        return <Badge className=\"bg-green-100 text-green-800\">Approved</Badge>;\r\n      case 'REJECTED':\r\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\r\n      case 'IN_REVIEW':\r\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">In Review</Badge>;\r\n      case 'EXPIRED':\r\n        return <Badge className=\"bg-gray-100 text-gray-800\">Expired</Badge>;\r\n      default:\r\n        return <Badge className=\"bg-blue-100 text-blue-800\">Pending</Badge>;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Identity Verification</CardTitle>\r\n          <CardDescription>Loading verification status...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-4\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <div key={i} className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <Shield className=\"h-5 w-5 mr-2\" />\r\n            Identity Verification\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Verify your identity to access all platform features and increase your account security.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-4\">\r\n              <TabsTrigger value=\"identity\">Identity</TabsTrigger>\r\n              <TabsTrigger value=\"address\">Address</TabsTrigger>\r\n              <TabsTrigger value=\"document\">Document</TabsTrigger>\r\n              <TabsTrigger value=\"selfie\">Selfie</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"identity\" className=\"space-y-6\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Document Type\r\n                  </label>\r\n                  <select\r\n                    value={documentType}\r\n                    onChange={(e) => setDocumentType(e.target.value)}\r\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    <option value=\"PASSPORT\">Passport</option>\r\n                    <option value=\"DRIVER_LICENSE\">Driver's License</option>\r\n                    <option value=\"NATIONAL_ID\">National ID</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Document Number\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={documentNumber}\r\n                    onChange={(e) => setDocumentNumber(e.target.value)}\r\n                    placeholder=\"Enter document number\"\r\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Document Front\r\n                    </label>\r\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\r\n                      <FileText className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0], 'front')}\r\n                        className=\"hidden\"\r\n                        id=\"document-front\"\r\n                      />\r\n                      <label\r\n                        htmlFor=\"document-front\"\r\n                        className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-800\"\r\n                      >\r\n                        {documentFront ? documentFront.name : 'Upload front of document'}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Document Back\r\n                    </label>\r\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\r\n                      <FileText className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0], 'back')}\r\n                        className=\"hidden\"\r\n                        id=\"document-back\"\r\n                      />\r\n                      <label\r\n                        htmlFor=\"document-back\"\r\n                        className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-800\"\r\n                      >\r\n                        {documentBack ? documentBack.name : 'Upload back of document'}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <Button\r\n                  onClick={() => handleSubmit('IDENTITY')}\r\n                  disabled={submitting || !documentFront || !documentNumber}\r\n                  className=\"w-full\"\r\n                >\r\n                  {submitting ? 'Submitting...' : 'Submit Identity Verification'}\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"address\" className=\"space-y-6\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Address Proof\r\n                  </label>\r\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\r\n                    <MapPin className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0], 'address')}\r\n                      className=\"hidden\"\r\n                      id=\"address-proof\"\r\n                    />\r\n                    <label\r\n                      htmlFor=\"address-proof\"\r\n                      className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-800\"\r\n                    >\r\n                      {addressProof ? addressProof.name : 'Upload utility bill or bank statement'}\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 mt-2\">\r\n                      Must be dated within the last 3 months\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <Button\r\n                  onClick={() => handleSubmit('ADDRESS')}\r\n                  disabled={submitting || !addressProof}\r\n                  className=\"w-full\"\r\n                >\r\n                  {submitting ? 'Submitting...' : 'Submit Address Verification'}\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"selfie\" className=\"space-y-6\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Selfie with Document\r\n                  </label>\r\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\r\n                    <Camera className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0], 'selfie')}\r\n                      className=\"hidden\"\r\n                      id=\"selfie\"\r\n                    />\r\n                    <label\r\n                      htmlFor=\"selfie\"\r\n                      className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-800\"\r\n                    >\r\n                      {selfie ? selfie.name : 'Upload selfie with your document'}\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 mt-2\">\r\n                      Hold your document next to your face for verification\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <Button\r\n                  onClick={() => handleSubmit('SELFIE')}\r\n                  disabled={submitting || !selfie}\r\n                  className=\"w-full\"\r\n                >\r\n                  {submitting ? 'Submitting...' : 'Submit Selfie Verification'}\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Verification Status */}\r\n      {verifications.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Verification Status</CardTitle>\r\n            <CardDescription>Track the status of your submitted verifications.</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {verifications.map((verification) => (\r\n                <div\r\n                  key={verification.id}\r\n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    {getStatusIcon(verification.status)}\r\n                    <div>\r\n                      <h3 className=\"font-medium capitalize\">\r\n                        {verification.verification_type.toLowerCase().replace('_', ' ')}\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        Submitted {new Date(verification.created_at).toLocaleDateString()}\r\n                      </p>\r\n                      {verification.rejection_reason && (\r\n                        <p className=\"text-sm text-red-600 mt-1\">\r\n                          {verification.rejection_reason}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    {getStatusBadge(verification.status)}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {error && (\r\n        <div className=\"flex items-center space-x-2 text-red-600 bg-red-50 p-3 rounded-md\">\r\n          <AlertCircle className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">{error}</span>\r\n        </div>\r\n      )}\r\n\r\n      {success && (\r\n        <div className=\"flex items-center space-x-2 text-green-600 bg-green-50 p-3 rounded-md\">\r\n          <CheckCircle className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">{success}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\language-selector.tsx",["429"],[],"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { \r\n  DropdownMenu, \r\n  DropdownMenuContent, \r\n  DropdownMenuItem, \r\n  DropdownMenuTrigger \r\n} from '@ciuna/ui';\r\nimport { useLanguage } from '../contexts/i18n-context';\r\nimport { Globe, Check } from 'lucide-react';\r\n\r\ninterface LanguageSelectorProps {\r\n  variant?: 'button' | 'dropdown' | 'inline';\r\n  showFlag?: boolean;\r\n  showNativeName?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst FLAG_EMOJIS: { [key: string]: string } = {\r\n  'en': '🇺🇸',\r\n  'ru': '🇷🇺',\r\n  'de': '🇩🇪',\r\n  'fr': '🇫🇷',\r\n  'es': '🇪🇸',\r\n  'it': '🇮🇹',\r\n  'pt': '🇵🇹',\r\n  'zh': '🇨🇳',\r\n  'ja': '🇯🇵',\r\n  'ko': '🇰🇷',\r\n  'ar': '🇸🇦',\r\n  'hi': '🇮🇳',\r\n  'tr': '🇹🇷',\r\n  'pl': '🇵🇱',\r\n  'nl': '🇳🇱',\r\n};\r\n\r\nexport default function LanguageSelector({ \r\n  variant = 'dropdown',\r\n  showFlag = true,\r\n  showNativeName = true,\r\n  className = ''\r\n}: LanguageSelectorProps) {\r\n  const { currentLanguage, setCurrentLanguage, languages, isRTL } = useLanguage();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const currentLang = languages.find(lang => lang.code === currentLanguage);\r\n\r\n  const handleLanguageChange = (languageCode: string) => {\r\n    setCurrentLanguage(languageCode);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  if (variant === 'inline') {\r\n    return (\r\n      <div className={`flex flex-wrap gap-2 ${className}`}>\r\n        {languages.map((language) => (\r\n          <Button\r\n            key={language.code}\r\n            variant={currentLanguage === language.code ? 'default' : 'outline'}\r\n            size=\"sm\"\r\n            onClick={() => handleLanguageChange(language.code)}\r\n            className=\"flex items-center space-x-2\"\r\n          >\r\n            {showFlag && (\r\n              <span className=\"text-lg\">\r\n                {FLAG_EMOJIS[language.code] || '🌐'}\r\n              </span>\r\n            )}\r\n            <span>\r\n              {showNativeName ? language.native_name : language.name}\r\n            </span>\r\n            {currentLanguage === language.code && (\r\n              <Check className=\"h-3 w-3\" />\r\n            )}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (variant === 'button') {\r\n    return (\r\n      <Button\r\n        variant=\"outline\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className={`flex items-center space-x-2 ${className}`}\r\n      >\r\n        <Globe className=\"h-4 w-4\" />\r\n        {showFlag && currentLang && (\r\n          <span className=\"text-lg\">\r\n            {FLAG_EMOJIS[currentLang.code] || '🌐'}\r\n          </span>\r\n        )}\r\n        <span>\r\n          {currentLang ? (showNativeName ? currentLang.native_name : currentLang.name) : 'Language'}\r\n        </span>\r\n        {isRTL && <span className=\"text-xs\">←</span>}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className={`flex items-center space-x-2 ${className}`}\r\n        >\r\n          <Globe className=\"h-4 w-4\" />\r\n          {showFlag && currentLang && (\r\n            <span className=\"text-lg\">\r\n              {FLAG_EMOJIS[currentLang.code] || '🌐'}\r\n            </span>\r\n          )}\r\n          <span>\r\n            {currentLang ? (showNativeName ? currentLang.native_name : currentLang.name) : 'Language'}\r\n          </span>\r\n          {isRTL && <span className=\"text-xs\">←</span>}\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\r\n        {languages.map((language) => (\r\n          <DropdownMenuItem\r\n            key={language.code}\r\n            onClick={() => handleLanguageChange(language.code)}\r\n            className=\"flex items-center justify-between cursor-pointer\"\r\n          >\r\n            <div className=\"flex items-center space-x-2\">\r\n              {showFlag && (\r\n                <span className=\"text-lg\">\r\n                  {FLAG_EMOJIS[language.code] || '🌐'}\r\n                </span>\r\n              )}\r\n              <div className=\"flex flex-col\">\r\n                <span className=\"font-medium\">\r\n                  {showNativeName ? language.native_name : language.name}\r\n                </span>\r\n                {showNativeName && language.native_name !== language.name && (\r\n                  <span className=\"text-xs text-gray-500\">\r\n                    {language.name}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {currentLanguage === language.code && (\r\n              <Check className=\"h-4 w-4 text-blue-600\" />\r\n            )}\r\n          </DropdownMenuItem>\r\n        ))}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n\r\n// Compact language selector for mobile\r\nexport function CompactLanguageSelector({ className = '' }: { className?: string }) {\r\n  const { currentLanguage, setCurrentLanguage, languages } = useLanguage();\r\n  \r\n  const currentLang = languages.find(lang => lang.code === currentLanguage);\r\n\r\n  return (\r\n    <div className={`flex items-center space-x-1 ${className}`}>\r\n      {languages.slice(0, 5).map((language) => (\r\n        <Button\r\n          key={language.code}\r\n          variant={currentLanguage === language.code ? 'default' : 'ghost'}\r\n          size=\"sm\"\r\n          onClick={() => setCurrentLanguage(language.code)}\r\n          className=\"px-2 py-1 h-8\"\r\n        >\r\n          <span className=\"text-sm\">\r\n            {FLAG_EMOJIS[language.code] || '🌐'}\r\n          </span>\r\n        </Button>\r\n      ))}\r\n      {languages.length > 5 && (\r\n        <Badge variant=\"secondary\" className=\"text-xs\">\r\n          +{languages.length - 5}\r\n        </Badge>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\localized-text.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\navigation.tsx",["430","431"],[],"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\nimport { Button, Avatar, Badge } from '@ciuna/ui';\r\nimport { \r\n  Menu, \r\n  X, \r\n  Search, \r\n  ShoppingCart, \r\n  Heart, \r\n  MessageCircle, \r\n  User,\r\n  LogOut,\r\n  Settings,\r\n  Package,\r\n  Store,\r\n  Wrench,\r\n  BarChart3,\r\n  Calendar,\r\n  CreditCard,\r\n  Shield,\r\n  Eye\r\n} from 'lucide-react';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { cn } from '@/lib/utils';\r\nimport LanguageSelector from './language-selector';\r\nimport CurrencySelector from './currency-selector';\r\n\r\nexport function Navigation() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { user, profile, signOut } = useAuth();\r\n  const pathname = usePathname();\r\n\r\n  const navigation = [\r\n    { name: 'Home', href: '/', icon: null },\r\n    { name: 'Search', href: '/search', icon: Search },\r\n    { name: 'Listings', href: '/listings', icon: Package },\r\n    { name: 'Vendors', href: '/vendors', icon: Store },\r\n    { name: 'Services', href: '/services', icon: Wrench },\r\n  ];\r\n\r\n  const userNavigation = [\r\n    { name: 'Dashboard', href: '/dashboard', icon: BarChart3 },\r\n    { name: 'Orders', href: '/orders', icon: ShoppingCart },\r\n    { name: 'Inbox', href: '/inbox', icon: MessageCircle },\r\n    { name: 'Favorites', href: '/favorites', icon: Heart },\r\n    { name: 'Settings', href: '/settings', icon: User },\r\n    { name: 'Payments', href: '/payments', icon: CreditCard },\r\n    { name: 'Security', href: '/security', icon: Shield },\r\n    { name: 'Privacy', href: '/privacy', icon: Eye },\r\n  ];\r\n\r\n  const vendorNavigation = [\r\n    { name: 'Dashboard', href: '/vendor-dashboard', icon: BarChart3 },\r\n    { name: 'Products', href: '/vendor-dashboard/products', icon: Package },\r\n    { name: 'Orders', href: '/vendor-dashboard/orders', icon: ShoppingCart },\r\n  ];\r\n\r\n  const providerNavigation = [\r\n    { name: 'Dashboard', href: '/provider-dashboard', icon: BarChart3 },\r\n    { name: 'Services', href: '/provider-dashboard/services', icon: Wrench },\r\n    { name: 'Bookings', href: '/provider-dashboard/bookings', icon: Calendar },\r\n  ];\r\n\r\n  const isActive = (href: string) => {\r\n    if (href === '/') {\r\n      return pathname === '/';\r\n    }\r\n    return pathname.startsWith(href);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"bg-white shadow-lg sticky top-0 z-50\">\r\n      <div className=\"container mx-auto px-4\">\r\n        <div className=\"flex justify-between items-center h-16\">\r\n          {/* Logo */}\r\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\r\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-white font-bold text-sm\">C</span>\r\n            </div>\r\n            <span className=\"text-xl font-bold text-gray-900\">Ciuna</span>\r\n          </Link>\r\n\r\n          {/* Desktop Navigation */}\r\n          <div className=\"hidden md:flex items-center space-x-8\">\r\n            {navigation.map((item) => (\r\n              <Link\r\n                key={item.name}\r\n                href={item.href}\r\n                className={cn(\r\n                  'flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors',\r\n                  isActive(item.href)\r\n                    ? 'text-blue-600 bg-blue-50'\r\n                    : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\r\n                )}\r\n              >\r\n                {item.icon && <item.icon className=\"h-4 w-4\" />}\r\n                <span>{item.name}</span>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Search Bar */}\r\n          <div className=\"hidden lg:flex flex-1 max-w-md mx-8\">\r\n            <div className=\"relative w-full\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search products, services...\"\r\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right Side */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Language & Currency Selectors */}\r\n            <div className=\"hidden lg:flex items-center space-x-2\">\r\n              <LanguageSelector variant=\"button\" showFlag={true} showNativeName={false} />\r\n              <CurrencySelector variant=\"button\" showSymbol={true} />\r\n            </div>\r\n\r\n            {/* Mobile Search */}\r\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\r\n              <Search className=\"h-5 w-5\" />\r\n            </Button>\r\n\r\n            {user ? (\r\n              <>\r\n                {/* User Navigation */}\r\n                <div className=\"hidden md:flex items-center space-x-2\">\r\n                  {userNavigation.map((item) => (\r\n                    <Link\r\n                      key={item.name}\r\n                      href={item.href}\r\n                      className={cn(\r\n                        'flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors',\r\n                        isActive(item.href)\r\n                          ? 'text-blue-600 bg-blue-50'\r\n                          : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\r\n                      )}\r\n                    >\r\n                      <item.icon className=\"h-4 w-4\" />\r\n                      <span className=\"hidden lg:inline\">{item.name}</span>\r\n                    </Link>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Vendor/Provider Navigation */}\r\n                {profile?.role === 'VENDOR' && (\r\n                  <div className=\"hidden lg:flex items-center space-x-2\">\r\n                    {vendorNavigation.map((item) => (\r\n                      <Link\r\n                        key={item.name}\r\n                        href={item.href}\r\n                        className={cn(\r\n                          'flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors',\r\n                          isActive(item.href)\r\n                            ? 'text-green-600 bg-green-50'\r\n                            : 'text-gray-700 hover:text-green-600 hover:bg-gray-50'\r\n                        )}\r\n                      >\r\n                        <item.icon className=\"h-4 w-4\" />\r\n                        <span>{item.name}</span>\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n\r\n                {profile?.role === 'USER' && profile?.verified_expat && (\r\n                  <div className=\"hidden lg:flex items-center space-x-2\">\r\n                    {providerNavigation.map((item) => (\r\n                      <Link\r\n                        key={item.name}\r\n                        href={item.href}\r\n                        className={cn(\r\n                          'flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors',\r\n                          isActive(item.href)\r\n                            ? 'text-purple-600 bg-purple-50'\r\n                            : 'text-gray-700 hover:text-purple-600 hover:bg-gray-50'\r\n                        )}\r\n                      >\r\n                        <item.icon className=\"h-4 w-4\" />\r\n                        <span>{item.name}</span>\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n\r\n                {/* User Menu */}\r\n                <div className=\"relative\">\r\n                  <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\r\n                    <Avatar\r\n                      src={profile?.avatar_url || undefined}\r\n                      fallback={profile?.email?.charAt(0) || 'U'}\r\n                      size=\"sm\"\r\n                    />\r\n                  </Button>\r\n                </div>\r\n\r\n                {/* Sell Button */}\r\n                <Button asChild>\r\n                  <Link href=\"/sell/new\">\r\n                    Sell\r\n                  </Link>\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button variant=\"ghost\" asChild>\r\n                  <Link href=\"/auth/signin\">Sign In</Link>\r\n                </Button>\r\n                <Button asChild>\r\n                  <Link href=\"/auth/signup\">Sign Up</Link>\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Mobile Menu Button */}\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              className=\"md:hidden\"\r\n              onClick={() => setIsOpen(!isOpen)}\r\n            >\r\n              {isOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Menu */}\r\n        {isOpen && (\r\n          <div className=\"md:hidden border-t border-gray-200 py-4\">\r\n            <div className=\"space-y-2\">\r\n              {navigation.map((item) => (\r\n                <Link\r\n                  key={item.name}\r\n                  href={item.href}\r\n                  className={cn(\r\n                    'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium',\r\n                    isActive(item.href)\r\n                      ? 'text-blue-600 bg-blue-50'\r\n                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\r\n                  )}\r\n                  onClick={() => setIsOpen(false)}\r\n                >\r\n                  {item.icon && <item.icon className=\"h-4 w-4\" />}\r\n                  <span>{item.name}</span>\r\n                </Link>\r\n              ))}\r\n              \r\n              {user && (\r\n                <>\r\n                  <div className=\"border-t border-gray-200 pt-2 mt-2\">\r\n                    {userNavigation.map((item) => (\r\n                      <Link\r\n                        key={item.name}\r\n                        href={item.href}\r\n                        className={cn(\r\n                          'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium',\r\n                          isActive(item.href)\r\n                            ? 'text-blue-600 bg-blue-50'\r\n                            : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\r\n                        )}\r\n                        onClick={() => setIsOpen(false)}\r\n                      >\r\n                        <item.icon className=\"h-4 w-4\" />\r\n                        <span>{item.name}</span>\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                  <div className=\"border-t border-gray-200 pt-2 mt-2\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      className=\"w-full justify-start\"\r\n                      onClick={() => {\r\n                        signOut();\r\n                        setIsOpen(false);\r\n                      }}\r\n                    >\r\n                      <LogOut className=\"h-4 w-4 mr-2\" />\r\n                      Sign Out\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\notification-center.tsx",["432","433"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\nimport { Button } from '@ciuna/ui';\nimport { Badge } from '@ciuna/ui';\nimport { Avatar } from '@ciuna/ui';\nimport { NotificationType, NotificationStatus } from '@ciuna/types';\n\ninterface Notification {\n  id: string;\n  type: NotificationType;\n  channel: string;\n  status: NotificationStatus;\n  subject?: string;\n  title: string;\n  content: string;\n  data: Record<string, any>;\n  sent_at?: string;\n  read_at?: string;\n  created_at: string;\n}\n\ninterface NotificationCenterProps {\n  userId: string;\n}\n\nconst NOTIFICATION_ICONS: { [key in NotificationType]: string } = {\n  ORDER_UPDATE: '📦',\n  MESSAGE: '💬',\n  BOOKING_CONFIRMATION: '📅',\n  DEAL_CLOSED: '✅',\n  ADMIN_ALERT: '⚠️',\n  PROMOTION: '🎉',\n  PAYMENT_RECEIVED: '💰',\n  PAYMENT_SENT: '💸',\n  SHIPPING_UPDATE: '🚚',\n  REVIEW_REQUEST: '⭐',\n  LISTING_APPROVED: '✅',\n  LISTING_REJECTED: '❌',\n  VENDOR_APPROVED: '🏪',\n  VENDOR_REJECTED: '❌',\n  SERVICE_BOOKING: '🔧',\n  GROUP_BUY_UPDATE: '👥',\n  SECURITY_ALERT: '🔒',\n  WELCOME: '👋',\n  PASSWORD_RESET: '🔑',\n  EMAIL_VERIFICATION: '📧'\n};\n\nconst NOTIFICATION_COLORS: { [key in NotificationType]: string } = {\n  ORDER_UPDATE: 'bg-blue-100 text-blue-800',\n  MESSAGE: 'bg-green-100 text-green-800',\n  BOOKING_CONFIRMATION: 'bg-purple-100 text-purple-800',\n  DEAL_CLOSED: 'bg-emerald-100 text-emerald-800',\n  ADMIN_ALERT: 'bg-red-100 text-red-800',\n  PROMOTION: 'bg-yellow-100 text-yellow-800',\n  PAYMENT_RECEIVED: 'bg-green-100 text-green-800',\n  PAYMENT_SENT: 'bg-blue-100 text-blue-800',\n  SHIPPING_UPDATE: 'bg-orange-100 text-orange-800',\n  REVIEW_REQUEST: 'bg-yellow-100 text-yellow-800',\n  LISTING_APPROVED: 'bg-green-100 text-green-800',\n  LISTING_REJECTED: 'bg-red-100 text-red-800',\n  VENDOR_APPROVED: 'bg-green-100 text-green-800',\n  VENDOR_REJECTED: 'bg-red-100 text-red-800',\n  SERVICE_BOOKING: 'bg-purple-100 text-purple-800',\n  GROUP_BUY_UPDATE: 'bg-indigo-100 text-indigo-800',\n  SECURITY_ALERT: 'bg-red-100 text-red-800',\n  WELCOME: 'bg-blue-100 text-blue-800',\n  PASSWORD_RESET: 'bg-orange-100 text-orange-800',\n  EMAIL_VERIFICATION: 'bg-blue-100 text-blue-800'\n};\n\nexport default function NotificationCenter({ userId }: NotificationCenterProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<'all' | 'unread'>('all');\n\n  useEffect(() => {\n    loadNotifications();\n  }, [userId, filter]);\n\n  const loadNotifications = async () => {\n    try {\n      const response = await fetch(\n        `/api/user/notifications?userId=${userId}&unreadOnly=${filter === 'unread'}`\n      );\n      if (response.ok) {\n        const data = await response.json();\n        setNotifications(data);\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId: string) => {\n    try {\n      const response = await fetch(`/api/user/notifications/${notificationId}/read`, {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        setNotifications(prev =>\n          prev.map(notif =>\n            notif.id === notificationId\n              ? { ...notif, read_at: new Date().toISOString() }\n              : notif\n          )\n        );\n      }\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const unreadNotifications = notifications.filter(n => !n.read_at);\n      await Promise.all(\n        unreadNotifications.map(notif => markAsRead(notif.id))\n      );\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n    if (diffInSeconds < 60) return 'Just now';\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  const unreadCount = notifications.filter(n => !n.read_at).length;\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Notifications</CardTitle>\n          <CardDescription>Loading your notifications...</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Notifications</CardTitle>\n            <CardDescription>\n              {filter === 'all' \n                ? `${notifications.length} total notifications`\n                : `${unreadCount} unread notifications`\n              }\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant={filter === 'all' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('all')}\n            >\n              All\n            </Button>\n            <Button\n              variant={filter === 'unread' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('unread')}\n            >\n              Unread\n              {unreadCount > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </Button>\n            {unreadCount > 0 && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={markAllAsRead}\n              >\n                Mark all read\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {notifications.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">🔔</div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {filter === 'unread' ? 'No unread notifications' : 'No notifications yet'}\n            </h3>\n            <p className=\"text-gray-600\">\n              {filter === 'unread' \n                ? 'You\\'re all caught up!'\n                : 'You\\'ll see notifications here when you receive them.'\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`flex items-start space-x-3 p-4 rounded-lg border transition-colors ${\n                  notification.read_at \n                    ? 'bg-gray-50 border-gray-200' \n                    : 'bg-white border-blue-200 shadow-sm'\n                }`}\n              >\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-lg\">\n                    {NOTIFICATION_ICONS[notification.type]}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"text-sm font-medium text-gray-900\">\n                          {notification.title}\n                        </h4>\n                        <Badge \n                          variant=\"secondary\" \n                          className={`text-xs ${NOTIFICATION_COLORS[notification.type]}`}\n                        >\n                          {notification.type.replace('_', ' ')}\n                        </Badge>\n                        {!notification.read_at && (\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {notification.content}\n                      </p>\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                        <span>{formatTimeAgo(notification.created_at)}</span>\n                        <span className=\"capitalize\">{notification.channel.toLowerCase()}</span>\n                        {notification.status && (\n                          <span className=\"capitalize\">{notification.status.toLowerCase()}</span>\n                        )}\n                      </div>\n                    </div>\n                    {!notification.read_at && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => markAsRead(notification.id)}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        Mark as read\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\notification-settings.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\payment-method-selector.tsx",["434","435"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\n// import { RadioGroup, RadioGroupItem } from '@ciuna/ui'; // Not available\r\n// import { Label } from '@ciuna/ui'; // Not available\r\nimport { PaymentService, PaymentProvider, PaymentMethod } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { useI18n } from '../contexts/i18n-context';\r\nimport { \r\n  CreditCard, \r\n  Smartphone, \r\n  Banknote, \r\n  Building2, \r\n  Plus,\r\n  Check,\r\n  AlertCircle\r\n} from 'lucide-react';\r\n\r\ninterface PaymentMethodSelectorProps {\r\n  onSelect: (paymentMethod: PaymentMethod | null, provider: PaymentProvider | null) => void;\r\n  selectedMethodId?: string;\r\n  amount: number;\r\n  currency: string;\r\n  showAddNew?: boolean;\r\n}\r\n\r\nconst PROVIDER_ICONS: { [key: string]: React.ComponentType<any> } = {\r\n  'YOOMONEY': Smartphone,\r\n  'STRIPE': CreditCard,\r\n  'CASH': Banknote,\r\n  'BANK_TRANSFER': Building2,\r\n};\r\n\r\nconst METHOD_ICONS: { [key: string]: React.ComponentType<any> } = {\r\n  'CARD': CreditCard,\r\n  'BANK_ACCOUNT': Building2,\r\n  'WALLET': Smartphone,\r\n  'CASH': Banknote,\r\n  'CRYPTO': CreditCard,\r\n};\r\n\r\nexport default function PaymentMethodSelector({\r\n  onSelect,\r\n  selectedMethodId,\r\n  amount,\r\n  currency,\r\n  showAddNew = true\r\n}: PaymentMethodSelectorProps) {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [providers, setProviders] = useState<PaymentProvider[]>([]);\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedMethod, setSelectedMethod] = useState<string>(selectedMethodId || '');\r\n  const [selectedProvider, setSelectedProvider] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadPaymentData();\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    // Notify parent of selection\r\n    const method = paymentMethods.find(m => m.id === selectedMethod);\r\n    const provider = providers.find(p => p.id === selectedProvider);\r\n    onSelect(method || null, provider || null);\r\n  }, [selectedMethod, selectedProvider, paymentMethods, providers, onSelect]);\r\n\r\n  const loadPaymentData = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [providersData, methodsData] = await Promise.all([\r\n        PaymentService.getProviders(),\r\n        PaymentService.getPaymentMethods(user.id)\r\n      ]);\r\n\r\n      setProviders(providersData);\r\n      setPaymentMethods(methodsData);\r\n\r\n      // Set default selections\r\n      if (methodsData.length > 0 && !selectedMethodId) {\r\n        const defaultMethod = methodsData.find(m => m.is_default) || methodsData[0];\r\n        setSelectedMethod(defaultMethod.id);\r\n        setSelectedProvider(defaultMethod.provider_id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading payment data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMethodSelect = (methodId: string) => {\r\n    setSelectedMethod(methodId);\r\n    const method = paymentMethods.find(m => m.id === methodId);\r\n    if (method) {\r\n      setSelectedProvider(method.provider_id);\r\n    }\r\n  };\r\n\r\n  const handleAddNewMethod = () => {\r\n    // This would open a modal or navigate to add payment method page\r\n    console.log('Add new payment method');\r\n  };\r\n\r\n  const getProviderIcon = (providerType: string) => {\r\n    const IconComponent = PROVIDER_ICONS[providerType] || CreditCard;\r\n    return <IconComponent className=\"h-5 w-5\" />;\r\n  };\r\n\r\n  const getMethodIcon = (methodType: string) => {\r\n    const IconComponent = METHOD_ICONS[methodType] || CreditCard;\r\n    return <IconComponent className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getProviderName = (providerId: string) => {\r\n    const provider = providers.find(p => p.id === providerId);\r\n    return provider?.display_name || 'Unknown Provider';\r\n  };\r\n\r\n  const isProviderSupported = (provider: PaymentProvider) => {\r\n    return provider.supported_currencies.includes(currency) && provider.is_active;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Payment Method</CardTitle>\r\n          <CardDescription>Loading payment methods...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-4\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Payment Method</CardTitle>\r\n        <CardDescription>\r\n          Choose how you want to pay {formatPrice(amount, currency)}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {paymentMethods.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <CreditCard className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              No payment methods\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Add a payment method to complete your purchase.\r\n            </p>\r\n            {showAddNew && (\r\n              <Button onClick={handleAddNewMethod}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add Payment Method\r\n              </Button>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              {paymentMethods.map((method) => {\r\n                const provider = providers.find(p => p.id === method.provider_id);\r\n                const isSupported = provider ? isProviderSupported(provider) : false;\r\n                \r\n                return (\r\n                  <div key={method.id} className=\"relative\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      value={method.id}\r\n                      id={method.id}\r\n                      checked={selectedMethod === method.id}\r\n                      onChange={() => handleMethodSelect(method.id)}\r\n                      className=\"peer sr-only\"\r\n                    />\r\n                    <label\r\n                      htmlFor={method.id}\r\n                      className={`flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${\r\n                        selectedMethod === method.id\r\n                          ? 'border-blue-500 bg-blue-50'\r\n                          : 'border-gray-200 hover:border-gray-300'\r\n                      } ${!isSupported ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                    >\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {getMethodIcon(method.method_type)}\r\n                          {getProviderIcon(provider?.provider_type || '')}\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"font-medium\">\r\n                              {method.method_type === 'CARD' ? 'Card' :\r\n                               method.method_type === 'BANK_ACCOUNT' ? 'Bank Account' :\r\n                               method.method_type === 'WALLET' ? 'Digital Wallet' :\r\n                               method.method_type === 'CASH' ? 'Cash' :\r\n                               method.method_type === 'CRYPTO' ? 'Cryptocurrency' :\r\n                               method.method_type}\r\n                            </span>\r\n                            {method.is_default && (\r\n                              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                                Default\r\n                              </Badge>\r\n                            )}\r\n                            {method.is_verified && (\r\n                              <Check className=\"h-4 w-4 text-green-600\" />\r\n                            )}\r\n                          </div>\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {getProviderName(method.provider_id)}\r\n                          </p>\r\n                          {method.metadata?.last4 && (\r\n                            <p className=\"text-xs text-gray-500\">\r\n                              •••• {method.metadata.last4}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        {!isSupported && (\r\n                          <div className=\"flex items-center text-orange-600\">\r\n                            <AlertCircle className=\"h-4 w-4 mr-1\" />\r\n                            <span className=\"text-xs\">Not supported</span>\r\n                          </div>\r\n                        )}\r\n                        {selectedMethod === method.id && (\r\n                          <div className=\"w-4 h-4 rounded-full bg-blue-500 flex items-center justify-center\">\r\n                            <Check className=\"h-3 w-3 text-white\" />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {showAddNew && (\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleAddNewMethod}\r\n                className=\"w-full\"\r\n              >\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add New Payment Method\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Available Providers */}\r\n        {providers.length > 0 && (\r\n          <div className=\"mt-6 pt-6 border-t\">\r\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\r\n              Supported Payment Providers\r\n            </h4>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {providers\r\n                .filter(provider => isProviderSupported(provider))\r\n                .map((provider) => (\r\n                  <div\r\n                    key={provider.id}\r\n                    className=\"flex items-center space-x-2 px-3 py-1 bg-gray-100 rounded-full text-sm\"\r\n                  >\r\n                    {getProviderIcon(provider.provider_type)}\r\n                    <span>{provider.display_name}</span>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\payment-processor.tsx",["436","437","438","439","440"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { PaymentService, PaymentTransaction, PaymentProvider } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { useI18n } from '../contexts/i18n-context';\r\nimport PaymentMethodSelector from './payment-method-selector';\r\nimport { \r\n  CreditCard, \r\n  CheckCircle, \r\n  XCircle, \r\n  Clock, \r\n  AlertTriangle,\r\n  ExternalLink,\r\n  RefreshCw\r\n} from 'lucide-react';\r\n\r\ninterface PaymentProcessorProps {\r\n  orderId: string;\r\n  amount: number;\r\n  currency: string;\r\n  onSuccess: (transaction: PaymentTransaction) => void;\r\n  onError: (error: string) => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\nexport default function PaymentProcessor({\r\n  orderId,\r\n  amount,\r\n  currency,\r\n  onSuccess,\r\n  onError,\r\n  onCancel\r\n}: PaymentProcessorProps) {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [step, setStep] = useState<'select' | 'processing' | 'redirect' | 'success' | 'error'>('select');\r\n  const [selectedMethod, setSelectedMethod] = useState<any>(null);\r\n  const [selectedProvider, setSelectedProvider] = useState<any>(null);\r\n  const [transaction, setTransaction] = useState<PaymentTransaction | null>(null);\r\n  const [paymentUrl, setPaymentUrl] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [polling, setPolling] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (transaction && step === 'processing') {\r\n      // Start polling for transaction status\r\n      startStatusPolling();\r\n    }\r\n  }, [transaction, step]);\r\n\r\n  const startStatusPolling = () => {\r\n    if (!transaction) return;\r\n\r\n    setPolling(true);\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        const updatedTransaction = await PaymentService.getTransactionStatus(transaction.id);\r\n        if (updatedTransaction) {\r\n          setTransaction(updatedTransaction);\r\n          \r\n          if (updatedTransaction.status === 'COMPLETED') {\r\n            setStep('success');\r\n            onSuccess(updatedTransaction);\r\n            clearInterval(interval);\r\n            setPolling(false);\r\n          } else if (updatedTransaction.status === 'FAILED' || updatedTransaction.status === 'CANCELLED') {\r\n            setStep('error');\r\n            setError(updatedTransaction.failure_reason || 'Payment failed');\r\n            onError(updatedTransaction.failure_reason || 'Payment failed');\r\n            clearInterval(interval);\r\n            setPolling(false);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error polling transaction status:', err);\r\n      }\r\n    }, 3000); // Poll every 3 seconds\r\n\r\n    // Stop polling after 5 minutes\r\n    setTimeout(() => {\r\n      clearInterval(interval);\r\n      setPolling(false);\r\n    }, 300000);\r\n  };\r\n\r\n  const handleMethodSelect = (method: any, provider: any) => {\r\n    setSelectedMethod(method);\r\n    setSelectedProvider(provider);\r\n  };\r\n\r\n  const handleProcessPayment = async () => {\r\n    if (!user || !selectedMethod || !selectedProvider) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await PaymentService.createPayment(\r\n        user.id,\r\n        orderId,\r\n        selectedProvider.id,\r\n        selectedMethod.id,\r\n        amount,\r\n        currency,\r\n        {\r\n          orderId,\r\n          amount,\r\n          currency,\r\n        }\r\n      );\r\n\r\n      if (result.success && result.transactionId) {\r\n        // Get the created transaction\r\n        const createdTransaction = await PaymentService.getTransactionStatus(result.transactionId);\r\n        if (createdTransaction) {\r\n          setTransaction(createdTransaction);\r\n          \r\n          if (result.paymentUrl) {\r\n            setPaymentUrl(result.paymentUrl);\r\n            setStep('redirect');\r\n          } else {\r\n            setStep('processing');\r\n          }\r\n        } else {\r\n          throw new Error('Failed to retrieve transaction details');\r\n        }\r\n      } else {\r\n        throw new Error('Failed to create payment');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error processing payment:', err);\r\n      setError(err instanceof Error ? err.message : 'Payment processing failed');\r\n      setStep('error');\r\n      onError(err instanceof Error ? err.message : 'Payment processing failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleExternalPayment = () => {\r\n    if (paymentUrl) {\r\n      window.open(paymentUrl, '_blank');\r\n    }\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    setStep('select');\r\n    setError(null);\r\n    setTransaction(null);\r\n    setPaymentUrl('');\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\r\n      case 'FAILED':\r\n      case 'CANCELLED':\r\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\r\n      case 'PROCESSING':\r\n        return <RefreshCw className=\"h-5 w-5 text-blue-600 animate-spin\" />;\r\n      default:\r\n        return <Clock className=\"h-5 w-5 text-yellow-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'COMPLETED':\r\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\r\n      case 'FAILED':\r\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\r\n      case 'CANCELLED':\r\n        return <Badge className=\"bg-gray-100 text-gray-800\">Cancelled</Badge>;\r\n      case 'PROCESSING':\r\n        return <Badge className=\"bg-blue-100 text-blue-800\">Processing</Badge>;\r\n      case 'PENDING':\r\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\r\n      default:\r\n        return <Badge className=\"bg-gray-100 text-gray-800\">{status}</Badge>;\r\n    }\r\n  };\r\n\r\n  if (step === 'select') {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Complete Payment</CardTitle>\r\n            <CardDescription>\r\n              Pay {formatPrice(amount, currency)} for your order\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <PaymentMethodSelector\r\n              onSelect={handleMethodSelect}\r\n              amount={amount}\r\n              currency={currency}\r\n              showAddNew={true}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <div className=\"flex justify-end space-x-4\">\r\n          {onCancel && (\r\n            <Button variant=\"outline\" onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button\r\n            onClick={handleProcessPayment}\r\n            disabled={!selectedMethod || loading}\r\n            className=\"min-w-[120px]\"\r\n          >\r\n            {loading ? 'Processing...' : 'Pay Now'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (step === 'redirect') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <ExternalLink className=\"h-5 w-5 mr-2\" />\r\n            Complete Payment\r\n          </CardTitle>\r\n          <CardDescription>\r\n            You will be redirected to complete your payment securely.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"text-center py-6\">\r\n            <CreditCard className=\"h-12 w-12 mx-auto text-blue-600 mb-4\" />\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              Redirecting to Payment\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              You will be redirected to {selectedProvider?.display_name} to complete your payment.\r\n            </p>\r\n            <Button onClick={handleExternalPayment} className=\"mb-4\">\r\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n              Complete Payment\r\n            </Button>\r\n            <p className=\"text-sm text-gray-500\">\r\n              Don't see the redirect? Click the button above to open the payment page.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"flex justify-center space-x-4\">\r\n            <Button variant=\"outline\" onClick={handleRetry}>\r\n              Back to Payment Methods\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'processing') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <RefreshCw className=\"h-5 w-5 mr-2 animate-spin\" />\r\n            Processing Payment\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Please wait while we process your payment.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"text-center py-6\">\r\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4\">\r\n              <RefreshCw className=\"h-8 w-8 text-blue-600 animate-spin\" />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              Processing Your Payment\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              This may take a few moments. Please don't close this page.\r\n            </p>\r\n            {transaction && (\r\n              <div className=\"flex items-center justify-center space-x-2\">\r\n                {getStatusIcon(transaction.status)}\r\n                {getStatusBadge(transaction.status)}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {polling && (\r\n            <div className=\"text-center\">\r\n              <p className=\"text-sm text-gray-500\">\r\n                Checking payment status...\r\n              </p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'success') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center text-green-600\">\r\n            <CheckCircle className=\"h-5 w-5 mr-2\" />\r\n            Payment Successful\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Your payment has been processed successfully.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"text-center py-6\">\r\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4\">\r\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              Payment Completed\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              You have successfully paid {formatPrice(amount, currency)}.\r\n            </p>\r\n            {transaction && (\r\n              <div className=\"bg-gray-50 rounded-lg p-4 text-left\">\r\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                  <div>\r\n                    <span className=\"font-medium\">Transaction ID:</span>\r\n                    <p className=\"text-gray-600 font-mono\">{transaction.id}</p>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-medium\">Amount:</span>\r\n                    <p className=\"text-gray-600\">{formatPrice(transaction.amount, transaction.currency_code)}</p>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-medium\">Status:</span>\r\n                    <p className=\"text-gray-600\">{transaction.status}</p>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-medium\">Processed:</span>\r\n                    <p className=\"text-gray-600\">\r\n                      {transaction.processed_at ? \r\n                        new Date(transaction.processed_at).toLocaleString() : \r\n                        'N/A'\r\n                      }\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'error') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center text-red-600\">\r\n            <XCircle className=\"h-5 w-5 mr-2\" />\r\n            Payment Failed\r\n          </CardTitle>\r\n          <CardDescription>\r\n            There was an error processing your payment.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"text-center py-6\">\r\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4\">\r\n              <XCircle className=\"h-8 w-8 text-red-600\" />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              Payment Failed\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              {error || 'An unexpected error occurred while processing your payment.'}\r\n            </p>\r\n            {transaction && (\r\n              <div className=\"bg-red-50 rounded-lg p-4 text-left\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\r\n                  <span className=\"font-medium text-red-800\">Error Details</span>\r\n                </div>\r\n                <p className=\"text-sm text-red-700\">\r\n                  {transaction.failure_reason || 'Unknown error occurred'}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex justify-center space-x-4\">\r\n            <Button variant=\"outline\" onClick={handleRetry}>\r\n              Try Again\r\n            </Button>\r\n            {onCancel && (\r\n              <Button variant=\"outline\" onClick={onCancel}>\r\n                Cancel\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\search-results.tsx",["441","442","443","444","445","446","447","448","449","450"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { SearchService, SearchResult } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { useI18n } from '../contexts/i18n-context';\r\nimport { \r\n  Package, \r\n  Store, \r\n  Wrench, \r\n  ShoppingCart,\r\n  Star,\r\n  MapPin,\r\n  Clock,\r\n  Eye,\r\n  Heart,\r\n  Share2,\r\n  Filter,\r\n  SortAsc,\r\n  Grid,\r\n  List\r\n} from 'lucide-react';\r\n\r\ninterface SearchResultsProps {\r\n  results: SearchResult[];\r\n  loading: boolean;\r\n  onResultClick?: (result: SearchResult) => void;\r\n  showFilters?: boolean;\r\n  showSorting?: boolean;\r\n  showViewToggle?: boolean;\r\n}\r\n\r\nconst CONTENT_TYPE_ICONS = {\r\n  'LISTING': Package,\r\n  'VENDOR': Store,\r\n  'SERVICE': Wrench,\r\n  'PRODUCT': ShoppingCart,\r\n};\r\n\r\nconst CONTENT_TYPE_LABELS = {\r\n  'LISTING': 'Listing',\r\n  'VENDOR': 'Vendor',\r\n  'SERVICE': 'Service',\r\n  'PRODUCT': 'Product',\r\n};\r\n\r\nexport default function SearchResults({\r\n  results,\r\n  loading,\r\n  onResultClick,\r\n  showFilters = true,\r\n  showSorting = true,\r\n  showViewToggle = true\r\n}: SearchResultsProps) {\r\n  const { user } = useAuth();\r\n  const { formatPrice } = useI18n();\r\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\r\n  const [sortBy, setSortBy] = useState<'relevance' | 'price' | 'date' | 'rating'>('relevance');\r\n  const [sortedResults, setSortedResults] = useState<SearchResult[]>(results);\r\n\r\n  useEffect(() => {\r\n    setSortedResults(results);\r\n  }, [results]);\r\n\r\n  useEffect(() => {\r\n    if (results.length === 0) return;\r\n\r\n    const sorted = [...results].sort((a, b) => {\r\n      switch (sortBy) {\r\n        case 'price':\r\n          const priceA = a.metadata.price || 0;\r\n          const priceB = b.metadata.price || 0;\r\n          return priceA - priceB;\r\n        case 'date':\r\n          const dateA = new Date(a.metadata.created_at || 0).getTime();\r\n          const dateB = new Date(b.metadata.created_at || 0).getTime();\r\n          return dateB - dateA;\r\n        case 'rating':\r\n          const ratingA = a.metadata.rating || 0;\r\n          const ratingB = b.metadata.rating || 0;\r\n          return ratingB - ratingA;\r\n        case 'relevance':\r\n        default:\r\n          return b.score - a.score;\r\n      }\r\n    });\r\n\r\n    setSortedResults(sorted);\r\n  }, [sortBy, results]);\r\n\r\n  const handleResultClick = async (result: SearchResult) => {\r\n    if (onResultClick) {\r\n      onResultClick(result);\r\n    }\r\n\r\n    // Track click for analytics\r\n    if (user) {\r\n      try {\r\n        // In a real implementation, you would track the click with the query ID\r\n        console.log('Tracking click for result:', result.id);\r\n      } catch (error) {\r\n        console.error('Error tracking click:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFavorite = async (result: SearchResult) => {\r\n    // In a real implementation, you would add to favorites\r\n    console.log('Adding to favorites:', result.id);\r\n  };\r\n\r\n  const handleShare = async (result: SearchResult) => {\r\n    // In a real implementation, you would share the result\r\n    console.log('Sharing result:', result.id);\r\n  };\r\n\r\n  const getContentTypeIcon = (contentType: string) => {\r\n    const IconComponent = CONTENT_TYPE_ICONS[contentType as keyof typeof CONTENT_TYPE_ICONS] || Package;\r\n    return <IconComponent className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getContentTypeLabel = (contentType: string) => {\r\n    return CONTENT_TYPE_LABELS[contentType as keyof typeof CONTENT_TYPE_LABELS] || contentType;\r\n  };\r\n\r\n  const renderResultCard = (result: SearchResult) => {\r\n    const IconComponent = CONTENT_TYPE_ICONS[result.content_type as keyof typeof CONTENT_TYPE_ICONS] || Package;\r\n\r\n    return (\r\n      <Card\r\n        key={result.id}\r\n        className=\"cursor-pointer hover:shadow-md transition-shadow\"\r\n        onClick={() => handleResultClick(result)}\r\n      >\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-start space-x-3\">\r\n            <div className=\"flex-shrink-0\">\r\n              <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center\">\r\n                <IconComponent className=\"h-6 w-6 text-gray-600\" />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex-1 min-w-0\">\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center space-x-2 mb-1\">\r\n                    <h3 className=\"text-lg font-medium text-gray-900 truncate\">\r\n                      {result.title}\r\n                    </h3>\r\n                    <Badge variant=\"secondary\" className=\"text-xs\">\r\n                      {getContentTypeLabel(result.content_type)}\r\n                    </Badge>\r\n                  </div>\r\n                  \r\n                  <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\r\n                    {result.description}\r\n                  </p>\r\n                  \r\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\r\n                    {result.metadata.price && (\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {formatPrice(result.metadata.price, result.metadata.currency || 'RUB')}\r\n                      </span>\r\n                    )}\r\n                    \r\n                    {result.metadata.location && (\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <MapPin className=\"h-3 w-3\" />\r\n                        <span>{result.metadata.location}</span>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {result.metadata.rating && (\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Star className=\"h-3 w-3 text-yellow-500\" />\r\n                        <span>{result.metadata.rating}</span>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {result.metadata.created_at && (\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Clock className=\"h-3 w-3\" />\r\n                        <span>{new Date(result.metadata.created_at).toLocaleDateString()}</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center space-x-1 ml-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      handleFavorite(result);\r\n                    }}\r\n                    className=\"h-8 w-8 p-0\"\r\n                  >\r\n                    <Heart className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      handleShare(result);\r\n                    }}\r\n                    className=\"h-8 w-8 p-0\"\r\n                  >\r\n                    <Share2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const renderGridView = () => (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n      {sortedResults.map(renderResultCard)}\r\n    </div>\r\n  );\r\n\r\n  const renderListView = () => (\r\n    <div className=\"space-y-4\">\r\n      {sortedResults.map(renderResultCard)}\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {[...Array(6)].map((_, i) => (\r\n          <Card key={i} className=\"animate-pulse\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-start space-x-3\">\r\n                <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\r\n                <div className=\"flex-1 space-y-2\">\r\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (results.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"text-center py-12\">\r\n          <Package className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n            No results found\r\n          </h3>\r\n          <p className=\"text-gray-600 mb-4\">\r\n            Try adjusting your search terms or filters to find what you're looking for.\r\n          </p>\r\n          <Button variant=\"outline\">\r\n            Clear Filters\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Results Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-lg font-medium text-gray-900\">\r\n            {results.length} result{results.length !== 1 ? 's' : ''} found\r\n          </h2>\r\n          <p className=\"text-sm text-gray-600\">\r\n            Showing results sorted by {sortBy}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-2\">\r\n          {/* Sort Options */}\r\n          {showSorting && (\r\n            <select\r\n              value={sortBy}\r\n              onChange={(e) => setSortBy(e.target.value as any)}\r\n              className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\r\n            >\r\n              <option value=\"relevance\">Relevance</option>\r\n              <option value=\"price\">Price</option>\r\n              <option value=\"date\">Date</option>\r\n              <option value=\"rating\">Rating</option>\r\n            </select>\r\n          )}\r\n          \r\n          {/* View Toggle */}\r\n          {showViewToggle && (\r\n            <div className=\"flex border border-gray-300 rounded-md\">\r\n              <Button\r\n                variant={viewMode === 'grid' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setViewMode('grid')}\r\n                className=\"rounded-r-none\"\r\n              >\r\n                <Grid className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant={viewMode === 'list' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setViewMode('list')}\r\n                className=\"rounded-l-none\"\r\n              >\r\n                <List className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Results */}\r\n      {viewMode === 'grid' ? renderGridView() : renderListView()}\r\n\r\n      {/* Load More */}\r\n      {results.length >= 20 && (\r\n        <div className=\"text-center\">\r\n          <Button variant=\"outline\" size=\"lg\">\r\n            Load More Results\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\stats.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\testimonials.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\components\\two-factor-setup.tsx",["451","452","453","454","455","456"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ciuna/ui';\r\nimport { Button } from '@ciuna/ui';\r\nimport { Input } from '@ciuna/ui';\r\nimport { Badge } from '@ciuna/ui';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ciuna/ui';\r\nimport { SecurityService } from '@ciuna/sb';\r\nimport { useAuth } from '../lib/auth-context';\r\nimport { Shield, Smartphone, Mail, Key, CheckCircle, AlertCircle } from 'lucide-react';\r\nimport QRCode from 'qrcode';\r\n\r\ninterface TwoFactorSetupProps {\r\n  onComplete?: () => void;\r\n}\r\n\r\nexport default function TwoFactorSetup({ onComplete }: TwoFactorSetupProps) {\r\n  const { user } = useAuth();\r\n  const [activeMethod, setActiveMethod] = useState<'SMS' | 'TOTP' | 'EMAIL'>('TOTP');\r\n  const [step, setStep] = useState<'select' | 'setup' | 'verify' | 'complete'>('select');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  // Setup data\r\n  const [qrCode, setQrCode] = useState<string>('');\r\n  const [backupCodes, setBackupCodes] = useState<string[]>([]);\r\n  const [secret, setSecret] = useState<string>('');\r\n  \r\n  // Verification data\r\n  const [verificationCode, setVerificationCode] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (user?.email) {\r\n      setEmail(user.email);\r\n    }\r\n  }, [user]);\r\n\r\n  const handleMethodSelect = async (method: 'SMS' | 'TOTP' | 'EMAIL') => {\r\n    if (!user) return;\r\n    \r\n    setActiveMethod(method);\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let secret: string | undefined;\r\n      let phoneNumber: string | undefined;\r\n      let emailAddress: string | undefined;\r\n\r\n      if (method === 'TOTP') {\r\n        // Generate TOTP secret\r\n        secret = generateTOTPSecret();\r\n      } else if (method === 'SMS') {\r\n        phoneNumber = phoneNumber;\r\n      } else if (method === 'EMAIL') {\r\n        emailAddress = email;\r\n      }\r\n\r\n      const result = await SecurityService.enable2FA(\r\n        user.id,\r\n        method,\r\n        secret,\r\n        phoneNumber,\r\n        emailAddress\r\n      );\r\n\r\n      if (result.success) {\r\n        if (result.qrCode) {\r\n          setQrCode(result.qrCode);\r\n          setSecret(secret || '');\r\n        }\r\n        if (result.backupCodes) {\r\n          setBackupCodes(result.backupCodes);\r\n        }\r\n        setStep('setup');\r\n      } else {\r\n        setError('Failed to set up 2FA. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error setting up 2FA:', err);\r\n      setError('An error occurred while setting up 2FA.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleVerification = async () => {\r\n    if (!user || !verificationCode) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await SecurityService.verify2FA(\r\n        user.id,\r\n        verificationCode,\r\n        activeMethod\r\n      );\r\n\r\n      if (result.success) {\r\n        setSuccess('2FA has been successfully enabled!');\r\n        setStep('complete');\r\n        onComplete?.();\r\n      } else {\r\n        setError(result.message || 'Verification failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error verifying 2FA:', err);\r\n      setError('An error occurred during verification.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateTOTPSecret = (): string => {\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\r\n    let secret = '';\r\n    for (let i = 0; i < 32; i++) {\r\n      secret += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return secret;\r\n  };\r\n\r\n  const generateQRCode = async (qrData: string) => {\r\n    try {\r\n      const qrCodeDataURL = await QRCode.toDataURL(qrData);\r\n      setQrCode(qrCodeDataURL);\r\n    } catch (err) {\r\n      console.error('Error generating QR code:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (qrCode && qrCode.startsWith('otpauth://')) {\r\n      generateQRCode(qrCode);\r\n    }\r\n  }, [qrCode]);\r\n\r\n  if (step === 'select') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <Shield className=\"h-5 w-5 mr-2\" />\r\n            Enable Two-Factor Authentication\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Add an extra layer of security to your account by enabling 2FA.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <Card \r\n              className=\"cursor-pointer hover:bg-gray-50 transition-colors\"\r\n              onClick={() => handleMethodSelect('TOTP')}\r\n            >\r\n              <CardContent className=\"p-4 text-center\">\r\n                <Key className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\r\n                <h3 className=\"font-semibold mb-1\">Authenticator App</h3>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  Use Google Authenticator, Authy, or similar apps\r\n                </p>\r\n                <Badge variant=\"secondary\">Recommended</Badge>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card \r\n              className=\"cursor-pointer hover:bg-gray-50 transition-colors\"\r\n              onClick={() => handleMethodSelect('SMS')}\r\n            >\r\n              <CardContent className=\"p-4 text-center\">\r\n                <Smartphone className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\r\n                <h3 className=\"font-semibold mb-1\">SMS</h3>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  Receive codes via text message\r\n                </p>\r\n                <Badge variant=\"outline\">Easy Setup</Badge>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card \r\n              className=\"cursor-pointer hover:bg-gray-50 transition-colors\"\r\n              onClick={() => handleMethodSelect('EMAIL')}\r\n            >\r\n              <CardContent className=\"p-4 text-center\">\r\n                <Mail className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\r\n                <h3 className=\"font-semibold mb-1\">Email</h3>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  Receive codes via email\r\n                </p>\r\n                <Badge variant=\"outline\">Backup Option</Badge>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'setup') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Set Up {activeMethod === 'TOTP' ? 'Authenticator App' : activeMethod}</CardTitle>\r\n          <CardDescription>\r\n            Follow the steps below to complete your 2FA setup.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {activeMethod === 'TOTP' && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"text-center\">\r\n                <h3 className=\"font-semibold mb-2\">Scan QR Code</h3>\r\n                <p className=\"text-sm text-gray-600 mb-4\">\r\n                  Use your authenticator app to scan this QR code\r\n                </p>\r\n                {qrCode && qrCode.startsWith('data:image') ? (\r\n                  <div className=\"inline-block p-4 bg-white border rounded-lg\">\r\n                    <img src={qrCode} alt=\"QR Code\" className=\"w-48 h-48\" />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"inline-block p-4 bg-gray-100 border rounded-lg\">\r\n                    <div className=\"w-48 h-48 flex items-center justify-center text-gray-500\">\r\n                      Loading QR Code...\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"text-center\">\r\n                <p className=\"text-sm text-gray-600 mb-2\">Or enter this code manually:</p>\r\n                <code className=\"bg-gray-100 px-3 py-2 rounded text-sm font-mono\">\r\n                  {secret}\r\n                </code>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeMethod === 'SMS' && (\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Phone Number\r\n                </label>\r\n                <Input\r\n                  type=\"tel\"\r\n                  value={phoneNumber}\r\n                  onChange={(e) => setPhoneNumber(e.target.value)}\r\n                  placeholder=\"+1 (555) 123-4567\"\r\n                  className=\"w-full\"\r\n                />\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  We'll send verification codes to this number\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeMethod === 'EMAIL' && (\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Email Address\r\n                </label>\r\n                <Input\r\n                  type=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  placeholder=\"your@email.com\"\r\n                  className=\"w-full\"\r\n                />\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  We'll send verification codes to this email\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setStep('select')}\r\n            >\r\n              Back\r\n            </Button>\r\n            <Button\r\n              onClick={() => setStep('verify')}\r\n              disabled={loading}\r\n            >\r\n              Continue\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'verify') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Verify Your {activeMethod === 'TOTP' ? 'Authenticator App' : activeMethod}</CardTitle>\r\n          <CardDescription>\r\n            Enter the verification code to complete setup.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Verification Code\r\n            </label>\r\n            <Input\r\n              type=\"text\"\r\n              value={verificationCode}\r\n              onChange={(e) => setVerificationCode(e.target.value)}\r\n              placeholder=\"Enter 6-digit code\"\r\n              className=\"w-full text-center text-lg tracking-widest\"\r\n              maxLength={6}\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              {activeMethod === 'TOTP' \r\n                ? 'Enter the code from your authenticator app'\r\n                : `Enter the code sent to your ${activeMethod.toLowerCase()}`\r\n              }\r\n            </p>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"flex items-center space-x-2 text-red-600 bg-red-50 p-3 rounded-md\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <span className=\"text-sm\">{error}</span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setStep('setup')}\r\n            >\r\n              Back\r\n            </Button>\r\n            <Button\r\n              onClick={handleVerification}\r\n              disabled={loading || verificationCode.length !== 6}\r\n            >\r\n              {loading ? 'Verifying...' : 'Verify & Enable'}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (step === 'complete') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center text-green-600\">\r\n            <CheckCircle className=\"h-5 w-5 mr-2\" />\r\n            2FA Successfully Enabled!\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Your account is now protected with two-factor authentication.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {backupCodes.length > 0 && (\r\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\r\n              <h3 className=\"font-semibold text-yellow-800 mb-2\">Save Your Backup Codes</h3>\r\n              <p className=\"text-sm text-yellow-700 mb-3\">\r\n                These codes can be used to access your account if you lose your device.\r\n                Save them in a safe place - each code can only be used once.\r\n              </p>\r\n              <div className=\"grid grid-cols-2 gap-2 font-mono text-sm\">\r\n                {backupCodes.map((code, index) => (\r\n                  <div key={index} className=\"bg-white p-2 rounded border\">\r\n                    {code}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex justify-end\">\r\n            <Button onClick={onComplete}>\r\n              Complete Setup\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n","D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\lib\\auth-context.tsx",[],[],"D:\\Users\\enyoc\\Documents\\Dev\\ciuna\\apps\\web\\lib\\utils.ts",["457","458","459","460","461","462","463","464","465"],[],"import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\nimport { CurrencyCode, formatCurrency, getCurrencySymbol } from '@ciuna/types';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Format price with currency symbol\r\n */\r\nexport function formatPrice(amount: number, currency: CurrencyCode = 'RUB'): string {\r\n  return formatCurrency(amount, currency);\r\n}\r\n\r\n/**\r\n * Format price with original and converted amounts\r\n */\r\nexport function formatPriceWithConversion(\r\n  amount: number,\r\n  currency: CurrencyCode,\r\n  originalAmount?: number,\r\n  originalCurrency?: CurrencyCode\r\n): string {\r\n  const formatted = formatCurrency(amount, currency);\r\n  \r\n  if (originalAmount && originalCurrency && originalCurrency !== currency) {\r\n    const originalFormatted = formatCurrency(originalAmount, originalCurrency);\r\n    return `${formatted} (${originalFormatted})`;\r\n  }\r\n  \r\n  return formatted;\r\n}\r\n\r\n\r\n/**\r\n * Format relative time\r\n */\r\nexport function formatRelativeTime(dateString: string): string {\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n  \r\n  if (diffInSeconds < 60) {\r\n    return 'Just now';\r\n  }\r\n  \r\n  const diffInMinutes = Math.floor(diffInSeconds / 60);\r\n  if (diffInMinutes < 60) {\r\n    return `${diffInMinutes}m ago`;\r\n  }\r\n  \r\n  const diffInHours = Math.floor(diffInMinutes / 60);\r\n  if (diffInHours < 24) {\r\n    return `${diffInHours}h ago`;\r\n  }\r\n  \r\n  const diffInDays = Math.floor(diffInHours / 24);\r\n  if (diffInDays < 7) {\r\n    return `${diffInDays}d ago`;\r\n  }\r\n  \r\n  if (diffInDays < 30) {\r\n    const weeks = Math.floor(diffInDays / 7);\r\n    return `${weeks}w ago`;\r\n  }\r\n  \r\n  if (diffInDays < 365) {\r\n    const months = Math.floor(diffInDays / 30);\r\n    return `${months}mo ago`;\r\n  }\r\n  \r\n  const years = Math.floor(diffInDays / 365);\r\n  return `${years}y ago`;\r\n}\r\n\r\n/**\r\n * Format date\r\n */\r\nexport function formatDate(dateString: string, options?: Intl.DateTimeFormatOptions): string {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    ...options,\r\n  });\r\n}\r\n\r\n/**\r\n * Format datetime\r\n */\r\nexport function formatDateTime(dateString: string, options?: Intl.DateTimeFormatOptions): string {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    ...options,\r\n  });\r\n}\r\n\r\n/**\r\n * Truncate text\r\n */\r\nexport function truncateText(text: string, maxLength: number): string {\r\n  if (text.length <= maxLength) {\r\n    return text;\r\n  }\r\n  return text.slice(0, maxLength) + '...';\r\n}\r\n\r\n/**\r\n * Generate slug from text\r\n */\r\nexport function generateSlug(text: string): string {\r\n  return text\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    .replace(/[\\s_-]+/g, '-')\r\n    .replace(/^-+|-+$/g, '');\r\n}\r\n\r\n/**\r\n * Validate email\r\n */\r\nexport function isValidEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\n/**\r\n * Validate phone number (Russian format)\r\n */\r\nexport function isValidPhone(phone: string): boolean {\r\n  const phoneRegex = /^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/;\r\n  return phoneRegex.test(phone);\r\n}\r\n\r\n/**\r\n * Format phone number\r\n */\r\nexport function formatPhone(phone: string): string {\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n  if (cleaned.length === 11 && cleaned.startsWith('7')) {\r\n    return `+7 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7, 9)}-${cleaned.slice(9)}`;\r\n  }\r\n  if (cleaned.length === 10) {\r\n    return `+7 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 8)}-${cleaned.slice(8)}`;\r\n  }\r\n  return phone;\r\n}\r\n\r\n/**\r\n * Get file size in human readable format\r\n */\r\nexport function formatFileSize(bytes: number): string {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * Debounce function\r\n */\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle function\r\n */\r\nexport function throttle<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  limit: number\r\n): (...args: Parameters<T>) => void {\r\n  let inThrottle: boolean;\r\n  return (...args: Parameters<T>) => {\r\n    if (!inThrottle) {\r\n      func(...args);\r\n      inThrottle = true;\r\n      setTimeout(() => (inThrottle = false), limit);\r\n    }\r\n  };\r\n}",{"ruleId":"466","severity":1,"message":"467","line":27,"column":19,"nodeType":"468","messageId":"469","endLine":27,"endColumn":22,"suggestions":"470"},{"ruleId":"466","severity":1,"message":"467","line":61,"column":19,"nodeType":"468","messageId":"469","endLine":61,"endColumn":22,"suggestions":"471"},{"ruleId":"472","severity":1,"message":"473","line":20,"column":15,"nodeType":"474","messageId":"475","endLine":20,"endColumn":22},{"ruleId":"466","severity":1,"message":"467","line":37,"column":68,"nodeType":"468","messageId":"469","endLine":37,"endColumn":71,"suggestions":"476"},{"ruleId":"466","severity":1,"message":"467","line":38,"column":56,"nodeType":"468","messageId":"469","endLine":38,"endColumn":59,"suggestions":"477"},{"ruleId":"466","severity":1,"message":"467","line":39,"column":58,"nodeType":"468","messageId":"469","endLine":39,"endColumn":61,"suggestions":"478"},{"ruleId":"466","severity":1,"message":"467","line":40,"column":56,"nodeType":"468","messageId":"469","endLine":40,"endColumn":59,"suggestions":"479"},{"ruleId":"466","severity":1,"message":"467","line":52,"column":56,"nodeType":"468","messageId":"469","endLine":52,"endColumn":59,"suggestions":"480"},{"ruleId":"466","severity":1,"message":"467","line":56,"column":50,"nodeType":"468","messageId":"469","endLine":56,"endColumn":53,"suggestions":"481"},{"ruleId":"466","severity":1,"message":"467","line":60,"column":46,"nodeType":"468","messageId":"469","endLine":60,"endColumn":49,"suggestions":"482"},{"ruleId":"466","severity":1,"message":"467","line":64,"column":51,"nodeType":"468","messageId":"469","endLine":64,"endColumn":54,"suggestions":"483"},{"ruleId":"466","severity":1,"message":"467","line":69,"column":56,"nodeType":"468","messageId":"469","endLine":69,"endColumn":59,"suggestions":"484"},{"ruleId":"466","severity":1,"message":"467","line":71,"column":50,"nodeType":"468","messageId":"469","endLine":71,"endColumn":53,"suggestions":"485"},{"ruleId":"466","severity":1,"message":"467","line":73,"column":46,"nodeType":"468","messageId":"469","endLine":73,"endColumn":49,"suggestions":"486"},{"ruleId":"466","severity":1,"message":"467","line":75,"column":52,"nodeType":"468","messageId":"469","endLine":75,"endColumn":55,"suggestions":"487"},{"ruleId":"466","severity":1,"message":"467","line":45,"column":67,"nodeType":"468","messageId":"469","endLine":45,"endColumn":70,"suggestions":"488"},{"ruleId":"466","severity":1,"message":"467","line":48,"column":13,"nodeType":"468","messageId":"469","endLine":48,"endColumn":16,"suggestions":"489"},{"ruleId":"466","severity":1,"message":"467","line":59,"column":15,"nodeType":"468","messageId":"469","endLine":59,"endColumn":18,"suggestions":"490"},{"ruleId":"466","severity":1,"message":"467","line":46,"column":52,"nodeType":"468","messageId":"469","endLine":46,"endColumn":55,"suggestions":"491"},{"ruleId":"466","severity":1,"message":"467","line":61,"column":51,"nodeType":"468","messageId":"469","endLine":61,"endColumn":54,"suggestions":"492"},{"ruleId":"472","severity":1,"message":"493","line":24,"column":3,"nodeType":"474","messageId":"475","endLine":24,"endColumn":14},{"ruleId":"472","severity":1,"message":"494","line":25,"column":3,"nodeType":"474","messageId":"475","endLine":25,"endColumn":8},{"ruleId":"472","severity":1,"message":"495","line":26,"column":3,"nodeType":"474","messageId":"475","endLine":26,"endColumn":10},{"ruleId":"472","severity":1,"message":"496","line":28,"column":23,"nodeType":"474","messageId":"475","endLine":28,"endColumn":48},{"ruleId":"472","severity":1,"message":"497","line":73,"column":10,"nodeType":"474","messageId":"475","endLine":73,"endColumn":17},{"ruleId":"466","severity":1,"message":"467","line":158,"column":44,"nodeType":"468","messageId":"469","endLine":158,"endColumn":47,"suggestions":"498"},{"ruleId":"466","severity":1,"message":"467","line":656,"column":43,"nodeType":"468","messageId":"469","endLine":656,"endColumn":46,"suggestions":"499"},{"ruleId":"466","severity":1,"message":"467","line":673,"column":49,"nodeType":"468","messageId":"469","endLine":673,"endColumn":52,"suggestions":"500"},{"ruleId":"466","severity":1,"message":"467","line":683,"column":49,"nodeType":"468","messageId":"469","endLine":683,"endColumn":52,"suggestions":"501"},{"ruleId":"472","severity":1,"message":"502","line":82,"column":32,"nodeType":"474","messageId":"475","endLine":82,"endColumn":58},{"ruleId":"472","severity":1,"message":"502","line":87,"column":54,"nodeType":"474","messageId":"475","endLine":87,"endColumn":66},{"ruleId":"472","severity":1,"message":"503","line":147,"column":27,"nodeType":"474","messageId":"475","endLine":147,"endColumn":43},{"ruleId":"472","severity":1,"message":"504","line":148,"column":27,"nodeType":"474","messageId":"475","endLine":148,"endColumn":38},{"ruleId":"472","severity":1,"message":"505","line":8,"column":18,"nodeType":"474","messageId":"475","endLine":8,"endColumn":24},{"ruleId":"466","severity":1,"message":"467","line":47,"column":65,"nodeType":"468","messageId":"469","endLine":47,"endColumn":68,"suggestions":"506"},{"ruleId":"472","severity":1,"message":"507","line":5,"column":29,"nodeType":"474","messageId":"475","endLine":5,"endColumn":39},{"ruleId":"472","severity":1,"message":"508","line":5,"column":41,"nodeType":"474","messageId":"475","endLine":5,"endColumn":50},{"ruleId":"466","severity":1,"message":"467","line":25,"column":60,"nodeType":"468","messageId":"469","endLine":25,"endColumn":63,"suggestions":"509"},{"ruleId":"466","severity":1,"message":"467","line":32,"column":58,"nodeType":"468","messageId":"469","endLine":32,"endColumn":61,"suggestions":"510"},{"ruleId":"472","severity":1,"message":"511","line":47,"column":10,"nodeType":"474","messageId":"475","endLine":47,"endColumn":23},{"ruleId":"472","severity":1,"message":"512","line":11,"column":3,"nodeType":"474","messageId":"475","endLine":11,"endColumn":9},{"ruleId":"472","severity":1,"message":"497","line":24,"column":10,"nodeType":"474","messageId":"475","endLine":24,"endColumn":17},{"ruleId":"513","severity":1,"message":"514","line":414,"column":42,"nodeType":"515","messageId":"516","endLine":414,"endColumn":94,"suggestions":"517"},{"ruleId":"472","severity":1,"message":"518","line":13,"column":3,"nodeType":"474","messageId":"475","endLine":13,"endColumn":8},{"ruleId":"472","severity":1,"message":"519","line":22,"column":10,"nodeType":"474","messageId":"475","endLine":22,"endColumn":12},{"ruleId":"472","severity":1,"message":"520","line":23,"column":23,"nodeType":"474","messageId":"475","endLine":23,"endColumn":41},{"ruleId":"472","severity":1,"message":"505","line":17,"column":3,"nodeType":"474","messageId":"475","endLine":17,"endColumn":9},{"ruleId":"466","severity":1,"message":"467","line":144,"column":79,"nodeType":"468","messageId":"469","endLine":144,"endColumn":82,"suggestions":"521"},{"ruleId":"472","severity":1,"message":"494","line":18,"column":3,"nodeType":"474","messageId":"475","endLine":18,"endColumn":8},{"ruleId":"472","severity":1,"message":"522","line":21,"column":3,"nodeType":"474","messageId":"475","endLine":21,"endColumn":11},{"ruleId":"472","severity":1,"message":"497","line":26,"column":10,"nodeType":"474","messageId":"475","endLine":26,"endColumn":17},{"ruleId":"472","severity":1,"message":"523","line":5,"column":67,"nodeType":"474","messageId":"475","endLine":5,"endColumn":72},{"ruleId":"472","severity":1,"message":"524","line":7,"column":3,"nodeType":"474","messageId":"475","endLine":7,"endColumn":9},{"ruleId":"472","severity":1,"message":"525","line":11,"column":3,"nodeType":"474","messageId":"475","endLine":11,"endColumn":6},{"ruleId":"472","severity":1,"message":"526","line":13,"column":3,"nodeType":"474","messageId":"475","endLine":13,"endColumn":7},{"ruleId":"472","severity":1,"message":"527","line":14,"column":3,"nodeType":"474","messageId":"475","endLine":14,"endColumn":8},{"ruleId":"472","severity":1,"message":"528","line":21,"column":17,"nodeType":"474","messageId":"475","endLine":21,"endColumn":24},{"ruleId":"472","severity":1,"message":"505","line":6,"column":46,"nodeType":"474","messageId":"475","endLine":6,"endColumn":52},{"ruleId":"466","severity":1,"message":"467","line":130,"column":95,"nodeType":"468","messageId":"469","endLine":130,"endColumn":98,"suggestions":"529"},{"ruleId":"472","severity":1,"message":"530","line":12,"column":3,"nodeType":"474","messageId":"475","endLine":12,"endColumn":11},{"ruleId":"472","severity":1,"message":"520","line":19,"column":23,"nodeType":"474","messageId":"475","endLine":19,"endColumn":41},{"ruleId":"472","severity":1,"message":"531","line":3,"column":20,"nodeType":"474","messageId":"475","endLine":3,"endColumn":29},{"ruleId":"472","severity":1,"message":"532","line":5,"column":10,"nodeType":"474","messageId":"475","endLine":5,"endColumn":16},{"ruleId":"472","severity":1,"message":"533","line":12,"column":10,"nodeType":"474","messageId":"475","endLine":12,"endColumn":18},{"ruleId":"472","severity":1,"message":"534","line":19,"column":16,"nodeType":"474","messageId":"475","endLine":19,"endColumn":27},{"ruleId":"472","severity":1,"message":"497","line":21,"column":10,"nodeType":"474","messageId":"475","endLine":21,"endColumn":17},{"ruleId":"466","severity":1,"message":"467","line":24,"column":53,"nodeType":"468","messageId":"469","endLine":24,"endColumn":56,"suggestions":"535"},{"ruleId":"472","severity":1,"message":"536","line":39,"column":9,"nodeType":"474","messageId":"475","endLine":39,"endColumn":29},{"ruleId":"472","severity":1,"message":"537","line":43,"column":9,"nodeType":"474","messageId":"475","endLine":43,"endColumn":29},{"ruleId":"472","severity":1,"message":"538","line":12,"column":3,"nodeType":"474","messageId":"475","endLine":12,"endColumn":4},{"ruleId":"472","severity":1,"message":"530","line":17,"column":3,"nodeType":"474","messageId":"475","endLine":17,"endColumn":11},{"ruleId":"472","severity":1,"message":"539","line":18,"column":3,"nodeType":"474","messageId":"475","endLine":18,"endColumn":14},{"ruleId":"472","severity":1,"message":"540","line":28,"column":10,"nodeType":"474","messageId":"475","endLine":28,"endColumn":22},{"ruleId":"472","severity":1,"message":"541","line":28,"column":24,"nodeType":"474","messageId":"475","endLine":28,"endColumn":39},{"ruleId":"472","severity":1,"message":"518","line":13,"column":3,"nodeType":"474","messageId":"475","endLine":13,"endColumn":8},{"ruleId":"472","severity":1,"message":"542","line":14,"column":3,"nodeType":"474","messageId":"475","endLine":14,"endColumn":7},{"ruleId":"472","severity":1,"message":"505","line":7,"column":40,"nodeType":"474","messageId":"475","endLine":7,"endColumn":46},{"ruleId":"472","severity":1,"message":"543","line":9,"column":10,"nodeType":"474","messageId":"475","endLine":9,"endColumn":21},{"ruleId":"472","severity":1,"message":"544","line":7,"column":44,"nodeType":"474","messageId":"475","endLine":7,"endColumn":50},{"ruleId":"472","severity":1,"message":"545","line":15,"column":3,"nodeType":"474","messageId":"475","endLine":15,"endColumn":14},{"ruleId":"472","severity":1,"message":"546","line":4,"column":29,"nodeType":"474","messageId":"475","endLine":4,"endColumn":44},{"ruleId":"472","severity":1,"message":"547","line":8,"column":10,"nodeType":"474","messageId":"475","endLine":8,"endColumn":14},{"ruleId":"472","severity":1,"message":"548","line":8,"column":16,"nodeType":"474","messageId":"475","endLine":8,"endColumn":27},{"ruleId":"472","severity":1,"message":"549","line":8,"column":29,"nodeType":"474","messageId":"475","endLine":8,"endColumn":37},{"ruleId":"472","severity":1,"message":"550","line":8,"column":39,"nodeType":"474","messageId":"475","endLine":8,"endColumn":50},{"ruleId":"472","severity":1,"message":"542","line":18,"column":3,"nodeType":"474","messageId":"475","endLine":18,"endColumn":7},{"ruleId":"472","severity":1,"message":"551","line":19,"column":3,"nodeType":"474","messageId":"475","endLine":19,"endColumn":9},{"ruleId":"472","severity":1,"message":"552","line":20,"column":3,"nodeType":"474","messageId":"475","endLine":20,"endColumn":13},{"ruleId":"472","severity":1,"message":"530","line":21,"column":3,"nodeType":"474","messageId":"475","endLine":21,"endColumn":11},{"ruleId":"472","severity":1,"message":"553","line":22,"column":3,"nodeType":"474","messageId":"475","endLine":22,"endColumn":14},{"ruleId":"472","severity":1,"message":"554","line":41,"column":3,"nodeType":"474","messageId":"475","endLine":41,"endColumn":18},{"ruleId":"472","severity":1,"message":"555","line":46,"column":11,"nodeType":"474","messageId":"475","endLine":46,"endColumn":22},{"ruleId":"466","severity":1,"message":"467","line":50,"column":69,"nodeType":"468","messageId":"469","endLine":50,"endColumn":72,"suggestions":"556"},{"ruleId":"466","severity":1,"message":"467","line":142,"column":57,"nodeType":"468","messageId":"469","endLine":142,"endColumn":60,"suggestions":"557"},{"ruleId":"466","severity":1,"message":"467","line":163,"column":63,"nodeType":"468","messageId":"469","endLine":163,"endColumn":66,"suggestions":"558"},{"ruleId":"472","severity":1,"message":"559","line":27,"column":46,"nodeType":"474","messageId":"475","endLine":27,"endColumn":53},{"ruleId":"466","severity":1,"message":"467","line":168,"column":52,"nodeType":"468","messageId":"469","endLine":168,"endColumn":55,"suggestions":"560"},{"ruleId":"472","severity":1,"message":"561","line":10,"column":10,"nodeType":"474","messageId":"475","endLine":10,"endColumn":17},{"ruleId":"472","severity":1,"message":"562","line":14,"column":3,"nodeType":"474","messageId":"475","endLine":14,"endColumn":15},{"ruleId":"472","severity":1,"message":"563","line":23,"column":3,"nodeType":"474","messageId":"475","endLine":23,"endColumn":12},{"ruleId":"472","severity":1,"message":"533","line":24,"column":3,"nodeType":"474","messageId":"475","endLine":24,"endColumn":11},{"ruleId":"466","severity":1,"message":"467","line":35,"column":57,"nodeType":"468","messageId":"469","endLine":35,"endColumn":60,"suggestions":"564"},{"ruleId":"472","severity":1,"message":"523","line":5,"column":10,"nodeType":"474","messageId":"475","endLine":5,"endColumn":15},{"ruleId":"472","severity":1,"message":"555","line":49,"column":51,"nodeType":"474","messageId":"475","endLine":49,"endColumn":62},{"ruleId":"472","severity":1,"message":"565","line":154,"column":3,"nodeType":"474","messageId":"475","endLine":154,"endColumn":13},{"ruleId":"472","severity":1,"message":"566","line":8,"column":10,"nodeType":"474","messageId":"475","endLine":8,"endColumn":25},{"ruleId":"472","severity":1,"message":"524","line":12,"column":3,"nodeType":"474","messageId":"475","endLine":12,"endColumn":9},{"ruleId":"567","severity":1,"message":"568","line":26,"column":25,"nodeType":"474","messageId":"569","endLine":26,"endColumn":40},{"ruleId":"472","severity":1,"message":"570","line":162,"column":9,"nodeType":"474","messageId":"475","endLine":162,"endColumn":20},{"ruleId":"472","severity":1,"message":"523","line":6,"column":26,"nodeType":"474","messageId":"475","endLine":6,"endColumn":31},{"ruleId":"472","severity":1,"message":"533","line":16,"column":3,"nodeType":"474","messageId":"475","endLine":16,"endColumn":11},{"ruleId":"472","severity":1,"message":"544","line":7,"column":10,"nodeType":"474","messageId":"475","endLine":7,"endColumn":16},{"ruleId":"466","severity":1,"message":"467","line":18,"column":24,"nodeType":"468","messageId":"469","endLine":18,"endColumn":27,"suggestions":"571"},{"ruleId":"466","severity":1,"message":"467","line":30,"column":60,"nodeType":"468","messageId":"469","endLine":30,"endColumn":63,"suggestions":"572"},{"ruleId":"466","severity":1,"message":"467","line":37,"column":58,"nodeType":"468","messageId":"469","endLine":37,"endColumn":61,"suggestions":"573"},{"ruleId":"472","severity":1,"message":"574","line":7,"column":46,"nodeType":"474","messageId":"475","endLine":7,"endColumn":61},{"ruleId":"466","severity":1,"message":"467","line":41,"column":56,"nodeType":"468","messageId":"469","endLine":41,"endColumn":59,"suggestions":"575"},{"ruleId":"466","severity":1,"message":"467","line":42,"column":60,"nodeType":"468","messageId":"469","endLine":42,"endColumn":63,"suggestions":"576"},{"ruleId":"466","severity":1,"message":"467","line":91,"column":39,"nodeType":"468","messageId":"469","endLine":91,"endColumn":42,"suggestions":"577"},{"ruleId":"466","severity":1,"message":"467","line":91,"column":54,"nodeType":"468","messageId":"469","endLine":91,"endColumn":57,"suggestions":"578"},{"ruleId":"472","severity":1,"message":"546","line":4,"column":29,"nodeType":"474","messageId":"475","endLine":4,"endColumn":44},{"ruleId":"472","severity":1,"message":"507","line":4,"column":46,"nodeType":"474","messageId":"475","endLine":4,"endColumn":56},{"ruleId":"472","severity":1,"message":"508","line":4,"column":58,"nodeType":"474","messageId":"475","endLine":4,"endColumn":67},{"ruleId":"472","severity":1,"message":"579","line":7,"column":10,"nodeType":"474","messageId":"475","endLine":7,"endColumn":23},{"ruleId":"472","severity":1,"message":"580","line":18,"column":3,"nodeType":"474","messageId":"475","endLine":18,"endColumn":6},{"ruleId":"472","severity":1,"message":"505","line":21,"column":3,"nodeType":"474","messageId":"475","endLine":21,"endColumn":9},{"ruleId":"472","severity":1,"message":"581","line":22,"column":3,"nodeType":"474","messageId":"475","endLine":22,"endColumn":10},{"ruleId":"472","severity":1,"message":"582","line":54,"column":3,"nodeType":"474","messageId":"475","endLine":54,"endColumn":14},{"ruleId":"472","severity":1,"message":"583","line":120,"column":9,"nodeType":"474","messageId":"475","endLine":120,"endColumn":27},{"ruleId":"466","severity":1,"message":"467","line":294,"column":60,"nodeType":"468","messageId":"469","endLine":294,"endColumn":63,"suggestions":"584"},{"ruleId":"472","severity":1,"message":"547","line":8,"column":10,"nodeType":"474","messageId":"475","endLine":8,"endColumn":14},{"ruleId":"472","severity":1,"message":"548","line":8,"column":16,"nodeType":"474","messageId":"475","endLine":8,"endColumn":27},{"ruleId":"472","severity":1,"message":"549","line":8,"column":29,"nodeType":"474","messageId":"475","endLine":8,"endColumn":37},{"ruleId":"472","severity":1,"message":"550","line":8,"column":39,"nodeType":"474","messageId":"475","endLine":8,"endColumn":50},{"ruleId":"472","severity":1,"message":"585","line":24,"column":10,"nodeType":"474","messageId":"475","endLine":24,"endColumn":17},{"ruleId":"586","severity":1,"message":"587","line":58,"column":23,"nodeType":"474","messageId":"588","endLine":58,"endColumn":34},{"ruleId":"472","severity":1,"message":"589","line":3,"column":40,"nodeType":"474","messageId":"475","endLine":3,"endColumn":57},{"ruleId":"590","severity":1,"message":"591","line":138,"column":37,"nodeType":"592","messageId":"593","endLine":138,"endColumn":38,"suggestions":"594"},{"ruleId":"590","severity":1,"message":"591","line":138,"column":63,"nodeType":"592","messageId":"593","endLine":138,"endColumn":64,"suggestions":"595"},{"ruleId":"590","severity":1,"message":"591","line":138,"column":78,"nodeType":"592","messageId":"593","endLine":138,"endColumn":79,"suggestions":"596"},{"ruleId":"590","severity":1,"message":"591","line":138,"column":93,"nodeType":"592","messageId":"593","endLine":138,"endColumn":94,"suggestions":"597"},{"ruleId":"466","severity":1,"message":"467","line":172,"column":46,"nodeType":"468","messageId":"469","endLine":172,"endColumn":49,"suggestions":"598"},{"ruleId":"466","severity":1,"message":"467","line":172,"column":56,"nodeType":"468","messageId":"469","endLine":172,"endColumn":59,"suggestions":"599"},{"ruleId":"466","severity":1,"message":"467","line":186,"column":46,"nodeType":"468","messageId":"469","endLine":186,"endColumn":49,"suggestions":"600"},{"ruleId":"466","severity":1,"message":"467","line":186,"column":56,"nodeType":"468","messageId":"469","endLine":186,"endColumn":59,"suggestions":"601"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["602","603"],["604","605"],"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar",["606","607"],["608","609"],["610","611"],["612","613"],["614","615"],["616","617"],["618","619"],["620","621"],["622","623"],["624","625"],["626","627"],["628","629"],["630","631"],["632","633"],["634","635"],["636","637"],["638","639"],"'CheckCircle' is defined but never used.","'Clock' is defined but never used.","'XCircle' is defined but never used.","'formatPriceWithConversion' is defined but never used.","'loading' is assigned a value but never used.",["640","641"],["642","643"],["644","645"],["646","647"],"'conversation' is defined but never used. Allowed unused args must match /^_/u.","'otherParticipant' is assigned a value but never used.","'lastMessage' is assigned a value but never used.","'Filter' is defined but never used.",["648","649"],"'CardHeader' is defined but never used.","'CardTitle' is defined but never used.",["650","651"],["652","653"],"'showAddMethod' is assigned a value but never used.","'Shield' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["654"],"'Users' is defined but never used.","'db' is defined but never used.","'formatRelativeTime' is defined but never used.",["655","656"],"'Download' is defined but never used.","'Badge' is defined but never used.","'Upload' is defined but never used.","'Tag' is defined but never used.","'Plus' is defined but never used.","'Minus' is defined but never used.","'profile' is assigned a value but never used.",["657","658"],"'Calendar' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Settings' is defined but never used.","'i18nLoading' is assigned a value but never used.",["659","660"],"'handleLanguageChange' is assigned a value but never used.","'handleCurrencyChange' is assigned a value but never used.","'X' is defined but never used.","'AlertCircle' is defined but never used.","'selectedPlan' is assigned a value but never used.","'setSelectedPlan' is assigned a value but never used.","'Star' is defined but never used.","'formatPrice' is defined but never used.","'Avatar' is defined but never used.","'ShoppingBag' is defined but never used.","'CardDescription' is defined but never used.","'Tabs' is defined but never used.","'TabsContent' is defined but never used.","'TabsList' is defined but never used.","'TabsTrigger' is defined but never used.","'MapPin' is defined but never used.","'DollarSign' is defined but never used.","'ChevronDown' is defined but never used.","'showSuggestions' is assigned a value but never used.","'formatPrice' is assigned a value but never used.",["661","662"],["663","664"],["665","666"],"'isAdmin' is assigned a value but never used.",["667","668"],"'useAuth' is defined but never used.","'TrendingDown' is defined but never used.","'BarChart3' is defined but never used.",["669","670"],"'showSymbol' is assigned a value but never used.","'CurrencyService' is defined but never used.","no-redeclare","'KYCVerification' is already defined.","redeclared","'currentLang' is assigned a value but never used.",["671","672"],["673","674"],["675","676"],"'PaymentProvider' is defined but never used.",["677","678"],["679","680"],["681","682"],["683","684"],"'SearchService' is defined but never used.","'Eye' is defined but never used.","'SortAsc' is defined but never used.","'showFilters' is assigned a value but never used.","'getContentTypeIcon' is assigned a value but never used.",["685","686"],"'success' is assigned a value but never used.","no-self-assign","'phoneNumber' is assigned to itself.","selfAssignment","'getCurrencySymbol' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["687","688"],["689","690"],["691","692"],["693","694"],["695","696"],["697","698"],["699","700"],["701","702"],{"messageId":"703","fix":"704","desc":"705"},{"messageId":"706","fix":"707","desc":"708"},{"messageId":"703","fix":"709","desc":"705"},{"messageId":"706","fix":"710","desc":"708"},{"messageId":"703","fix":"711","desc":"705"},{"messageId":"706","fix":"712","desc":"708"},{"messageId":"703","fix":"713","desc":"705"},{"messageId":"706","fix":"714","desc":"708"},{"messageId":"703","fix":"715","desc":"705"},{"messageId":"706","fix":"716","desc":"708"},{"messageId":"703","fix":"717","desc":"705"},{"messageId":"706","fix":"718","desc":"708"},{"messageId":"703","fix":"719","desc":"705"},{"messageId":"706","fix":"720","desc":"708"},{"messageId":"703","fix":"721","desc":"705"},{"messageId":"706","fix":"722","desc":"708"},{"messageId":"703","fix":"723","desc":"705"},{"messageId":"706","fix":"724","desc":"708"},{"messageId":"703","fix":"725","desc":"705"},{"messageId":"706","fix":"726","desc":"708"},{"messageId":"703","fix":"727","desc":"705"},{"messageId":"706","fix":"728","desc":"708"},{"messageId":"703","fix":"729","desc":"705"},{"messageId":"706","fix":"730","desc":"708"},{"messageId":"703","fix":"731","desc":"705"},{"messageId":"706","fix":"732","desc":"708"},{"messageId":"703","fix":"733","desc":"705"},{"messageId":"706","fix":"734","desc":"708"},{"messageId":"703","fix":"735","desc":"705"},{"messageId":"706","fix":"736","desc":"708"},{"messageId":"703","fix":"737","desc":"705"},{"messageId":"706","fix":"738","desc":"708"},{"messageId":"703","fix":"739","desc":"705"},{"messageId":"706","fix":"740","desc":"708"},{"messageId":"703","fix":"741","desc":"705"},{"messageId":"706","fix":"742","desc":"708"},{"messageId":"703","fix":"743","desc":"705"},{"messageId":"706","fix":"744","desc":"708"},{"messageId":"703","fix":"745","desc":"705"},{"messageId":"706","fix":"746","desc":"708"},{"messageId":"703","fix":"747","desc":"705"},{"messageId":"706","fix":"748","desc":"708"},{"messageId":"703","fix":"749","desc":"705"},{"messageId":"706","fix":"750","desc":"708"},{"messageId":"703","fix":"751","desc":"705"},{"messageId":"706","fix":"752","desc":"708"},{"messageId":"703","fix":"753","desc":"705"},{"messageId":"706","fix":"754","desc":"708"},{"messageId":"703","fix":"755","desc":"705"},{"messageId":"706","fix":"756","desc":"708"},{"messageId":"703","fix":"757","desc":"705"},{"messageId":"706","fix":"758","desc":"708"},{"messageId":"759","fix":"760","desc":"761"},{"messageId":"703","fix":"762","desc":"705"},{"messageId":"706","fix":"763","desc":"708"},{"messageId":"703","fix":"764","desc":"705"},{"messageId":"706","fix":"765","desc":"708"},{"messageId":"703","fix":"766","desc":"705"},{"messageId":"706","fix":"767","desc":"708"},{"messageId":"703","fix":"768","desc":"705"},{"messageId":"706","fix":"769","desc":"708"},{"messageId":"703","fix":"770","desc":"705"},{"messageId":"706","fix":"771","desc":"708"},{"messageId":"703","fix":"772","desc":"705"},{"messageId":"706","fix":"773","desc":"708"},{"messageId":"703","fix":"774","desc":"705"},{"messageId":"706","fix":"775","desc":"708"},{"messageId":"703","fix":"776","desc":"705"},{"messageId":"706","fix":"777","desc":"708"},{"messageId":"703","fix":"778","desc":"705"},{"messageId":"706","fix":"779","desc":"708"},{"messageId":"703","fix":"780","desc":"705"},{"messageId":"706","fix":"781","desc":"708"},{"messageId":"703","fix":"782","desc":"705"},{"messageId":"706","fix":"783","desc":"708"},{"messageId":"703","fix":"784","desc":"705"},{"messageId":"706","fix":"785","desc":"708"},{"messageId":"703","fix":"786","desc":"705"},{"messageId":"706","fix":"787","desc":"708"},{"messageId":"703","fix":"788","desc":"705"},{"messageId":"706","fix":"789","desc":"708"},{"messageId":"703","fix":"790","desc":"705"},{"messageId":"706","fix":"791","desc":"708"},{"messageId":"703","fix":"792","desc":"705"},{"messageId":"706","fix":"793","desc":"708"},{"messageId":"794","fix":"795","desc":"796"},{"messageId":"797","fix":"798","desc":"799"},{"messageId":"794","fix":"800","desc":"796"},{"messageId":"797","fix":"801","desc":"799"},{"messageId":"794","fix":"802","desc":"796"},{"messageId":"797","fix":"803","desc":"799"},{"messageId":"794","fix":"804","desc":"796"},{"messageId":"797","fix":"805","desc":"799"},{"messageId":"703","fix":"806","desc":"705"},{"messageId":"706","fix":"807","desc":"708"},{"messageId":"703","fix":"808","desc":"705"},{"messageId":"706","fix":"809","desc":"708"},{"messageId":"703","fix":"810","desc":"705"},{"messageId":"706","fix":"811","desc":"708"},{"messageId":"703","fix":"812","desc":"705"},{"messageId":"706","fix":"813","desc":"708"},"suggestUnknown",{"range":"814","text":"815"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"816","text":"817"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"818","text":"815"},{"range":"819","text":"817"},{"range":"820","text":"815"},{"range":"821","text":"817"},{"range":"822","text":"815"},{"range":"823","text":"817"},{"range":"824","text":"815"},{"range":"825","text":"817"},{"range":"826","text":"815"},{"range":"827","text":"817"},{"range":"828","text":"815"},{"range":"829","text":"817"},{"range":"830","text":"815"},{"range":"831","text":"817"},{"range":"832","text":"815"},{"range":"833","text":"817"},{"range":"834","text":"815"},{"range":"835","text":"817"},{"range":"836","text":"815"},{"range":"837","text":"817"},{"range":"838","text":"815"},{"range":"839","text":"817"},{"range":"840","text":"815"},{"range":"841","text":"817"},{"range":"842","text":"815"},{"range":"843","text":"817"},{"range":"844","text":"815"},{"range":"845","text":"817"},{"range":"846","text":"815"},{"range":"847","text":"817"},{"range":"848","text":"815"},{"range":"849","text":"817"},{"range":"850","text":"815"},{"range":"851","text":"817"},{"range":"852","text":"815"},{"range":"853","text":"817"},{"range":"854","text":"815"},{"range":"855","text":"817"},{"range":"856","text":"815"},{"range":"857","text":"817"},{"range":"858","text":"815"},{"range":"859","text":"817"},{"range":"860","text":"815"},{"range":"861","text":"817"},{"range":"862","text":"815"},{"range":"863","text":"817"},{"range":"864","text":"815"},{"range":"865","text":"817"},{"range":"866","text":"815"},{"range":"867","text":"817"},"suggestOptionalChain",{"range":"868","text":"869"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"870","text":"815"},{"range":"871","text":"817"},{"range":"872","text":"815"},{"range":"873","text":"817"},{"range":"874","text":"815"},{"range":"875","text":"817"},{"range":"876","text":"815"},{"range":"877","text":"817"},{"range":"878","text":"815"},{"range":"879","text":"817"},{"range":"880","text":"815"},{"range":"881","text":"817"},{"range":"882","text":"815"},{"range":"883","text":"817"},{"range":"884","text":"815"},{"range":"885","text":"817"},{"range":"886","text":"815"},{"range":"887","text":"817"},{"range":"888","text":"815"},{"range":"889","text":"817"},{"range":"890","text":"815"},{"range":"891","text":"817"},{"range":"892","text":"815"},{"range":"893","text":"817"},{"range":"894","text":"815"},{"range":"895","text":"817"},{"range":"896","text":"815"},{"range":"897","text":"817"},{"range":"898","text":"815"},{"range":"899","text":"817"},{"range":"900","text":"815"},{"range":"901","text":"817"},"removeEscape",{"range":"902","text":"903"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"904","text":"905"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"906","text":"903"},{"range":"907","text":"905"},{"range":"908","text":"903"},{"range":"909","text":"905"},{"range":"910","text":"903"},{"range":"911","text":"905"},{"range":"912","text":"815"},{"range":"913","text":"817"},{"range":"914","text":"815"},{"range":"915","text":"817"},{"range":"916","text":"815"},{"range":"917","text":"817"},{"range":"918","text":"815"},{"range":"919","text":"817"},[896,899],"unknown",[896,899],"never",[1838,1841],[1838,1841],[1076,1079],[1076,1079],[1144,1147],[1144,1147],[1214,1217],[1214,1217],[1282,1285],[1282,1285],[1585,1588],[1585,1588],[1765,1768],[1765,1768],[1945,1948],[1945,1948],[2115,2118],[2115,2118],[2291,2294],[2291,2294],[2422,2425],[2422,2425],[2542,2545],[2542,2545],[2664,2667],[2664,2667],[1380,1383],[1380,1383],[1540,1543],[1540,1543],[2011,2014],[2011,2014],[1593,1596],[1593,1596],[1640,1643],[1640,1643],[4827,4830],[4827,4830],[28943,28946],[28943,28946],[29653,29656],[29653,29656],[30157,30160],[30157,30160],[1628,1631],[1628,1631],[732,735],[732,735],[911,914],[911,914],[16347,16348],"?",[4701,4704],[4701,4704],[4541,4544],[4541,4544],[1042,1045],[1042,1045],[1572,1575],[1572,1575],[4201,4204],[4201,4204],[4697,4700],[4697,4700],[5056,5059],[5056,5059],[1039,1042],[1039,1042],[517,520],[517,520],[960,963],[960,963],[1139,1142],[1139,1142],[1211,1214],[1211,1214],[1283,1286],[1283,1286],[3047,3050],[3047,3050],[3062,3065],[3062,3065],[9815,9818],[9815,9818],[3371,3372],"",[3371,3371],"\\",[3397,3398],[3397,3397],[3412,3413],[3412,3412],[3427,3428],[3427,3427],[4398,4401],[4398,4401],[4408,4411],[4408,4411],[4724,4727],[4724,4727],[4734,4737],[4734,4737]]